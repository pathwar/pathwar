syntax = "proto3";

package pathwar.api;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options/annotations.proto";

import "pwsso.proto";
import "pwdb.proto";

option go_package = "pathwar.land/go/pkg/pwapi";
option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

service Service {
  //
  // User
  //

  rpc UserGetSession(UserGetSession.Input) returns (UserGetSession.Output) { option (google.api.http) = {get: "/user/session"}; };
  rpc UserSetPreferences(UserSetPreferences.Input) returns (UserSetPreferences.Output) { option (google.api.http) = {post: "/user/preferences"; body: "*"}; };
  rpc UserDeleteAccount(UserDeleteAccount.Input) returns (UserDeleteAccount.Output) { option (google.api.http) = {post: "/user/delete-account"; body: "*"}; };

  //
  // Challenge
  //

  rpc ChallengeList(ChallengeList.Input) returns (ChallengeList.Output) { option (google.api.http) = {get: "/challenges"}; };
  rpc ChallengeGet(ChallengeGet.Input) returns (ChallengeGet.Output) { option (google.api.http) = {get: "/challenge"}; };
  rpc SeasonChallengeList(SeasonChallengeList.Input) returns (SeasonChallengeList.Output) { option (google.api.http) = {get: "/season-challenges"}; };
  rpc SeasonChallengeGet(SeasonChallengeGet.Input) returns (SeasonChallengeGet.Output) { option (google.api.http) = {get: "/season-challenge"}; };
  rpc SeasonChallengeBuy(SeasonChallengeBuy.Input) returns (SeasonChallengeBuy.Output) { option (google.api.http) = {post: "/season-challenge/buy"; body: "*"}; };
  rpc ChallengeSubscriptionValidate(ChallengeSubscriptionValidate.Input) returns (ChallengeSubscriptionValidate.Output) { option (google.api.http) = {post: "/challenge-subscription/validate"; body: "*"}; };

  //
  // Organization
  //

  rpc OrganizationList(OrganizationList.Input) returns (OrganizationList.Output) { option (google.api.http) = {get: "/organizations"}; };

  //
  // Team
  //

  rpc TeamList(TeamList.Input) returns (TeamList.Output) { option (google.api.http) = {get: "/teams"}; };
  rpc TeamGet(TeamGet.Input) returns (TeamGet.Output) { option (google.api.http) = {get: "/team"}; };
  rpc TeamCreate(TeamCreate.Input) returns (TeamCreate.Output) { option (google.api.http) = {post: "/team"; body: "*"}; };
  rpc TeamSendInvite(TeamSendInvite.Input) returns (TeamSendInvite.Output) { option (google.api.http) = {post: "/team/invite"; body: "*"}; };
  rpc TeamAcceptInvite(TeamAcceptInvite.Input) returns (TeamAcceptInvite.Output) { option (google.api.http) = {post: "/team/invite/accept"; body: "*"}; };

  //
  // Coupon
  //

  rpc CouponValidate(CouponValidate.Input) returns (CouponValidate.Output) { option (google.api.http) = {post: "/coupon-validation"; body: "*"}; };

  //
  // Seasons
  //

  rpc SeasonList(SeasonList.Input) returns (SeasonList.Output) { option (google.api.http) = {get: "/seasons"};};

  //
  // Tool
  //

  rpc ToolPing(Void) returns (Void) { option (google.api.http) = {get: "/ping"}; };
  rpc ToolStatus(GetStatus.Input) returns (GetStatus.Output) { option (google.api.http) = {get: "/status"}; }
  rpc ToolInfo(GetInfo.Input) returns (GetInfo.Output) { option (google.api.http) = {get: "/info"}; };
  rpc ToolGenerateFakeData(Void) returns (Void) { option (google.api.http) = {post: "/tool/generate-fake-data"; body: "*"}; };
  rpc ToolDBDump(Void) returns (pathwar.db.Dump) { option (google.api.http) = {get: "/tool/sql-dump"}; };

  //
  // Agent
  //

  rpc AgentRegister(AgentRegister.Input) returns (AgentRegister.Output) { option (google.api.http) = {post: "/agent/register"; body: "*"}; }; // agent only
  rpc AgentListInstances(AgentListInstances.Input) returns (AgentListInstances.Output) { option (google.api.http) = {get: "/agent/list-instances"}; }; // agent only
  rpc AgentUpdateState(AgentUpdateState.Input) returns (AgentUpdateState.Output) { option (google.api.http) = {post: "/agent/update-state"; body: "*"}; }; // agent only

  //
  // Admin
  //

  rpc AdminListChallenges(AdminListChallenges.Input) returns (AdminListChallenges.Output) { option (google.api.http) = {get: "/admin/list-challenges"}; }; // admin only
  rpc AdminListAgents(AdminListAgents.Input) returns (AdminListAgents.Output) { option (google.api.http) = {get: "/admin/list-agents"}; }; // admin only
  rpc AdminListCoupons(AdminListCoupons.Input) returns (AdminListCoupons.Output) { option (google.api.http) = {get: "/admin/list-coupons"}; }; // admin only
  rpc AdminListOrganizations(AdminListOrganizations.Input) returns (AdminListOrganizations.Output) { option (google.api.http) = {get: "/admin/list-organizations"}; }; // admin only
  rpc AdminListTeams(AdminListTeams.Input) returns (AdminListTeams.Output) { option (google.api.http) = {get: "/admin/list-teams"}; }; // admin only
  rpc AdminListUsers(AdminListUsers.Input) returns (AdminListUsers.Output) { option (google.api.http) = {get: "/admin/list-users"}; }; // admin only
  rpc AdminListActivities(AdminListActivities.Input) returns (AdminListActivities.Output) { option (google.api.http) = {post: "/admin/list-activities"; body: "*"}; }; // admin only
  rpc AdminListChallengeSubscriptions(AdminListChallengeSubscriptions.Input) returns (AdminListChallengeSubscriptions.Output) { option (google.api.http) = {get: "/admin/list-challenge-subscriptions"}; }; // admin only
  rpc AdminListAll(AdminListAll.Input) returns (AdminListAll.Output) { option (google.api.http) = {get: "/admin/list-all"}; }; // admin only
  rpc AdminSearch(AdminSearch.Input) returns (AdminSearch.Output) { option (google.api.http) = {post: "/admin/search"; body: "*"}; }; // admin only
  rpc AdminAddCoupon(AdminAddCoupon.Input) returns (AdminAddCoupon.Output) { option (google.api.http) = {post: "/admin/add-coupon"; body: "*"}; }; // admin only
  rpc AdminRedump(AdminRedump.Input) returns (AdminRedump.Output) { option (google.api.http) = {post: "/admin/redump"; body: "*"}; }; // admin only
  rpc AdminChallengeAdd(AdminChallengeAdd.Input) returns (AdminChallengeAdd.Output) { option (google.api.http) = {post: "/admin/challenge-add"; body: "*"}; }; // admin only
  rpc AdminChallengeRedump(AdminChallengeRedump.Input) returns (AdminChallengeRedump.Output) { option (google.api.http) = {post: "/admin/challenge-redump"; body: "*"}; }; // admin only
  rpc AdminChallengeFlavorAdd(AdminChallengeFlavorAdd.Input) returns (AdminChallengeFlavorAdd.Output) { option (google.api.http) = {post: "/admin/challenge-flavor-add"; body: "*"}; }; // admin only
  rpc AdminSeasonChallengeAdd(AdminSeasonChallengeAdd.Input) returns (AdminSeasonChallengeAdd.Output) { option (google.api.http) = {post: "/admin/season-challenge-add"; body: "*"}; }; // admin only
  rpc AdminSeasonAdd(AdminSeasonAdd.Input) returns (AdminSeasonAdd.Output) { option (google.api.http) = {post: "/admin/season-add"; body: "*"}; }; // admin only
  rpc AdminUpdateTeamsMetadata(AdminUpdateTeamsMetadata.Input) returns (AdminUpdateTeamsMetadata.Output) { option (google.api.http) = {post: "/admin/update-teams-metadata"; body: "*"}; }; // admin only
  rpc AdminListSeasonChallenges(AdminListSeasonChallenges.Input) returns (AdminListSeasonChallenges.Output) { option (google.api.http) = {post: "/admin/list-season-challenges"; body: "*"}; }; // admin only
  rpc AdminUpdateSeasonChallengesMetadata(AdminUpdateSeasonChallengesMetadata.Input) returns (AdminUpdateSeasonChallengesMetadata.Output) { option (google.api.http) = {post: "/admin/update-season-challenges-metadata"; body: "*"}; }; // admin only
  rpc AdminTestingSeasonUserAdd(AdminTestingSeasonUserAdd.Input) returns (AdminTestingSeasonUserAdd.Output) { option (google.api.http) = {post: "/admin/testing-season-user-add"; body: "*"}; }; // admin only
}

//
// Input/Output messages
//

message AdminRedump {
  message Input {
    repeated string identifiers = 1 [(gogoproto.customname) = "Identifiers", (gogoproto.moretags) = "url:\"identifiers\""];
  }
  message Output {}
}

message AdminAddCoupon {
  message Input {
    string hash = 1;
    int64 value = 2;
    int64 max_validation_count = 3;
    string season_id = 4 [(gogoproto.customname) = "SeasonID"];
  }
  message Output {
    pathwar.db.Coupon coupon = 1;
  }
}

message AdminListChallenges {
  message Input {}
  message Output {
    repeated pathwar.db.Challenge challenges = 1;
  }
}

message AdminListAgents {
  message Input {}
  message Output {
    repeated pathwar.db.Agent agents = 1;
  }
}

message AdminListCoupons {
  message Input {}
  message Output {
    repeated pathwar.db.Coupon coupons = 1;
  }
}

message AdminListOrganizations {
  message Input {}
  message Output {
    repeated pathwar.db.Organization organizations = 1;
  }
}

message AdminListUsers {
  message Input {}
  message Output {
    repeated pathwar.db.User users = 1;
  }
}

message AdminListChallengeSubscriptions {
  message Input {
    string filtering_preset = 1;
    string season_challenge_id = 2 [(gogoproto.customname) = "SeasonChallengeID"];
  }
  message Output {
    repeated pathwar.db.ChallengeSubscription subscriptions = 1;
  }
}

message AdminListAll {
  message Input {}
  message Output {
    repeated pathwar.db.Challenge challenges = 1;
    repeated pathwar.db.ChallengeFlavor challenge_flavors = 2;
    repeated pathwar.db.SeasonChallenge season_challenges = 3;
    repeated pathwar.db.ChallengeInstance challenge_instances = 4;
    repeated pathwar.db.Agent agents = 5;
    repeated pathwar.db.OrganizationMember organization_members = 6;
    repeated pathwar.db.TeamMember team_members = 7;
    repeated pathwar.db.TeamInvite team_invites = 8;
    repeated pathwar.db.User users = 9;
    repeated pathwar.db.Organization organizations = 10;
    repeated pathwar.db.Season seasons = 11;
    repeated pathwar.db.Team teams = 12;
    repeated pathwar.db.WhoswhoAttempt whoswho_attempts = 13;
    repeated pathwar.db.ChallengeValidation challenge_validations = 14;
    repeated pathwar.db.ChallengeSubscription challenge_subscriptions = 15;
    repeated pathwar.db.InventoryItem inventory_items = 16;
    repeated pathwar.db.Notification notifications = 17;
    repeated pathwar.db.Coupon coupons = 18;
    repeated pathwar.db.CouponValidation coupon_validations = 19;
    repeated pathwar.db.Achievement achievements = 20;
    repeated pathwar.db.Activity activities = 21;
 }
}

message AdminSearch {
  message Input {
    string search = 1;
  }
  message Output {
    repeated pathwar.db.Challenge challenges = 1;
    repeated pathwar.db.ChallengeFlavor challenge_flavors = 2;
    repeated pathwar.db.SeasonChallenge season_challenges = 3;
    repeated pathwar.db.ChallengeInstance challenge_instances = 4;
    repeated pathwar.db.Agent agents = 5;
    repeated pathwar.db.OrganizationMember organization_members = 6;
    repeated pathwar.db.TeamMember team_members = 7;
    repeated pathwar.db.User users = 8;
    repeated pathwar.db.Organization organizations = 9;
    repeated pathwar.db.Season seasons = 10;
    repeated pathwar.db.Team teams = 11;
    repeated pathwar.db.WhoswhoAttempt whoswho_attempts = 12;
    repeated pathwar.db.ChallengeValidation challenge_validations = 13;
    repeated pathwar.db.ChallengeSubscription challenge_subscriptions = 14;
    repeated pathwar.db.InventoryItem inventory_items = 15;
    repeated pathwar.db.Notification notifications = 16;
    repeated pathwar.db.Coupon coupons = 17;
    repeated pathwar.db.CouponValidation coupon_validations = 18;
    repeated pathwar.db.Achievement achievements = 19;
    repeated pathwar.db.Activity activities = 20;
  }
}

message AdminListTeams {
  message Input {}
  message Output {
    repeated pathwar.db.Team teams = 1;
  }
}

message AdminListActivities {
  message Input {
    int64 limit = 1;
    google.protobuf.Timestamp since = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
    string filtering_preset = 3;
    google.protobuf.Timestamp to = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
  }
  message Output {
    repeated pathwar.db.Activity activities = 1;
  }
}

message AdminChallengeAdd {
  message Input {
    pathwar.db.Challenge challenge = 1;
  }
  message Output {
    pathwar.db.Challenge challenge = 1;
  }
}

message AdminChallengeRedump {
  message Input {
    string challenge_id = 1 [(gogoproto.customname) = "ChallengeID"];
  }
  message Output {
    repeated pathwar.db.ChallengeInstance challenge_instances = 1;
  }
}

message AdminChallengeFlavorAdd {
  message Input {
    pathwar.db.ChallengeFlavor challenge_flavor = 1;
    string challenge_id = 2 [(gogoproto.customname) = "ChallengeID"];
  }
  message Output {
    pathwar.db.ChallengeFlavor challenge_flavor = 1;
  }
}

message AdminSeasonChallengeAdd {
  message Input {
    pathwar.db.SeasonChallenge season_challenge = 1;
    string flavor_id = 2 [(gogoproto.customname) = "FlavorID"];
    string season_id = 3 [(gogoproto.customname) = "SeasonID"];
  }
  message Output {
    pathwar.db.SeasonChallenge season_challenge = 1;
  }
}

message AdminSeasonAdd {
  message Input {
    pathwar.db.Season season = 1;
  }
  message Output {
    pathwar.db.Season season = 1;
  }
}

message AdminUpdateTeamsMetadata {
  message Input {
    repeated pathwar.db.Team teams = 1;
  }
  message Output {}
}

message AdminListSeasonChallenges {
  message Input {
    repeated int64 id = 1;
  }
  message Output {
    repeated pathwar.db.SeasonChallenge season_challenge = 1;
  }
}

message AdminUpdateSeasonChallengesMetadata {
  message Input {
    repeated pathwar.db.SeasonChallenge season_challenges = 1;
  }
  message Output {}
}

message AdminTestingSeasonUserAdd {
  message Input {
    string user_id = 1 [(gogoproto.customname) = "UserID"];
  }
  message Output {
    pathwar.db.TeamMember team_member = 1;
  }
}

message AgentList {
  message Input {}
  message Output {
    repeated pathwar.db.Agent agents = 1;
  }
}

message AgentRegister {
  message Input {
    string name = 1 [(gogoproto.moretags) = "url:\"name\""];
    string hostname = 2 [(gogoproto.moretags) = "url:\"hostname\""];
    string os = 3 [(gogoproto.customname) = "OS", (gogoproto.moretags) = "url:\"os\""];
    string arch = 4 [(gogoproto.moretags) = "url:\"arch\""];
    string version = 5 [(gogoproto.moretags) = "url:\"version\""];
    repeated string tags = 6 [(gogoproto.moretags) = "url:\"tags\""];
    string domain_suffix = 7 [(gogoproto.moretags) = "url:\"domain_suffix\""];
    string metadata = 8 [(gogoproto.moretags) = "url:\"metadata\""];
    int32 nginx_port = 9 [(gogoproto.moretags) = "url:\"nginx_port\""];
    string auth_salt = 10 [(gogoproto.moretags) = "url:\"auth_salt\""];
    bool default_agent = 11 [(gogoproto.moretags) = "url:\"default_agent\""];
    // FIXME: capabilities
  }
  message Output {
    pathwar.db.Agent agent = 1;
  }
}

message AgentListInstances {
  message Input {
    string agent_name = 1 [(gogoproto.moretags) = "url:\"agent_name\""];
  }
  message Output {
    repeated pathwar.db.ChallengeInstance instances = 1;
  }
}

message AgentUpdateState {
  message Input {
    repeated pathwar.db.ChallengeInstance instances = 1;
    // FIXME: metrics
    // FIXME: global state
  }
  message Output {}
}

message TeamGet {
  message Input {
    int64 team_id = 1 [(gogoproto.customname) = "TeamID"];
  }
  message Output {
    pathwar.db.Team item = 1;
  }
}

message SeasonChallengeList {
  message Input {
    int64 season_id = 1 [(gogoproto.customname) = "SeasonID"];
  }
  message Output {
    repeated pathwar.db.SeasonChallenge items = 1;
  }
}

message SeasonChallengeGet {
  message Input {
    int64 season_challenge_id = 1 [(gogoproto.customname) = "SeasonChallengeID", (gogoproto.moretags) = "url:\"season_challenge_id\""];
  }
  message Output {
    pathwar.db.SeasonChallenge item = 1;
  }
}

message ChallengeGet {
  message Input {
    int64 challenge_id = 1 [(gogoproto.customname) = "ChallengeID"];
  }
  message Output {
    pathwar.db.Challenge item = 1;
  }
}

message SeasonChallengeBuy {
  message Input {
    string flavor_id = 1 [(gogoproto.customname) = "FlavorID"];
    string season_id = 2 [(gogoproto.customname) = "SeasonID"];
  }
  message Output {
    pathwar.db.ChallengeSubscription challenge_subscription = 1;
  }
}

message ChallengeSubscriptionValidate {
  message Input {
    int64 challenge_subscription_id = 1 [(gogoproto.customname) = "ChallengeSubscriptionID"];
    repeated string passphrases = 2;
    string comment = 3;
  }
  message Output {
    pathwar.db.ChallengeValidation challenge_validation = 1;
  }
}

message TeamList {
  message Input {
    int64 season_id = 1 [(gogoproto.customname) = "SeasonID"];
  }
  message Output {
    repeated pathwar.db.Team items = 1;
  }
}

message TeamCreate {
  message Input {
    string organization_id = 1 [(gogoproto.customname) = "OrganizationID"];
    string name = 2;
    string season_id = 3 [(gogoproto.customname) = "SeasonID"];
  }
  message Output {
    pathwar.db.Team team = 1;
  }
}

message TeamSendInvite {
  message Input {
    string team_id = 1 [(gogoproto.customname) = "TeamID"];
    string user_id = 2 [(gogoproto.customname) = "UserID"];
  }
  message Output {
    pathwar.db.TeamInvite team_invite = 1;
  }
}

message TeamAcceptInvite {
  message Input {
    string team_invite_id = 1 [(gogoproto.customname) = "TeamInviteID"];
  }
  message Output {
    pathwar.db.TeamMember team_member = 1;
  }
}

message SeasonList {
  message Input {}
  message Output {
    repeated SeasonAndTeam seasons = 5;
    message SeasonAndTeam {
      pathwar.db.Season season = 1;
      pathwar.db.Team team = 2;
      bool is_active = 3;
    }
  }
}

message UserSetPreferences {
  message Input {
    int64 active_season_id = 1 [(gogoproto.customname) = "ActiveSeasonID"];
    // bool dark_mode
  }
  message Output {}
}

message UserDeleteAccount {
  message Input {
    string reason = 1;
    // FIXME: captcha
  }
  message Output {}
}

message OrganizationList {
  message Input {}
  message Output {
    repeated pathwar.db.Organization items = 1;
  }
}

message ChallengeList {
  message Input {}
  message Output {
    repeated pathwar.db.Challenge items = 1;
  }
}

message UserGetSession {
  message Input {}
  message Output {
    pathwar.db.User user = 1;
    bool is_new_user = 2;
    pathwar.sso.Claims claims = 3;
    int32 notifications = 4;
    repeated SeasonAndTeam seasons = 5;
    message SeasonAndTeam {
      pathwar.db.Season season = 1;
      pathwar.db.Team team = 2;
      bool is_active = 3;
    }
  }
}

message GetStatus {
  message Input {}
  message Output {
    bool everything_is_ok = 1 [(gogoproto.customname) = "EverythingIsOK"];
    // FIXME: add more tests
  }
}

message GetInfo {
  message Input {}
  message Output {
    string version = 1;     // git tag
    int32 uptime = 2;       // seconds
    string commit = 3;      // git sha
    string built_at = 4;    // date
    string built_by = 5;    // builder
    bool within_docker = 6; // run inside docker
  }
}

message CouponValidate {
  message Input {
    string hash = 1;
    int64 team_id = 2 [(gogoproto.customname) = "TeamID"];
  }
  message Output {
    pathwar.db.CouponValidation coupon_validation = 1;
  }
}


//
// Swagger tuning
//

// Void is an empty message
message Void {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    example: { value: '{}' };
  };
}

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  host: "api.pathwar.land";
  base_path: "/";
  info: {
    title: "Pathwar API";
    version: "1.0",
    contact: {
      name: "Pathwar Staff";
      url: "https://github.com/pathwar/pathwar";
      email: "staff@pathwar.land";
    };
    license: {
      name: "(Apache-2.0 OR MIT)";
      url: "https://github.com/pathwar/pathwar/blob/master/COPYRIGHT";
    };
  };
  external_docs: {
    url: "https://github.com/pathwar/pathwar";
    description: "More about Pathwar";
  };
  //schemes: HTTP;
  schemes: HTTPS;
  schemes: WSS;
  consumes: "application/json";
  produces: "application/json";

  security_definitions: {
    security: {
      key: "BasicAuth";
      value: {
        type: TYPE_BASIC;
      };
    };
    security: {
      key: "ApiKeyAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "X-API-Key";
      };
    };
  };
  security: {
    security_requirement: {
      key: "BasicAuth";
      value: {};
    };
    security_requirement: {
      key: "ApiKeyAuth";
      value: {};
    };
  };
  responses: {
    key: "403";
    value: {
      description: "Returned when the user does not have permission to access the resource.";
    };
  };
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          type: STRING;
        };
      };
    };
  };
};
