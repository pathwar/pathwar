swagger: "2.0"
basePath: /
consumes:
- application/json
definitions:
  ActivityKind:
    default: Unknown
    enum:
    - Unknown
    - UserRegister
    - UserLogin
    - UserSetPreferences
    - UserDeleteAccount
    - SeasonChallengeBuy
    - ChallengeSubscriptionValidate
    - CouponValidate
    - AgentRegister
    - AgentChallengeInstanceCreate
    - AgentChallengeInstanceUpdate
    - TeamCreation
    - TeamInviteSend
    - TeamInviteAccept
    type: string
  ChallengeFlavorDriver:
    default: Unknown
    enum:
    - Unknown
    - Docker
    - DockerCompose
    type: string
  ChallengeFlavorRedumpPolicy:
    properties:
      delay:
        type: string
      strategy:
        type: string
    type: object
  InventoryItemItem:
    default: Unknown
    enum:
    - Unknown
    type: string
  SeasonSubscription:
    default: UnknownSubscription
    enum:
    - UnknownSubscription
    - Open
    - Close
    type: string
  SeasonVisibility:
    default: UnknownVisibility
    enum:
    - UnknownVisibility
    - Private
    - Unlisted
    - Public
    type: string
  apiAdminAddCouponInput:
    properties:
      hash:
        type: string
      max_validation_count:
        format: int64
        type: string
      season_id:
        type: string
      value:
        format: int64
        type: string
    type: object
  apiAdminAddCouponOutput:
    properties:
      coupon:
        $ref: '#/definitions/dbCoupon'
    type: object
  apiAdminChallengeAddInput:
    properties:
      challenge:
        $ref: '#/definitions/dbChallenge'
    type: object
  apiAdminChallengeAddOutput:
    properties:
      challenge:
        $ref: '#/definitions/dbChallenge'
    type: object
  apiAdminChallengeFlavorAddInput:
    properties:
      challenge_flavor:
        $ref: '#/definitions/dbChallengeFlavor'
      challenge_id:
        type: string
    type: object
  apiAdminChallengeFlavorAddOutput:
    properties:
      challenge_flavor:
        $ref: '#/definitions/dbChallengeFlavor'
    type: object
  apiAdminChallengeRedumpInput:
    properties:
      challenge_id:
        type: string
    type: object
  apiAdminChallengeRedumpOutput:
    properties:
      challenge_instances:
        items:
          $ref: '#/definitions/dbChallengeInstance'
        type: array
    type: object
  apiAdminListActivitiesInput:
    properties:
      filtering_preset:
        type: string
      limit:
        format: int64
        type: string
      since:
        format: date-time
        type: string
    type: object
  apiAdminListActivitiesOutput:
    properties:
      activities:
        items:
          $ref: '#/definitions/dbActivity'
        type: array
    type: object
  apiAdminListAgentsOutput:
    properties:
      agents:
        items:
          $ref: '#/definitions/dbAgent'
        type: array
    type: object
  apiAdminListAllOutput:
    properties:
      achievements:
        items:
          $ref: '#/definitions/dbAchievement'
        type: array
      activities:
        items:
          $ref: '#/definitions/dbActivity'
        type: array
      agents:
        items:
          $ref: '#/definitions/dbAgent'
        type: array
      challenge_flavors:
        items:
          $ref: '#/definitions/dbChallengeFlavor'
        type: array
      challenge_instances:
        items:
          $ref: '#/definitions/dbChallengeInstance'
        type: array
      challenge_subscriptions:
        items:
          $ref: '#/definitions/dbChallengeSubscription'
        type: array
      challenge_validations:
        items:
          $ref: '#/definitions/dbChallengeValidation'
        type: array
      challenges:
        items:
          $ref: '#/definitions/dbChallenge'
        type: array
      coupon_validations:
        items:
          $ref: '#/definitions/dbCouponValidation'
        type: array
      coupons:
        items:
          $ref: '#/definitions/dbCoupon'
        type: array
      inventory_items:
        items:
          $ref: '#/definitions/dbInventoryItem'
        type: array
      notifications:
        items:
          $ref: '#/definitions/dbNotification'
        type: array
      organization_members:
        items:
          $ref: '#/definitions/dbOrganizationMember'
        type: array
      organizations:
        items:
          $ref: '#/definitions/dbOrganization'
        type: array
      season_challenges:
        items:
          $ref: '#/definitions/dbSeasonChallenge'
        type: array
      seasons:
        items:
          $ref: '#/definitions/dbSeason'
        type: array
      team_invites:
        items:
          $ref: '#/definitions/dbTeamInvite'
        type: array
      team_members:
        items:
          $ref: '#/definitions/dbTeamMember'
        type: array
      teams:
        items:
          $ref: '#/definitions/dbTeam'
        type: array
      users:
        items:
          $ref: '#/definitions/dbUser'
        type: array
      whoswho_attempts:
        items:
          $ref: '#/definitions/dbWhoswhoAttempt'
        type: array
    type: object
  apiAdminListChallengeSubscriptionsOutput:
    properties:
      subscriptions:
        items:
          $ref: '#/definitions/dbChallengeSubscription'
        type: array
    type: object
  apiAdminListChallengesOutput:
    properties:
      challenges:
        items:
          $ref: '#/definitions/dbChallenge'
        type: array
    type: object
  apiAdminListCouponsOutput:
    properties:
      coupons:
        items:
          $ref: '#/definitions/dbCoupon'
        type: array
    type: object
  apiAdminListOrganizationsOutput:
    properties:
      organizations:
        items:
          $ref: '#/definitions/dbOrganization'
        type: array
    type: object
  apiAdminListTeamsOutput:
    properties:
      teams:
        items:
          $ref: '#/definitions/dbTeam'
        type: array
    type: object
  apiAdminListUsersOutput:
    properties:
      users:
        items:
          $ref: '#/definitions/dbUser'
        type: array
    type: object
  apiAdminRedumpInput:
    properties:
      identifiers:
        items:
          type: string
        type: array
    type: object
  apiAdminRedumpOutput:
    type: object
  apiAdminSearchInput:
    properties:
      search:
        type: string
    type: object
  apiAdminSearchOutput:
    properties:
      achievements:
        items:
          $ref: '#/definitions/dbAchievement'
        type: array
      activities:
        items:
          $ref: '#/definitions/dbActivity'
        type: array
      agents:
        items:
          $ref: '#/definitions/dbAgent'
        type: array
      challenge_flavors:
        items:
          $ref: '#/definitions/dbChallengeFlavor'
        type: array
      challenge_instances:
        items:
          $ref: '#/definitions/dbChallengeInstance'
        type: array
      challenge_subscriptions:
        items:
          $ref: '#/definitions/dbChallengeSubscription'
        type: array
      challenge_validations:
        items:
          $ref: '#/definitions/dbChallengeValidation'
        type: array
      challenges:
        items:
          $ref: '#/definitions/dbChallenge'
        type: array
      coupon_validations:
        items:
          $ref: '#/definitions/dbCouponValidation'
        type: array
      coupons:
        items:
          $ref: '#/definitions/dbCoupon'
        type: array
      inventory_items:
        items:
          $ref: '#/definitions/dbInventoryItem'
        type: array
      notifications:
        items:
          $ref: '#/definitions/dbNotification'
        type: array
      organization_members:
        items:
          $ref: '#/definitions/dbOrganizationMember'
        type: array
      organizations:
        items:
          $ref: '#/definitions/dbOrganization'
        type: array
      season_challenges:
        items:
          $ref: '#/definitions/dbSeasonChallenge'
        type: array
      seasons:
        items:
          $ref: '#/definitions/dbSeason'
        type: array
      team_members:
        items:
          $ref: '#/definitions/dbTeamMember'
        type: array
      teams:
        items:
          $ref: '#/definitions/dbTeam'
        type: array
      users:
        items:
          $ref: '#/definitions/dbUser'
        type: array
      whoswho_attempts:
        items:
          $ref: '#/definitions/dbWhoswhoAttempt'
        type: array
    type: object
  apiAdminSeasonAddInput:
    properties:
      season:
        $ref: '#/definitions/dbSeason'
    type: object
  apiAdminSeasonAddOutput:
    properties:
      season:
        $ref: '#/definitions/dbSeason'
    type: object
  apiAdminSeasonChallengeAddInput:
    properties:
      flavor_id:
        type: string
      season_challenge:
        $ref: '#/definitions/dbSeasonChallenge'
      season_id:
        type: string
    type: object
  apiAdminSeasonChallengeAddOutput:
    properties:
      season_challenge:
        $ref: '#/definitions/dbSeasonChallenge'
    type: object
  apiAdminSetTeamsInput:
    properties:
      teams:
        items:
          $ref: '#/definitions/dbTeam'
        type: array
    type: object
  apiAdminSetTeamsOutput:
    type: object
  apiAdminTestingSeasonUserAddInput:
    properties:
      user_id:
        type: string
    type: object
  apiAdminTestingSeasonUserAddOutput:
    properties:
      team_member:
        $ref: '#/definitions/dbTeamMember'
    type: object
  apiAgentListInstancesOutput:
    properties:
      instances:
        items:
          $ref: '#/definitions/dbChallengeInstance'
        type: array
    type: object
  apiAgentRegisterInput:
    properties:
      arch:
        type: string
      auth_salt:
        type: string
      default_agent:
        format: boolean
        type: boolean
      domain_suffix:
        type: string
      hostname:
        type: string
      metadata:
        type: string
      name:
        type: string
      nginx_port:
        format: int32
        type: integer
      os:
        type: string
      tags:
        items:
          type: string
        type: array
      version:
        type: string
    type: object
  apiAgentRegisterOutput:
    properties:
      agent:
        $ref: '#/definitions/dbAgent'
    type: object
  apiAgentUpdateStateInput:
    properties:
      instances:
        items:
          $ref: '#/definitions/dbChallengeInstance'
        type: array
    type: object
  apiAgentUpdateStateOutput:
    type: object
  apiChallengeGetOutput:
    properties:
      item:
        $ref: '#/definitions/dbChallenge'
    type: object
  apiChallengeListOutput:
    properties:
      items:
        items:
          $ref: '#/definitions/dbChallenge'
        type: array
    type: object
  apiChallengeSubscriptionValidateInput:
    properties:
      challenge_subscription_id:
        format: int64
        type: string
      comment:
        type: string
      passphrases:
        items:
          type: string
        type: array
    type: object
  apiChallengeSubscriptionValidateOutput:
    properties:
      challenge_validation:
        $ref: '#/definitions/dbChallengeValidation'
    type: object
  apiCouponValidateInput:
    properties:
      hash:
        type: string
      team_id:
        format: int64
        type: string
    type: object
  apiCouponValidateOutput:
    properties:
      coupon_validation:
        $ref: '#/definitions/dbCouponValidation'
    type: object
  apiGetInfoOutput:
    properties:
      built_at:
        type: string
      built_by:
        type: string
      commit:
        type: string
      uptime:
        format: int32
        type: integer
      version:
        type: string
      within_docker:
        format: boolean
        type: boolean
    type: object
  apiGetStatusOutput:
    properties:
      everything_is_ok:
        format: boolean
        type: boolean
    type: object
  apiOrganizationListOutput:
    properties:
      items:
        items:
          $ref: '#/definitions/dbOrganization'
        type: array
    type: object
  apiSeasonChallengeBuyInput:
    properties:
      flavor_id:
        type: string
      season_id:
        type: string
    type: object
  apiSeasonChallengeBuyOutput:
    properties:
      challenge_subscription:
        $ref: '#/definitions/dbChallengeSubscription'
    type: object
  apiSeasonChallengeGetOutput:
    properties:
      item:
        $ref: '#/definitions/dbSeasonChallenge'
    type: object
  apiSeasonChallengeListOutput:
    properties:
      items:
        items:
          $ref: '#/definitions/dbSeasonChallenge'
        type: array
    type: object
  apiSeasonListOutput:
    properties:
      seasons:
        items:
          $ref: '#/definitions/apiSeasonListOutputSeasonAndTeam'
        type: array
    type: object
  apiSeasonListOutputSeasonAndTeam:
    properties:
      is_active:
        format: boolean
        type: boolean
      season:
        $ref: '#/definitions/dbSeason'
      team:
        $ref: '#/definitions/dbTeam'
    type: object
  apiTeamAcceptInviteInput:
    properties:
      team_invite_id:
        type: string
    type: object
  apiTeamAcceptInviteOutput:
    properties:
      team_member:
        $ref: '#/definitions/dbTeamMember'
    type: object
  apiTeamCreateInput:
    properties:
      name:
        type: string
      organization_id:
        type: string
      season_id:
        type: string
    type: object
  apiTeamCreateOutput:
    properties:
      team:
        $ref: '#/definitions/dbTeam'
    type: object
  apiTeamGetOutput:
    properties:
      item:
        $ref: '#/definitions/dbTeam'
    type: object
  apiTeamListOutput:
    properties:
      items:
        items:
          $ref: '#/definitions/dbTeam'
        type: array
    type: object
  apiTeamSendInviteInput:
    properties:
      team_id:
        type: string
      user_id:
        type: string
    type: object
  apiTeamSendInviteOutput:
    properties:
      team_invite:
        $ref: '#/definitions/dbTeamInvite'
    type: object
  apiUserDeleteAccountInput:
    properties:
      reason:
        type: string
    type: object
  apiUserDeleteAccountOutput:
    type: object
  apiUserGetSessionOutput:
    properties:
      claims:
        $ref: '#/definitions/ssoClaims'
      is_new_user:
        format: boolean
        type: boolean
      notifications:
        format: int32
        type: integer
      seasons:
        items:
          $ref: '#/definitions/apiUserGetSessionOutputSeasonAndTeam'
        type: array
      user:
        $ref: '#/definitions/dbUser'
    type: object
  apiUserGetSessionOutputSeasonAndTeam:
    properties:
      is_active:
        format: boolean
        type: boolean
      season:
        $ref: '#/definitions/dbSeason'
      team:
        $ref: '#/definitions/dbTeam'
    type: object
  apiUserSetPreferencesInput:
    properties:
      active_season_id:
        format: int64
        type: string
    type: object
  apiUserSetPreferencesOutput:
    type: object
  apiVoid:
    example: {}
    title: Void is an empty message
    type: object
  dbAchievement:
    properties:
      argument:
        type: string
      author:
        $ref: '#/definitions/dbUser'
      author_id:
        format: int64
        type: string
      challenge_validation:
        $ref: '#/definitions/dbChallengeValidation'
      challenge_validation_id:
        format: int64
        type: string
      comment:
        type: string
      created_at:
        format: date-time
        type: string
      id:
        format: int64
        type: string
      is_global:
        format: boolean
        type: boolean
      slug:
        type: string
      team:
        $ref: '#/definitions/dbTeam'
      team_id:
        format: int64
        type: string
      type:
        $ref: '#/definitions/dbAchievementType'
      updated_at:
        format: date-time
        type: string
    type: object
  dbAchievementType:
    default: Undefined
    enum:
    - Undefined
    - Buy1Challenge
    - Buy5Challenges
    - Buy10Challenges
    - Buy20Challenges
    - Buy50Challenges
    - Validate1Challenge
    - Validate5Challenges
    - Validate10Challenges
    - Validate20Challenges
    - Validate50Challenges
    - Validate1Coupon
    - Validate5Coupons
    - Validate10Coupons
    - Validate20Coupons
    - Validate50Coupons
    - Validate100Coupons
    - Author1Challenge
    - Author2Challenges
    - Author5Challenges
    - Author10Challenges
    - EarlyAdopterTop100
    - EarlyAdopterTop1000
    - Old1Year
    - Old2Years
    - Send1PullRequest
    - Send2PullRequests
    - Send5PullRequests
    - Send10Pullrequests
    - Staff
    - Contributor
    - BugHunter
    - Moderator
    - HackThePlatform
    type: string
  dbActivity:
    properties:
      agent:
        $ref: '#/definitions/dbAgent'
      agent_id:
        format: int64
        type: string
      author:
        $ref: '#/definitions/dbUser'
      author_id:
        format: int64
        type: string
      challenge:
        $ref: '#/definitions/dbChallenge'
      challenge_flavor:
        $ref: '#/definitions/dbChallengeFlavor'
      challenge_flavor_id:
        format: int64
        type: string
      challenge_id:
        format: int64
        type: string
      challenge_instance:
        $ref: '#/definitions/dbChallengeInstance'
      challenge_instance_id:
        format: int64
        type: string
      challenge_subscription:
        $ref: '#/definitions/dbChallengeSubscription'
      challenge_subscription_id:
        format: int64
        type: string
      coupon:
        $ref: '#/definitions/dbCoupon'
      coupon_id:
        format: int64
        type: string
      created_at:
        format: date-time
        type: string
      id:
        format: int64
        type: string
      kind:
        $ref: '#/definitions/ActivityKind'
      organization:
        $ref: '#/definitions/dbOrganization'
      organization_id:
        format: int64
        type: string
      season:
        $ref: '#/definitions/dbSeason'
      season_challenge:
        $ref: '#/definitions/dbSeasonChallenge'
      season_challenge_id:
        format: int64
        type: string
      season_id:
        format: int64
        type: string
      team:
        $ref: '#/definitions/dbTeam'
      team_id:
        format: int64
        type: string
      team_invite:
        $ref: '#/definitions/dbAgent'
      team_invite_id:
        format: int64
        type: string
      team_member:
        $ref: '#/definitions/dbTeamMember'
      team_member_id:
        format: int64
        type: string
      updated_at:
        format: date-time
        type: string
      user:
        $ref: '#/definitions/dbUser'
      user_id:
        format: int64
        type: string
    type: object
  dbAgent:
    properties:
      arch:
        type: string
      auth_salt:
        type: string
      challenge_instances:
        items:
          $ref: '#/definitions/dbChallengeInstance'
        type: array
      created_at:
        format: date-time
        type: string
      default_agent:
        format: boolean
        type: boolean
      domain_suffix:
        type: string
      err_msg:
        type: string
      hostname:
        type: string
      id:
        format: int64
        type: string
      last_registration_at:
        format: date-time
        type: string
      last_seen_at:
        format: date-time
        type: string
      metadata:
        type: string
      name:
        type: string
      nginx_port:
        format: int64
        type: string
      os:
        type: string
      slug:
        type: string
      status:
        $ref: '#/definitions/dbAgentStatus'
      tags:
        type: string
      times_registered:
        format: int64
        type: string
      times_seen:
        format: int64
        type: string
      updated_at:
        format: date-time
        type: string
      version:
        type: string
    type: object
  dbAgentStatus:
    default: Unknown
    enum:
    - Unknown
    - Active
    - Inactive
    - Timeout
    - Error
    type: string
  dbChallenge:
    properties:
      author:
        type: string
      created_at:
        format: date-time
        type: string
      description:
        type: string
      flavors:
        items:
          $ref: '#/definitions/dbChallengeFlavor'
        type: array
      homepage:
        type: string
      id:
        format: int64
        type: string
      is_draft:
        format: boolean
        type: boolean
      locale:
        type: string
      name:
        type: string
      preview_url:
        type: string
      slug:
        type: string
      updated_at:
        format: date-time
        type: string
    type: object
  dbChallengeFlavor:
    properties:
      body:
        type: string
      category:
        type: string
      challenge:
        $ref: '#/definitions/dbChallenge'
      challenge_id:
        format: int64
        type: string
      compose_bundle:
        type: string
      created_at:
        format: date-time
        type: string
      driver:
        $ref: '#/definitions/ChallengeFlavorDriver'
      id:
        format: int64
        type: string
      instances:
        items:
          $ref: '#/definitions/dbChallengeInstance'
        type: array
      passphrases:
        format: int64
        type: string
      purchase_price:
        format: int64
        type: string
      redump_policy:
        items:
          $ref: '#/definitions/ChallengeFlavorRedumpPolicy'
        type: array
      redump_policy_config:
        type: string
      season_challenges:
        items:
          $ref: '#/definitions/dbSeasonChallenge'
        type: array
      slug:
        type: string
      source_url:
        type: string
      tag_list:
        type: string
      tags:
        items:
          type: string
        type: array
      updated_at:
        format: date-time
        type: string
      validation_reward:
        format: int64
        type: string
      version:
        type: string
    type: object
  dbChallengeInstance:
    properties:
      agent:
        $ref: '#/definitions/dbAgent'
      agent_id:
        format: int64
        type: string
      created_at:
        format: date-time
        type: string
      flavor:
        $ref: '#/definitions/dbChallengeFlavor'
      flavor_id:
        format: int64
        type: string
      id:
        format: int64
        type: string
      instance_config:
        format: byte
        type: string
      last_redump_requested_at:
        format: date-time
        type: string
      last_started_at:
        format: date-time
        type: string
      last_stopped_at:
        format: date-time
        type: string
      nginx_url:
        type: string
      redump_count:
        format: int64
        type: string
      slug:
        title: |-
          usage metrics to be updated by the agent (unique users, requests, etc)
          timestamp last_marked_as_tainted
          driver (docker)
        type: string
      startup_error:
        type: string
      status:
        $ref: '#/definitions/dbChallengeInstanceStatus'
      updated_at:
        format: date-time
        type: string
      validation_count:
        format: int64
        type: string
    type: object
  dbChallengeInstanceStatus:
    default: Unknown
    enum:
    - Unknown
    - IsNew
    - AcceptedByAgent
    - Available
    - NeedRedump
    - Disabled
    type: string
  dbChallengeSubscription:
    properties:
      buyer:
        $ref: '#/definitions/dbUser'
      buyer_id:
        format: int64
        type: string
      closed_at:
        format: date-time
        type: string
      closer:
        $ref: '#/definitions/dbUser'
      closer_id:
        format: int64
        type: string
      created_at:
        format: date-time
        type: string
      id:
        format: int64
        type: string
      season_challenge:
        $ref: '#/definitions/dbSeasonChallenge'
      season_challenge_id:
        format: int64
        type: string
      slug:
        type: string
      status:
        $ref: '#/definitions/dbChallengeSubscriptionStatus'
      team:
        $ref: '#/definitions/dbTeam'
      team_id:
        format: int64
        type: string
      updated_at:
        format: date-time
        type: string
      validations:
        items:
          $ref: '#/definitions/dbChallengeValidation'
        type: array
    type: object
  dbChallengeSubscriptionStatus:
    default: Unknown
    enum:
    - Unknown
    - Active
    - Closed
    type: string
  dbChallengeValidation:
    properties:
      author:
        $ref: '#/definitions/dbUser'
      author_comment:
        type: string
      author_id:
        format: int64
        type: string
      challenge_subscription:
        $ref: '#/definitions/dbChallengeSubscription'
      challenge_subscription_id:
        format: int64
        type: string
      corrector_comment:
        type: string
      created_at:
        format: date-time
        type: string
      id:
        format: int64
        type: string
      passphrases:
        type: string
      slug:
        type: string
      status:
        $ref: '#/definitions/dbChallengeValidationStatus'
      team:
        $ref: '#/definitions/dbTeam'
      team_id:
        format: int64
        type: string
      updated_at:
        format: date-time
        type: string
    type: object
  dbChallengeValidationStatus:
    default: Unknown
    enum:
    - Unknown
    - NeedReview
    - Accepted
    - Refused
    - AutoAccepted
    type: string
  dbCoupon:
    properties:
      created_at:
        format: date-time
        type: string
      hash:
        type: string
      id:
        format: int64
        type: string
      max_validation_count:
        format: int64
        type: string
      season:
        $ref: '#/definitions/dbSeason'
      season_id:
        format: int64
        type: string
      updated_at:
        format: date-time
        type: string
      validations:
        items:
          $ref: '#/definitions/dbCouponValidation'
        type: array
      value:
        format: int64
        type: string
    type: object
  dbCouponValidation:
    properties:
      author:
        $ref: '#/definitions/dbUser'
      author_id:
        format: int64
        type: string
      comment:
        type: string
      coupon:
        $ref: '#/definitions/dbCoupon'
      coupon_id:
        format: int64
        type: string
      created_at:
        format: date-time
        type: string
      id:
        format: int64
        type: string
      team:
        $ref: '#/definitions/dbTeam'
      team_id:
        format: int64
        type: string
      updated_at:
        format: date-time
        type: string
    type: object
  dbDeletionStatus:
    default: Unknown
    enum:
    - Unknown
    - Active
    - Requested
    - Anonymized
    type: string
  dbDump:
    properties:
      achievements:
        items:
          $ref: '#/definitions/dbAchievement'
        type: array
      agents:
        items:
          $ref: '#/definitions/dbAgent'
        type: array
      challenge_flavors:
        items:
          $ref: '#/definitions/dbChallengeFlavor'
        type: array
      challenge_instances:
        items:
          $ref: '#/definitions/dbChallengeInstance'
        type: array
      challenge_subscriptions:
        items:
          $ref: '#/definitions/dbChallengeSubscription'
        type: array
      challenge_validations:
        items:
          $ref: '#/definitions/dbChallengeValidation'
        type: array
      challenges:
        items:
          $ref: '#/definitions/dbChallenge'
        type: array
      coupon_validations:
        items:
          $ref: '#/definitions/dbCouponValidation'
        type: array
      coupons:
        items:
          $ref: '#/definitions/dbCoupon'
        type: array
      inventory_items:
        items:
          $ref: '#/definitions/dbInventoryItem'
        type: array
      notifications:
        items:
          $ref: '#/definitions/dbNotification'
        type: array
      organization_members:
        items:
          $ref: '#/definitions/dbOrganizationMember'
        type: array
      organizations:
        items:
          $ref: '#/definitions/dbOrganization'
        type: array
      season_challenges:
        items:
          $ref: '#/definitions/dbSeasonChallenge'
        type: array
      seasons:
        items:
          $ref: '#/definitions/dbSeason'
        type: array
      team_members:
        items:
          $ref: '#/definitions/dbTeamMember'
        type: array
      teams:
        items:
          $ref: '#/definitions/dbTeam'
        type: array
      users:
        items:
          $ref: '#/definitions/dbUser'
        type: array
      whoswho_attempts:
        items:
          $ref: '#/definitions/dbWhoswhoAttempt'
        type: array
    type: object
  dbInventoryItem:
    properties:
      created_at:
        format: date-time
        type: string
      id:
        format: int64
        type: string
      item:
        $ref: '#/definitions/InventoryItemItem'
      owner:
        $ref: '#/definitions/dbTeamMember'
      owner_id:
        format: int64
        type: string
      slug:
        type: string
      updated_at:
        format: date-time
        type: string
    type: object
  dbNotification:
    properties:
      args:
        type: string
      click_url:
        type: string
      created_at:
        format: date-time
        type: string
      id:
        format: int64
        type: string
      msg:
        type: string
      read_at:
        format: date-time
        type: string
      updated_at:
        format: date-time
        type: string
      user:
        $ref: '#/definitions/dbUser'
      user_id:
        format: int64
        type: string
    type: object
  dbOrganization:
    properties:
      created_at:
        format: date-time
        type: string
      deleted_at:
        format: date-time
        type: string
      deletion_status:
        $ref: '#/definitions/dbDeletionStatus'
      global_season:
        format: boolean
        type: boolean
      gravatar_url:
        type: string
      id:
        format: int64
        type: string
      locale:
        type: string
      members:
        items:
          $ref: '#/definitions/dbOrganizationMember'
        type: array
      name:
        type: string
      received_whoswho_attempts:
        items:
          $ref: '#/definitions/dbWhoswhoAttempt'
        type: array
      slug:
        type: string
      teams:
        items:
          $ref: '#/definitions/dbTeam'
        type: array
      updated_at:
        format: date-time
        type: string
    type: object
  dbOrganizationMember:
    properties:
      created_at:
        format: date-time
        type: string
      id:
        format: int64
        type: string
      organization:
        $ref: '#/definitions/dbOrganization'
      organization_id:
        format: int64
        type: string
      role:
        $ref: '#/definitions/dbOrganizationMemberRole'
      slug:
        type: string
      updated_at:
        format: date-time
        type: string
      user:
        $ref: '#/definitions/dbUser'
      user_id:
        format: int64
        type: string
    type: object
  dbOrganizationMemberRole:
    default: Undefined
    enum:
    - Undefined
    - Owner
    - Member
    type: string
  dbSeason:
    properties:
      coupons:
        items:
          $ref: '#/definitions/dbCoupon'
        type: array
      created_at:
        format: date-time
        type: string
      id:
        format: int64
        type: string
      is_global:
        format: boolean
        type: boolean
      is_testing:
        format: boolean
        type: boolean
      name:
        type: string
      slug:
        type: string
      status:
        $ref: '#/definitions/dbSeasonStatus'
      subscription:
        $ref: '#/definitions/SeasonSubscription'
      teams:
        items:
          $ref: '#/definitions/dbTeam'
        type: array
      updated_at:
        format: date-time
        type: string
      visibility:
        $ref: '#/definitions/SeasonVisibility'
    type: object
  dbSeasonChallenge:
    properties:
      created_at:
        format: date-time
        type: string
      flavor:
        $ref: '#/definitions/dbChallengeFlavor'
      flavor_id:
        format: int64
        type: string
      id:
        format: int64
        type: string
      season:
        $ref: '#/definitions/dbSeason'
      season_id:
        format: int64
        type: string
      slug:
        type: string
      subscriptions:
        items:
          $ref: '#/definitions/dbChallengeSubscription'
        type: array
      updated_at:
        format: date-time
        type: string
    type: object
  dbSeasonStatus:
    default: UnknownStatus
    enum:
    - UnknownStatus
    - Started
    - Stopped
    type: string
  dbTeam:
    properties:
      achievements:
        items:
          $ref: '#/definitions/dbAchievement'
        type: array
      bronze_medals:
        format: int64
        type: string
      cash:
        format: int64
        type: string
      challenge_subscriptions:
        items:
          $ref: '#/definitions/dbChallengeSubscription'
        type: array
      created_at:
        format: date-time
        type: string
      deleted_at:
        format: date-time
        type: string
      deletion_status:
        $ref: '#/definitions/dbDeletionStatus'
      gold_medals:
        format: int64
        type: string
      id:
        format: int64
        type: string
      is_global:
        format: boolean
        type: boolean
      members:
        items:
          $ref: '#/definitions/dbTeamMember'
        type: array
      nb_achievements:
        format: int64
        type: string
      organization:
        $ref: '#/definitions/dbOrganization'
      organization_id:
        format: int64
        type: string
      score:
        format: int64
        type: string
      season:
        $ref: '#/definitions/dbSeason'
      season_id:
        format: int64
        type: string
      silver_medals:
        format: int64
        type: string
      slug:
        type: string
      updated_at:
        format: date-time
        type: string
    type: object
  dbTeamInvite:
    properties:
      created_at:
        format: date-time
        type: string
      deleted_at:
        format: date-time
        type: string
      id:
        format: int64
        type: string
      slug:
        type: string
      team:
        $ref: '#/definitions/dbTeam'
      team_id:
        format: int64
        type: string
      updated_at:
        format: date-time
        type: string
      user:
        $ref: '#/definitions/dbUser'
      user_id:
        format: int64
        type: string
    type: object
  dbTeamMember:
    properties:
      achievements:
        items:
          $ref: '#/definitions/dbAchievement'
        type: array
      challenge_validations:
        items:
          $ref: '#/definitions/dbChallengeValidation'
        type: array
      coupons:
        items:
          $ref: '#/definitions/dbCoupon'
        type: array
      created_at:
        format: date-time
        type: string
      id:
        format: int64
        type: string
      items:
        items:
          $ref: '#/definitions/dbInventoryItem'
        type: array
      received_whoswho_attempts:
        items:
          $ref: '#/definitions/dbWhoswhoAttempt'
        type: array
      role:
        $ref: '#/definitions/dbTeamMemberRole'
      sent_whoswho_attempts:
        items:
          $ref: '#/definitions/dbWhoswhoAttempt'
        type: array
      slug:
        type: string
      team:
        $ref: '#/definitions/dbTeam'
      team_id:
        format: int64
        type: string
      updated_at:
        format: date-time
        type: string
      user:
        $ref: '#/definitions/dbUser'
      user_id:
        format: int64
        type: string
    type: object
  dbTeamMemberRole:
    default: Undefined
    enum:
    - Undefined
    - Owner
    - Member
    type: string
  dbUser:
    properties:
      active_season:
        $ref: '#/definitions/dbSeason'
      active_season_id:
        format: int64
        type: string
      active_team_member:
        $ref: '#/definitions/dbTeamMember'
      active_team_member_id:
        format: int64
        type: string
      created_at:
        format: date-time
        type: string
      deleted_at:
        format: date-time
        type: string
      deletion_reason:
        type: string
      deletion_status:
        $ref: '#/definitions/dbDeletionStatus'
      email:
        type: string
      gravatar_url:
        type: string
      id:
        format: int64
        type: string
      locale:
        type: string
      notifications:
        items:
          $ref: '#/definitions/dbNotification'
        type: array
      oauth_subject:
        type: string
      organization_memberships:
        items:
          $ref: '#/definitions/dbOrganizationMember'
        type: array
      slug:
        type: string
      team_memberships:
        items:
          $ref: '#/definitions/dbTeamMember'
        type: array
      updated_at:
        format: date-time
        type: string
      username:
        type: string
      website_url:
        type: string
    title: User defines a User Account / Profile
    type: object
  dbWhoswhoAttempt:
    properties:
      author:
        $ref: '#/definitions/dbUser'
      author_id:
        format: int64
        type: string
      author_team:
        $ref: '#/definitions/dbTeam'
      author_team_id:
        format: int64
        type: string
      created_at:
        format: date-time
        type: string
      id:
        format: int64
        type: string
      slug:
        type: string
      success:
        format: boolean
        type: boolean
      target_team:
        $ref: '#/definitions/dbTeam'
      target_team_id:
        format: int64
        type: string
      target_user:
        $ref: '#/definitions/dbUser'
      target_user_id:
        format: int64
        type: string
      updated_at:
        format: date-time
        type: string
    type: object
  protobufAny:
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }

      Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

      Example 4: Pack and unpack a message in Go

          foo := &pb.Foo{...}
          any, err := ptypes.MarshalAny(foo)
          ...
          foo := &pb.Foo{}
          if err := ptypes.UnmarshalAny(any, foo); err != nil {
            ...
          }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".


      JSON
      ====
      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
    properties:
      type_url:
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
        type: string
      value:
        description: Must be a valid serialized protocol buffer of the above specified type.
        format: byte
        type: string
    type: object
  runtimeError:
    properties:
      code:
        format: int32
        type: integer
      details:
        items:
          $ref: '#/definitions/protobufAny'
        type: array
      error:
        type: string
      message:
        type: string
    type: object
  ssoActionToken:
    properties:
      asid:
        type: string
      aud:
        type: string
      auth_time:
        format: date-time
        type: string
      azp:
        type: string
      exp:
        format: date-time
        type: string
      iat:
        format: date-time
        type: string
      iss:
        type: string
      jti:
        type: string
      nbf:
        format: float
        type: number
      nonce:
        type: string
      scope:
        type: string
      session_state:
        title: additional keycloak internals
        type: string
      sub:
        type: string
      typ:
        type: string
    title: See https://www.keycloak.org/docs/latest/server_development/index.html#_action_token_anatomy
    type: object
  ssoClaims:
    properties:
      action_token:
        $ref: '#/definitions/ssoActionToken'
      email:
        type: string
      email_verified:
        format: boolean
        type: boolean
      family_name:
        type: string
      given_name:
        type: string
      preferred_username:
        type: string
    type: object
externalDocs:
  description: More about Pathwar
  url: https://github.com/pathwar/pathwar
host: api.pathwar.land
info:
  contact:
    email: staff@pathwar.land
    name: Pathwar Staff
    url: https://github.com/pathwar/pathwar
  license:
    name: (Apache-2.0 OR MIT)
    url: https://github.com/pathwar/pathwar/blob/master/COPYRIGHT
  title: Pathwar API
  version: "1.0"
paths:
  /admin/add-coupon:
    post:
      operationId: Service_AdminAddCoupon
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apiAdminAddCouponInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiAdminAddCouponOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /admin/challenge-add:
    post:
      operationId: Service_AdminChallengeAdd
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apiAdminChallengeAddInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiAdminChallengeAddOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /admin/challenge-flavor-add:
    post:
      operationId: Service_AdminChallengeFlavorAdd
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apiAdminChallengeFlavorAddInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiAdminChallengeFlavorAddOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /admin/challenge-redump:
    post:
      operationId: Service_AdminChallengeRedump
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apiAdminChallengeRedumpInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiAdminChallengeRedumpOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /admin/list-activities:
    post:
      operationId: Service_AdminListActivities
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apiAdminListActivitiesInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiAdminListActivitiesOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /admin/list-agents:
    get:
      operationId: Service_AdminListAgents
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiAdminListAgentsOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /admin/list-all:
    get:
      operationId: Service_AdminListAll
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiAdminListAllOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /admin/list-challenge-subscriptions:
    get:
      operationId: Service_AdminListChallengeSubscriptions
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiAdminListChallengeSubscriptionsOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /admin/list-challenges:
    get:
      operationId: Service_AdminListChallenges
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiAdminListChallengesOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /admin/list-coupons:
    get:
      operationId: Service_AdminListCoupons
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiAdminListCouponsOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /admin/list-organizations:
    get:
      operationId: Service_AdminListOrganizations
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiAdminListOrganizationsOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /admin/list-teams:
    get:
      operationId: Service_AdminListTeams
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiAdminListTeamsOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /admin/list-users:
    get:
      operationId: Service_AdminListUsers
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiAdminListUsersOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /admin/redump:
    post:
      operationId: Service_AdminRedump
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apiAdminRedumpInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiAdminRedumpOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /admin/search:
    post:
      operationId: Service_AdminSearch
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apiAdminSearchInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiAdminSearchOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /admin/season-add:
    post:
      operationId: Service_AdminSeasonAdd
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apiAdminSeasonAddInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiAdminSeasonAddOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /admin/season-challenge-add:
    post:
      operationId: Service_AdminSeasonChallengeAdd
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apiAdminSeasonChallengeAddInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiAdminSeasonChallengeAddOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /admin/set-teams:
    post:
      operationId: Service_AdminSetTeams
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apiAdminSetTeamsInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiAdminSetTeamsOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /admin/testing-season-user-add:
    post:
      operationId: Service_AdminTestingSeasonUserAdd
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apiAdminTestingSeasonUserAddInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiAdminTestingSeasonUserAddOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /agent/list-instances:
    get:
      operationId: Service_AgentListInstances
      parameters:
      - in: query
        name: agent_name
        required: false
        type: string
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiAgentListInstancesOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /agent/register:
    post:
      operationId: Service_AgentRegister
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apiAgentRegisterInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiAgentRegisterOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /agent/update-state:
    post:
      operationId: Service_AgentUpdateState
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apiAgentUpdateStateInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiAgentUpdateStateOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /challenge:
    get:
      operationId: Service_ChallengeGet
      parameters:
      - format: int64
        in: query
        name: challenge_id
        required: false
        type: string
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiChallengeGetOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /challenge-subscription/validate:
    post:
      operationId: Service_ChallengeSubscriptionValidate
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apiChallengeSubscriptionValidateInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiChallengeSubscriptionValidateOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /challenges:
    get:
      operationId: Service_ChallengeList
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiChallengeListOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /coupon-validation:
    post:
      operationId: Service_CouponValidate
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apiCouponValidateInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiCouponValidateOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /info:
    get:
      operationId: Service_ToolInfo
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiGetInfoOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /organizations:
    get:
      operationId: Service_OrganizationList
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiOrganizationListOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /ping:
    get:
      operationId: Service_ToolPing
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiVoid'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /season-challenge:
    get:
      operationId: Service_SeasonChallengeGet
      parameters:
      - format: int64
        in: query
        name: season_challenge_id
        required: false
        type: string
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiSeasonChallengeGetOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /season-challenge/buy:
    post:
      operationId: Service_SeasonChallengeBuy
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apiSeasonChallengeBuyInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiSeasonChallengeBuyOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /season-challenges:
    get:
      operationId: Service_SeasonChallengeList
      parameters:
      - format: int64
        in: query
        name: season_id
        required: false
        type: string
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiSeasonChallengeListOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /seasons:
    get:
      operationId: Service_SeasonList
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiSeasonListOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /status:
    get:
      operationId: Service_ToolStatus
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiGetStatusOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /team:
    get:
      operationId: Service_TeamGet
      parameters:
      - format: int64
        in: query
        name: team_id
        required: false
        type: string
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiTeamGetOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
    post:
      operationId: Service_TeamCreate
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apiTeamCreateInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiTeamCreateOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /team/invite:
    post:
      operationId: Service_TeamSendInvite
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apiTeamSendInviteInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiTeamSendInviteOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /team/invite/accept:
    post:
      operationId: Service_TeamAcceptInvite
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apiTeamAcceptInviteInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiTeamAcceptInviteOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /teams:
    get:
      operationId: Service_TeamList
      parameters:
      - format: int64
        in: query
        name: season_id
        required: false
        type: string
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiTeamListOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /tool/generate-fake-data:
    post:
      operationId: Service_ToolGenerateFakeData
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apiVoid'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiVoid'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /tool/sql-dump:
    get:
      operationId: Service_ToolDBDump
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/dbDump'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /user/delete-account:
    post:
      operationId: Service_UserDeleteAccount
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apiUserDeleteAccountInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiUserDeleteAccountOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /user/preferences:
    post:
      operationId: Service_UserSetPreferences
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apiUserSetPreferencesInput'
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiUserSetPreferencesOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
  /user/session:
    get:
      operationId: Service_UserGetSession
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/apiUserGetSessionOutput'
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "404":
          description: Returned when the resource does not exist.
          schema:
            format: string
            type: string
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/runtimeError'
      tags:
      - Service
produces:
- application/json
schemes:
- https
- wss
security:
- ApiKeyAuth: []
  BasicAuth: []
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-API-Key
    type: apiKey
  BasicAuth:
    type: basic
