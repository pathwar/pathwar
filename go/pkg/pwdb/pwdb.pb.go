// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pwdb.proto

package pwdb

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeletionStatus int32

const (
	DeletionStatus_Unknown    DeletionStatus = 0
	DeletionStatus_Active     DeletionStatus = 1
	DeletionStatus_Requested  DeletionStatus = 2
	DeletionStatus_Anonymized DeletionStatus = 3
)

var DeletionStatus_name = map[int32]string{
	0: "Unknown",
	1: "Active",
	2: "Requested",
	3: "Anonymized",
}

var DeletionStatus_value = map[string]int32{
	"Unknown":    0,
	"Active":     1,
	"Requested":  2,
	"Anonymized": 3,
}

func (x DeletionStatus) String() string {
	return proto.EnumName(DeletionStatus_name, int32(x))
}

func (DeletionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{0}
}

type ChallengeFlavor_Driver int32

const (
	ChallengeFlavor_Unknown       ChallengeFlavor_Driver = 0
	ChallengeFlavor_Docker        ChallengeFlavor_Driver = 1
	ChallengeFlavor_DockerCompose ChallengeFlavor_Driver = 2
)

var ChallengeFlavor_Driver_name = map[int32]string{
	0: "Unknown",
	1: "Docker",
	2: "DockerCompose",
}

var ChallengeFlavor_Driver_value = map[string]int32{
	"Unknown":       0,
	"Docker":        1,
	"DockerCompose": 2,
}

func (x ChallengeFlavor_Driver) String() string {
	return proto.EnumName(ChallengeFlavor_Driver_name, int32(x))
}

func (ChallengeFlavor_Driver) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{1, 0}
}

type ChallengeInstance_Status int32

const (
	ChallengeInstance_Unknown         ChallengeInstance_Status = 0
	ChallengeInstance_IsNew           ChallengeInstance_Status = 1
	ChallengeInstance_AcceptedByAgent ChallengeInstance_Status = 2
	ChallengeInstance_Available       ChallengeInstance_Status = 3
	ChallengeInstance_NeedRedump      ChallengeInstance_Status = 4
	ChallengeInstance_Disabled        ChallengeInstance_Status = 5
)

var ChallengeInstance_Status_name = map[int32]string{
	0: "Unknown",
	1: "IsNew",
	2: "AcceptedByAgent",
	3: "Available",
	4: "NeedRedump",
	5: "Disabled",
}

var ChallengeInstance_Status_value = map[string]int32{
	"Unknown":         0,
	"IsNew":           1,
	"AcceptedByAgent": 2,
	"Available":       3,
	"NeedRedump":      4,
	"Disabled":        5,
}

func (x ChallengeInstance_Status) String() string {
	return proto.EnumName(ChallengeInstance_Status_name, int32(x))
}

func (ChallengeInstance_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{3, 0}
}

type Agent_Status int32

const (
	Agent_Unknown  Agent_Status = 0
	Agent_Active   Agent_Status = 1
	Agent_Inactive Agent_Status = 2
	Agent_Timeout  Agent_Status = 3
	Agent_Error    Agent_Status = 4
)

var Agent_Status_name = map[int32]string{
	0: "Unknown",
	1: "Active",
	2: "Inactive",
	3: "Timeout",
	4: "Error",
}

var Agent_Status_value = map[string]int32{
	"Unknown":  0,
	"Active":   1,
	"Inactive": 2,
	"Timeout":  3,
	"Error":    4,
}

func (x Agent_Status) String() string {
	return proto.EnumName(Agent_Status_name, int32(x))
}

func (Agent_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{4, 0}
}

type OrganizationMember_Role int32

const (
	OrganizationMember_Undefined OrganizationMember_Role = 0
	OrganizationMember_Owner     OrganizationMember_Role = 1
	OrganizationMember_Member    OrganizationMember_Role = 2
)

var OrganizationMember_Role_name = map[int32]string{
	0: "Undefined",
	1: "Owner",
	2: "Member",
}

var OrganizationMember_Role_value = map[string]int32{
	"Undefined": 0,
	"Owner":     1,
	"Member":    2,
}

func (x OrganizationMember_Role) String() string {
	return proto.EnumName(OrganizationMember_Role_name, int32(x))
}

func (OrganizationMember_Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{5, 0}
}

type TeamMember_Role int32

const (
	TeamMember_Undefined TeamMember_Role = 0
	TeamMember_Owner     TeamMember_Role = 1
	TeamMember_Member    TeamMember_Role = 2
)

var TeamMember_Role_name = map[int32]string{
	0: "Undefined",
	1: "Owner",
	2: "Member",
}

var TeamMember_Role_value = map[string]int32{
	"Undefined": 0,
	"Owner":     1,
	"Member":    2,
}

func (x TeamMember_Role) String() string {
	return proto.EnumName(TeamMember_Role_name, int32(x))
}

func (TeamMember_Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{6, 0}
}

type Season_Status int32

const (
	Season_UnknownStatus Season_Status = 0
	Season_Started       Season_Status = 1
	Season_Stopped       Season_Status = 2
)

var Season_Status_name = map[int32]string{
	0: "UnknownStatus",
	1: "Started",
	2: "Stopped",
}

var Season_Status_value = map[string]int32{
	"UnknownStatus": 0,
	"Started":       1,
	"Stopped":       2,
}

func (x Season_Status) String() string {
	return proto.EnumName(Season_Status_name, int32(x))
}

func (Season_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{10, 0}
}

type Season_Visibility int32

const (
	Season_UnknownVisibility Season_Visibility = 0
	Season_Private           Season_Visibility = 1
	Season_Unlisted          Season_Visibility = 2
	Season_Public            Season_Visibility = 3
)

var Season_Visibility_name = map[int32]string{
	0: "UnknownVisibility",
	1: "Private",
	2: "Unlisted",
	3: "Public",
}

var Season_Visibility_value = map[string]int32{
	"UnknownVisibility": 0,
	"Private":           1,
	"Unlisted":          2,
	"Public":            3,
}

func (x Season_Visibility) String() string {
	return proto.EnumName(Season_Visibility_name, int32(x))
}

func (Season_Visibility) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{10, 1}
}

type Season_Subscription int32

const (
	Season_UnknownSubscription Season_Subscription = 0
	Season_Open                Season_Subscription = 1
	Season_Close               Season_Subscription = 2
)

var Season_Subscription_name = map[int32]string{
	0: "UnknownSubscription",
	1: "Open",
	2: "Close",
}

var Season_Subscription_value = map[string]int32{
	"UnknownSubscription": 0,
	"Open":                1,
	"Close":               2,
}

func (x Season_Subscription) String() string {
	return proto.EnumName(Season_Subscription_name, int32(x))
}

func (Season_Subscription) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{10, 2}
}

type ChallengeValidation_Status int32

const (
	ChallengeValidation_Unknown      ChallengeValidation_Status = 0
	ChallengeValidation_NeedReview   ChallengeValidation_Status = 1
	ChallengeValidation_Accepted     ChallengeValidation_Status = 2
	ChallengeValidation_Refused      ChallengeValidation_Status = 3
	ChallengeValidation_AutoAccepted ChallengeValidation_Status = 4
)

var ChallengeValidation_Status_name = map[int32]string{
	0: "Unknown",
	1: "NeedReview",
	2: "Accepted",
	3: "Refused",
	4: "AutoAccepted",
}

var ChallengeValidation_Status_value = map[string]int32{
	"Unknown":      0,
	"NeedReview":   1,
	"Accepted":     2,
	"Refused":      3,
	"AutoAccepted": 4,
}

func (x ChallengeValidation_Status) String() string {
	return proto.EnumName(ChallengeValidation_Status_name, int32(x))
}

func (ChallengeValidation_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{13, 0}
}

type ChallengeSubscription_Status int32

const (
	ChallengeSubscription_Unknown ChallengeSubscription_Status = 0
	ChallengeSubscription_Active  ChallengeSubscription_Status = 1
	ChallengeSubscription_Closed  ChallengeSubscription_Status = 2
)

var ChallengeSubscription_Status_name = map[int32]string{
	0: "Unknown",
	1: "Active",
	2: "Closed",
}

var ChallengeSubscription_Status_value = map[string]int32{
	"Unknown": 0,
	"Active":  1,
	"Closed":  2,
}

func (x ChallengeSubscription_Status) String() string {
	return proto.EnumName(ChallengeSubscription_Status_name, int32(x))
}

func (ChallengeSubscription_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{14, 0}
}

type InventoryItem_Item int32

const (
	InventoryItem_Unknown InventoryItem_Item = 0
)

var InventoryItem_Item_name = map[int32]string{
	0: "Unknown",
}

var InventoryItem_Item_value = map[string]int32{
	"Unknown": 0,
}

func (x InventoryItem_Item) String() string {
	return proto.EnumName(InventoryItem_Item_name, int32(x))
}

func (InventoryItem_Item) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{15, 0}
}

type Achievement_Type int32

const (
	Achievement_Undefined            Achievement_Type = 0
	Achievement_Buy1Challenge        Achievement_Type = 1
	Achievement_Buy5Challenges       Achievement_Type = 2
	Achievement_Buy10Challenges      Achievement_Type = 3
	Achievement_Buy20Challenges      Achievement_Type = 4
	Achievement_Buy50Challenges      Achievement_Type = 5
	Achievement_Validate1Challenge   Achievement_Type = 10
	Achievement_Validate5Challenges  Achievement_Type = 11
	Achievement_Validate10Challenges Achievement_Type = 12
	Achievement_Validate20Challenges Achievement_Type = 13
	Achievement_Validate50Challenges Achievement_Type = 14
	Achievement_Validate1Coupon      Achievement_Type = 20
	Achievement_Validate5Coupons     Achievement_Type = 21
	Achievement_Validate10Coupons    Achievement_Type = 22
	Achievement_Validate20Coupons    Achievement_Type = 23
	Achievement_Validate50Coupons    Achievement_Type = 24
	Achievement_Validate100Coupons   Achievement_Type = 25
	Achievement_Author1Challenge     Achievement_Type = 30
	Achievement_Author2Challenges    Achievement_Type = 31
	Achievement_Author5Challenges    Achievement_Type = 32
	Achievement_Author10Challenges   Achievement_Type = 33
	Achievement_EarlyAdopterTop100   Achievement_Type = 40
	Achievement_EarlyAdopterTop1000  Achievement_Type = 41
	Achievement_Old1Year             Achievement_Type = 50
	Achievement_Old2Years            Achievement_Type = 51
	Achievement_Send1PullRequest     Achievement_Type = 90
	Achievement_Send2PullRequests    Achievement_Type = 91
	Achievement_Send5PullRequests    Achievement_Type = 92
	Achievement_Send10Pullrequests   Achievement_Type = 93
	Achievement_Staff                Achievement_Type = 100
	Achievement_Contributor          Achievement_Type = 101
	Achievement_BugHunter            Achievement_Type = 102
	Achievement_Moderator            Achievement_Type = 103
	Achievement_HackThePlatform      Achievement_Type = 104
)

var Achievement_Type_name = map[int32]string{
	0:   "Undefined",
	1:   "Buy1Challenge",
	2:   "Buy5Challenges",
	3:   "Buy10Challenges",
	4:   "Buy20Challenges",
	5:   "Buy50Challenges",
	10:  "Validate1Challenge",
	11:  "Validate5Challenges",
	12:  "Validate10Challenges",
	13:  "Validate20Challenges",
	14:  "Validate50Challenges",
	20:  "Validate1Coupon",
	21:  "Validate5Coupons",
	22:  "Validate10Coupons",
	23:  "Validate20Coupons",
	24:  "Validate50Coupons",
	25:  "Validate100Coupons",
	30:  "Author1Challenge",
	31:  "Author2Challenges",
	32:  "Author5Challenges",
	33:  "Author10Challenges",
	40:  "EarlyAdopterTop100",
	41:  "EarlyAdopterTop1000",
	50:  "Old1Year",
	51:  "Old2Years",
	90:  "Send1PullRequest",
	91:  "Send2PullRequests",
	92:  "Send5PullRequests",
	93:  "Send10Pullrequests",
	100: "Staff",
	101: "Contributor",
	102: "BugHunter",
	103: "Moderator",
	104: "HackThePlatform",
}

var Achievement_Type_value = map[string]int32{
	"Undefined":            0,
	"Buy1Challenge":        1,
	"Buy5Challenges":       2,
	"Buy10Challenges":      3,
	"Buy20Challenges":      4,
	"Buy50Challenges":      5,
	"Validate1Challenge":   10,
	"Validate5Challenges":  11,
	"Validate10Challenges": 12,
	"Validate20Challenges": 13,
	"Validate50Challenges": 14,
	"Validate1Coupon":      20,
	"Validate5Coupons":     21,
	"Validate10Coupons":    22,
	"Validate20Coupons":    23,
	"Validate50Coupons":    24,
	"Validate100Coupons":   25,
	"Author1Challenge":     30,
	"Author2Challenges":    31,
	"Author5Challenges":    32,
	"Author10Challenges":   33,
	"EarlyAdopterTop100":   40,
	"EarlyAdopterTop1000":  41,
	"Old1Year":             50,
	"Old2Years":            51,
	"Send1PullRequest":     90,
	"Send2PullRequests":    91,
	"Send5PullRequests":    92,
	"Send10Pullrequests":   93,
	"Staff":                100,
	"Contributor":          101,
	"BugHunter":            102,
	"Moderator":            103,
	"HackThePlatform":      104,
}

func (x Achievement_Type) String() string {
	return proto.EnumName(Achievement_Type_name, int32(x))
}

func (Achievement_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{19, 0}
}

type Activity_Kind int32

const (
	Activity_Unknown                       Activity_Kind = 0
	Activity_UserRegister                  Activity_Kind = 1
	Activity_UserLogin                     Activity_Kind = 2
	Activity_UserSetPreferences            Activity_Kind = 3
	Activity_UserDeleteAccount             Activity_Kind = 4
	Activity_SeasonChallengeBuy            Activity_Kind = 5
	Activity_ChallengeSubscriptionValidate Activity_Kind = 6
	Activity_CouponValidate                Activity_Kind = 7
	Activity_AgentRegister                 Activity_Kind = 8
	Activity_AgentChallengeInstanceCreate  Activity_Kind = 9
	Activity_AgentChallengeInstanceUpdate  Activity_Kind = 10
	Activity_TeamCreation                  Activity_Kind = 11
	Activity_TeamInviteSend                Activity_Kind = 12
	Activity_TeamInviteAccept              Activity_Kind = 13
)

var Activity_Kind_name = map[int32]string{
	0:  "Unknown",
	1:  "UserRegister",
	2:  "UserLogin",
	3:  "UserSetPreferences",
	4:  "UserDeleteAccount",
	5:  "SeasonChallengeBuy",
	6:  "ChallengeSubscriptionValidate",
	7:  "CouponValidate",
	8:  "AgentRegister",
	9:  "AgentChallengeInstanceCreate",
	10: "AgentChallengeInstanceUpdate",
	11: "TeamCreation",
	12: "TeamInviteSend",
	13: "TeamInviteAccept",
}

var Activity_Kind_value = map[string]int32{
	"Unknown":                       0,
	"UserRegister":                  1,
	"UserLogin":                     2,
	"UserSetPreferences":            3,
	"UserDeleteAccount":             4,
	"SeasonChallengeBuy":            5,
	"ChallengeSubscriptionValidate": 6,
	"CouponValidate":                7,
	"AgentRegister":                 8,
	"AgentChallengeInstanceCreate":  9,
	"AgentChallengeInstanceUpdate":  10,
	"TeamCreation":                  11,
	"TeamInviteSend":                12,
	"TeamInviteAccept":              13,
}

func (x Activity_Kind) String() string {
	return proto.EnumName(Activity_Kind_name, int32(x))
}

func (Activity_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{20, 0}
}

type Challenge struct {
	ID          int64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key" yaml:"id,omitempty"`
	CreatedAt   *time.Time         `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty" yaml:"created_at,omitempty"`
	UpdatedAt   *time.Time         `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty" yaml:"updated_at,omitempty"`
	Name        string             `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	Description string             `protobuf:"bytes,101,opt,name=description,proto3" json:"description,omitempty"`
	Author      string             `protobuf:"bytes,102,opt,name=author,proto3" json:"author,omitempty"`
	Locale      string             `protobuf:"bytes,103,opt,name=locale,proto3" json:"locale,omitempty"`
	IsDraft     bool               `protobuf:"varint,104,opt,name=is_draft,json=isDraft,proto3" json:"is_draft,omitempty"`
	PreviewURL  string             `protobuf:"bytes,105,opt,name=preview_url,json=previewUrl,proto3" json:"preview_url,omitempty"`
	Homepage    string             `protobuf:"bytes,106,opt,name=homepage,proto3" json:"homepage,omitempty"`
	Slug        string             `protobuf:"bytes,107,opt,name=slug,proto3" json:"slug,omitempty" gorm:"unique_index"`
	Flavors     []*ChallengeFlavor `protobuf:"bytes,200,rep,name=flavors,proto3" json:"flavors,omitempty" gorm:"PRELOAD:false" yaml:"flavors,omitempty"`
}

func (m *Challenge) Reset()         { *m = Challenge{} }
func (m *Challenge) String() string { return proto.CompactTextString(m) }
func (*Challenge) ProtoMessage()    {}
func (*Challenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{0}
}
func (m *Challenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Challenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Challenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Challenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Challenge.Merge(m, src)
}
func (m *Challenge) XXX_Size() int {
	return m.Size()
}
func (m *Challenge) XXX_DiscardUnknown() {
	xxx_messageInfo_Challenge.DiscardUnknown(m)
}

var xxx_messageInfo_Challenge proto.InternalMessageInfo

func (m *Challenge) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Challenge) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Challenge) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Challenge) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Challenge) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Challenge) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Challenge) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *Challenge) GetIsDraft() bool {
	if m != nil {
		return m.IsDraft
	}
	return false
}

func (m *Challenge) GetPreviewURL() string {
	if m != nil {
		return m.PreviewURL
	}
	return ""
}

func (m *Challenge) GetHomepage() string {
	if m != nil {
		return m.Homepage
	}
	return ""
}

func (m *Challenge) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *Challenge) GetFlavors() []*ChallengeFlavor {
	if m != nil {
		return m.Flavors
	}
	return nil
}

type ChallengeFlavor struct {
	ID                 int64                           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key" yaml:"id,omitempty"`
	CreatedAt          *time.Time                      `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty" yaml:"created_at,omitempty"`
	UpdatedAt          *time.Time                      `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty" yaml:"updated_at,omitempty"`
	Version            string                          `protobuf:"bytes,100,opt,name=version,proto3" json:"version,omitempty"`
	SourceURL          string                          `protobuf:"bytes,104,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`
	ComposeBundle      string                          `protobuf:"bytes,105,opt,name=compose_bundle,json=composeBundle,proto3" json:"compose_bundle,omitempty" gorm:"size:100000"`
	Driver             ChallengeFlavor_Driver          `protobuf:"varint,106,opt,name=driver,proto3,enum=pathwar.db.ChallengeFlavor_Driver" json:"driver,omitempty" yaml:"-"`
	PurchasePrice      int64                           `protobuf:"varint,107,opt,name=purchase_price,json=purchasePrice,proto3" json:"purchase_price,omitempty" yaml:"purchase_price"`
	ValidationReward   int64                           `protobuf:"varint,108,opt,name=validation_reward,json=validationReward,proto3" json:"validation_reward,omitempty" yaml:"validation_reward"`
	Slug               string                          `protobuf:"bytes,109,opt,name=slug,proto3" json:"slug,omitempty" gorm:"unique_index"`
	Body               string                          `protobuf:"bytes,110,opt,name=body,proto3" json:"body,omitempty"`
	Passphrases        int64                           `protobuf:"varint,111,opt,name=passphrases,proto3" json:"passphrases,omitempty"`
	Category           string                          `protobuf:"bytes,112,opt,name=category,proto3" json:"category,omitempty"`
	Tags               []string                        `protobuf:"bytes,113,rep,name=tags,proto3" json:"tags,omitempty" gorm:"-"`
	TagList            string                          `protobuf:"bytes,114,opt,name=tag_list,json=tagList,proto3" json:"tag_list,omitempty" yaml:"-"`
	RedumpPolicy       []*ChallengeFlavor_RedumpPolicy `protobuf:"bytes,115,rep,name=redump_policy,json=redumpPolicy,proto3" json:"redump_policy,omitempty" gorm:"-" yaml:"redump-policy"`
	RedumpPolicyConfig string                          `protobuf:"bytes,116,opt,name=redump_policy_config,json=redumpPolicyConfig,proto3" json:"redump_policy_config,omitempty" yaml:"-"`
	Challenge          *Challenge                      `protobuf:"bytes,200,opt,name=challenge,proto3" json:"challenge,omitempty" gorm:"foreignkey:ChallengeID" yaml:"challenge,omitempty"`
	ChallengeID        int64                           `protobuf:"varint,201,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty" sql:"not null" gorm:"index" yaml:"challenge_id,omitempty"`
	SeasonChallenges   []*SeasonChallenge              `protobuf:"bytes,202,rep,name=season_challenges,json=seasonChallenges,proto3" json:"season_challenges,omitempty" gorm:"PRELOAD:false;foreignkey:FlavorID" yaml:"season_challenges,omitempty"`
	Instances          []*ChallengeInstance            `protobuf:"bytes,203,rep,name=instances,proto3" json:"instances,omitempty" gorm:"PRELOAD:false;foreignkey:FlavorID" yaml:"instances,omitempty"`
}

func (m *ChallengeFlavor) Reset()         { *m = ChallengeFlavor{} }
func (m *ChallengeFlavor) String() string { return proto.CompactTextString(m) }
func (*ChallengeFlavor) ProtoMessage()    {}
func (*ChallengeFlavor) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{1}
}
func (m *ChallengeFlavor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeFlavor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeFlavor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeFlavor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeFlavor.Merge(m, src)
}
func (m *ChallengeFlavor) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeFlavor) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeFlavor.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeFlavor proto.InternalMessageInfo

func (m *ChallengeFlavor) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ChallengeFlavor) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ChallengeFlavor) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *ChallengeFlavor) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ChallengeFlavor) GetSourceURL() string {
	if m != nil {
		return m.SourceURL
	}
	return ""
}

func (m *ChallengeFlavor) GetComposeBundle() string {
	if m != nil {
		return m.ComposeBundle
	}
	return ""
}

func (m *ChallengeFlavor) GetDriver() ChallengeFlavor_Driver {
	if m != nil {
		return m.Driver
	}
	return ChallengeFlavor_Unknown
}

func (m *ChallengeFlavor) GetPurchasePrice() int64 {
	if m != nil {
		return m.PurchasePrice
	}
	return 0
}

func (m *ChallengeFlavor) GetValidationReward() int64 {
	if m != nil {
		return m.ValidationReward
	}
	return 0
}

func (m *ChallengeFlavor) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *ChallengeFlavor) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *ChallengeFlavor) GetPassphrases() int64 {
	if m != nil {
		return m.Passphrases
	}
	return 0
}

func (m *ChallengeFlavor) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *ChallengeFlavor) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ChallengeFlavor) GetTagList() string {
	if m != nil {
		return m.TagList
	}
	return ""
}

func (m *ChallengeFlavor) GetRedumpPolicy() []*ChallengeFlavor_RedumpPolicy {
	if m != nil {
		return m.RedumpPolicy
	}
	return nil
}

func (m *ChallengeFlavor) GetRedumpPolicyConfig() string {
	if m != nil {
		return m.RedumpPolicyConfig
	}
	return ""
}

func (m *ChallengeFlavor) GetChallenge() *Challenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (m *ChallengeFlavor) GetChallengeID() int64 {
	if m != nil {
		return m.ChallengeID
	}
	return 0
}

func (m *ChallengeFlavor) GetSeasonChallenges() []*SeasonChallenge {
	if m != nil {
		return m.SeasonChallenges
	}
	return nil
}

func (m *ChallengeFlavor) GetInstances() []*ChallengeInstance {
	if m != nil {
		return m.Instances
	}
	return nil
}

type ChallengeFlavor_RedumpPolicy struct {
	Strategy string `protobuf:"bytes,1,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Delay    string `protobuf:"bytes,2,opt,name=delay,proto3" json:"delay,omitempty" yaml:"delay,omitempty"`
}

func (m *ChallengeFlavor_RedumpPolicy) Reset()         { *m = ChallengeFlavor_RedumpPolicy{} }
func (m *ChallengeFlavor_RedumpPolicy) String() string { return proto.CompactTextString(m) }
func (*ChallengeFlavor_RedumpPolicy) ProtoMessage()    {}
func (*ChallengeFlavor_RedumpPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{1, 0}
}
func (m *ChallengeFlavor_RedumpPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeFlavor_RedumpPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeFlavor_RedumpPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeFlavor_RedumpPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeFlavor_RedumpPolicy.Merge(m, src)
}
func (m *ChallengeFlavor_RedumpPolicy) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeFlavor_RedumpPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeFlavor_RedumpPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeFlavor_RedumpPolicy proto.InternalMessageInfo

func (m *ChallengeFlavor_RedumpPolicy) GetStrategy() string {
	if m != nil {
		return m.Strategy
	}
	return ""
}

func (m *ChallengeFlavor_RedumpPolicy) GetDelay() string {
	if m != nil {
		return m.Delay
	}
	return ""
}

type SeasonChallenge struct {
	ID            int64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt     *time.Time               `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt     *time.Time               `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Slug          string                   `protobuf:"bytes,100,opt,name=slug,proto3" json:"slug,omitempty"`
	NbValidations int64                    `protobuf:"varint,101,opt,name=nb_validations,json=nbValidations,proto3" json:"nb_validations,omitempty"`
	Flavor        *ChallengeFlavor         `protobuf:"bytes,200,opt,name=flavor,proto3" json:"flavor,omitempty" gorm:"foreignkey:FlavorID"`
	FlavorID      int64                    `protobuf:"varint,201,opt,name=flavor_id,json=flavorId,proto3" json:"flavor_id,omitempty" sql:"not null" gorm:"index;unique_index:idx_seasonchallenge_flavor_season"`
	Season        *Season                  `protobuf:"bytes,202,opt,name=season,proto3" json:"season,omitempty" gorm:"foreignkey:SeasonID"`
	SeasonID      int64                    `protobuf:"varint,203,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty" sql:"not null" gorm:"index;unique_index:idx_seasonchallenge_flavor_season"`
	Subscriptions []*ChallengeSubscription `protobuf:"bytes,204,rep,name=subscriptions,proto3" json:"subscriptions,omitempty" gorm:"PRELOAD:false"`
}

func (m *SeasonChallenge) Reset()         { *m = SeasonChallenge{} }
func (m *SeasonChallenge) String() string { return proto.CompactTextString(m) }
func (*SeasonChallenge) ProtoMessage()    {}
func (*SeasonChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{2}
}
func (m *SeasonChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallenge.Merge(m, src)
}
func (m *SeasonChallenge) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallenge proto.InternalMessageInfo

func (m *SeasonChallenge) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SeasonChallenge) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *SeasonChallenge) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *SeasonChallenge) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *SeasonChallenge) GetNbValidations() int64 {
	if m != nil {
		return m.NbValidations
	}
	return 0
}

func (m *SeasonChallenge) GetFlavor() *ChallengeFlavor {
	if m != nil {
		return m.Flavor
	}
	return nil
}

func (m *SeasonChallenge) GetFlavorID() int64 {
	if m != nil {
		return m.FlavorID
	}
	return 0
}

func (m *SeasonChallenge) GetSeason() *Season {
	if m != nil {
		return m.Season
	}
	return nil
}

func (m *SeasonChallenge) GetSeasonID() int64 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

func (m *SeasonChallenge) GetSubscriptions() []*ChallengeSubscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

type ChallengeInstance struct {
	ID                    int64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt             *time.Time               `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt             *time.Time               `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Status                ChallengeInstance_Status `protobuf:"varint,100,opt,name=status,proto3,enum=pathwar.db.ChallengeInstance_Status" json:"status,omitempty"`
	LastStartedAt         *time.Time               `protobuf:"bytes,101,opt,name=last_started_at,json=lastStartedAt,proto3,stdtime" json:"last_started_at,omitempty"`
	LastStoppedAt         *time.Time               `protobuf:"bytes,102,opt,name=last_stopped_at,json=lastStoppedAt,proto3,stdtime" json:"last_stopped_at,omitempty"`
	LastRedumpRequestedAt *time.Time               `protobuf:"bytes,103,opt,name=last_redump_requested_at,json=lastRedumpRequestedAt,proto3,stdtime" json:"last_redump_requested_at,omitempty"`
	StartupError          string                   `protobuf:"bytes,104,opt,name=startup_error,json=startupError,proto3" json:"startup_error,omitempty"`
	RedumpCount           int64                    `protobuf:"varint,105,opt,name=redump_count,json=redumpCount,proto3" json:"redump_count,omitempty"`
	ValidationCount       int64                    `protobuf:"varint,106,opt,name=validation_count,json=validationCount,proto3" json:"validation_count,omitempty"`
	InstanceConfig        []byte                   `protobuf:"bytes,107,opt,name=instance_config,json=instanceConfig,proto3" json:"instance_config,omitempty"`
	// usage metrics to be updated by the agent (unique users, requests, etc)
	// timestamp last_marked_as_tainted
	// driver (docker)
	Slug     string           `protobuf:"bytes,108,opt,name=slug,proto3" json:"slug,omitempty"`
	Agent    *Agent           `protobuf:"bytes,200,opt,name=agent,proto3" json:"agent,omitempty" gorm:"foreignkey:AgentID"`
	AgentID  int64            `protobuf:"varint,201,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty" sql:"not null" gorm:"index"`
	Flavor   *ChallengeFlavor `protobuf:"bytes,202,opt,name=flavor,proto3" json:"flavor,omitempty" gorm:"foreignkey:FlavorID"`
	FlavorID int64            `protobuf:"varint,203,opt,name=flavor_id,json=flavorId,proto3" json:"flavor_id,omitempty" sql:"not null" gorm:"index"`
	NginxURL string           `protobuf:"bytes,250,opt,name=nginx_url,json=nginxUrl,proto3" json:"nginx_url,omitempty" gorm:"-"`
}

func (m *ChallengeInstance) Reset()         { *m = ChallengeInstance{} }
func (m *ChallengeInstance) String() string { return proto.CompactTextString(m) }
func (*ChallengeInstance) ProtoMessage()    {}
func (*ChallengeInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{3}
}
func (m *ChallengeInstance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeInstance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeInstance.Merge(m, src)
}
func (m *ChallengeInstance) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeInstance.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeInstance proto.InternalMessageInfo

func (m *ChallengeInstance) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ChallengeInstance) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ChallengeInstance) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *ChallengeInstance) GetStatus() ChallengeInstance_Status {
	if m != nil {
		return m.Status
	}
	return ChallengeInstance_Unknown
}

func (m *ChallengeInstance) GetLastStartedAt() *time.Time {
	if m != nil {
		return m.LastStartedAt
	}
	return nil
}

func (m *ChallengeInstance) GetLastStoppedAt() *time.Time {
	if m != nil {
		return m.LastStoppedAt
	}
	return nil
}

func (m *ChallengeInstance) GetLastRedumpRequestedAt() *time.Time {
	if m != nil {
		return m.LastRedumpRequestedAt
	}
	return nil
}

func (m *ChallengeInstance) GetStartupError() string {
	if m != nil {
		return m.StartupError
	}
	return ""
}

func (m *ChallengeInstance) GetRedumpCount() int64 {
	if m != nil {
		return m.RedumpCount
	}
	return 0
}

func (m *ChallengeInstance) GetValidationCount() int64 {
	if m != nil {
		return m.ValidationCount
	}
	return 0
}

func (m *ChallengeInstance) GetInstanceConfig() []byte {
	if m != nil {
		return m.InstanceConfig
	}
	return nil
}

func (m *ChallengeInstance) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *ChallengeInstance) GetAgent() *Agent {
	if m != nil {
		return m.Agent
	}
	return nil
}

func (m *ChallengeInstance) GetAgentID() int64 {
	if m != nil {
		return m.AgentID
	}
	return 0
}

func (m *ChallengeInstance) GetFlavor() *ChallengeFlavor {
	if m != nil {
		return m.Flavor
	}
	return nil
}

func (m *ChallengeInstance) GetFlavorID() int64 {
	if m != nil {
		return m.FlavorID
	}
	return 0
}

func (m *ChallengeInstance) GetNginxURL() string {
	if m != nil {
		return m.NginxURL
	}
	return ""
}

type Agent struct {
	ID                 int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt          *time.Time           `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt          *time.Time           `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Name               string               `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	Hostname           string               `protobuf:"bytes,101,opt,name=hostname,proto3" json:"hostname,omitempty"`
	OS                 string               `protobuf:"bytes,102,opt,name=os,proto3" json:"os,omitempty"`
	Status             Agent_Status         `protobuf:"varint,103,opt,name=status,proto3,enum=pathwar.db.Agent_Status" json:"status,omitempty"`
	ErrMsg             string               `protobuf:"bytes,104,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
	Arch               string               `protobuf:"bytes,105,opt,name=arch,proto3" json:"arch,omitempty"`
	Version            string               `protobuf:"bytes,106,opt,name=version,proto3" json:"version,omitempty"`
	Tags               string               `protobuf:"bytes,107,opt,name=tags,proto3" json:"tags,omitempty"`
	DomainSuffix       string               `protobuf:"bytes,108,opt,name=domain_suffix,json=domainSuffix,proto3" json:"domain_suffix,omitempty"`
	NginxPort          int64                `protobuf:"varint,109,opt,name=nginx_port,json=nginxPort,proto3" json:"nginx_port,omitempty"`
	Metadata           string               `protobuf:"bytes,110,opt,name=metadata,proto3" json:"metadata,omitempty"`
	TimesSeen          int64                `protobuf:"varint,111,opt,name=times_seen,json=timesSeen,proto3" json:"times_seen,omitempty"`
	TimesRegistered    int64                `protobuf:"varint,112,opt,name=times_registered,json=timesRegistered,proto3" json:"times_registered,omitempty"`
	LastRegistrationAt *time.Time           `protobuf:"bytes,113,opt,name=last_registration_at,json=lastRegistrationAt,proto3,stdtime" json:"last_registration_at,omitempty"`
	LastSeenAt         *time.Time           `protobuf:"bytes,114,opt,name=last_seen_at,json=lastSeenAt,proto3,stdtime" json:"last_seen_at,omitempty"`
	AuthSalt           string               `protobuf:"bytes,115,opt,name=auth_salt,json=authSalt,proto3" json:"auth_salt,omitempty"`
	DefaultAgent       bool                 `protobuf:"varint,116,opt,name=default_agent,json=defaultAgent,proto3" json:"default_agent,omitempty"`
	Slug               string               `protobuf:"bytes,117,opt,name=slug,proto3" json:"slug,omitempty"`
	ChallengeInstances []*ChallengeInstance `protobuf:"bytes,200,rep,name=challenge_instances,json=challengeInstances,proto3" json:"challenge_instances,omitempty" gorm:"PRELOAD:false"`
}

func (m *Agent) Reset()         { *m = Agent{} }
func (m *Agent) String() string { return proto.CompactTextString(m) }
func (*Agent) ProtoMessage()    {}
func (*Agent) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{4}
}
func (m *Agent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Agent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Agent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Agent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Agent.Merge(m, src)
}
func (m *Agent) XXX_Size() int {
	return m.Size()
}
func (m *Agent) XXX_DiscardUnknown() {
	xxx_messageInfo_Agent.DiscardUnknown(m)
}

var xxx_messageInfo_Agent proto.InternalMessageInfo

func (m *Agent) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Agent) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Agent) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Agent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Agent) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Agent) GetOS() string {
	if m != nil {
		return m.OS
	}
	return ""
}

func (m *Agent) GetStatus() Agent_Status {
	if m != nil {
		return m.Status
	}
	return Agent_Unknown
}

func (m *Agent) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *Agent) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *Agent) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Agent) GetTags() string {
	if m != nil {
		return m.Tags
	}
	return ""
}

func (m *Agent) GetDomainSuffix() string {
	if m != nil {
		return m.DomainSuffix
	}
	return ""
}

func (m *Agent) GetNginxPort() int64 {
	if m != nil {
		return m.NginxPort
	}
	return 0
}

func (m *Agent) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func (m *Agent) GetTimesSeen() int64 {
	if m != nil {
		return m.TimesSeen
	}
	return 0
}

func (m *Agent) GetTimesRegistered() int64 {
	if m != nil {
		return m.TimesRegistered
	}
	return 0
}

func (m *Agent) GetLastRegistrationAt() *time.Time {
	if m != nil {
		return m.LastRegistrationAt
	}
	return nil
}

func (m *Agent) GetLastSeenAt() *time.Time {
	if m != nil {
		return m.LastSeenAt
	}
	return nil
}

func (m *Agent) GetAuthSalt() string {
	if m != nil {
		return m.AuthSalt
	}
	return ""
}

func (m *Agent) GetDefaultAgent() bool {
	if m != nil {
		return m.DefaultAgent
	}
	return false
}

func (m *Agent) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *Agent) GetChallengeInstances() []*ChallengeInstance {
	if m != nil {
		return m.ChallengeInstances
	}
	return nil
}

type OrganizationMember struct {
	ID             int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt      *time.Time              `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt      *time.Time              `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Role           OrganizationMember_Role `protobuf:"varint,100,opt,name=role,proto3,enum=pathwar.db.OrganizationMember_Role" json:"role,omitempty"`
	Slug           string                  `protobuf:"bytes,101,opt,name=slug,proto3" json:"slug,omitempty"`
	User           *User                   `protobuf:"bytes,200,opt,name=user,proto3" json:"user,omitempty" gorm:"foreignkey:UserID"`
	UserID         int64                   `protobuf:"varint,201,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" sql:"not null" gorm:"index"`
	Organization   *Organization           `protobuf:"bytes,202,opt,name=organization,proto3" json:"organization,omitempty" gorm:"foreignkey:OrganizationID"`
	OrganizationID int64                   `protobuf:"varint,203,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *OrganizationMember) Reset()         { *m = OrganizationMember{} }
func (m *OrganizationMember) String() string { return proto.CompactTextString(m) }
func (*OrganizationMember) ProtoMessage()    {}
func (*OrganizationMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{5}
}
func (m *OrganizationMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrganizationMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrganizationMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrganizationMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationMember.Merge(m, src)
}
func (m *OrganizationMember) XXX_Size() int {
	return m.Size()
}
func (m *OrganizationMember) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationMember.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationMember proto.InternalMessageInfo

func (m *OrganizationMember) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *OrganizationMember) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *OrganizationMember) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *OrganizationMember) GetRole() OrganizationMember_Role {
	if m != nil {
		return m.Role
	}
	return OrganizationMember_Undefined
}

func (m *OrganizationMember) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *OrganizationMember) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *OrganizationMember) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *OrganizationMember) GetOrganization() *Organization {
	if m != nil {
		return m.Organization
	}
	return nil
}

func (m *OrganizationMember) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

type TeamMember struct {
	ID                      int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt               *time.Time             `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt               *time.Time             `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Role                    TeamMember_Role        `protobuf:"varint,100,opt,name=role,proto3,enum=pathwar.db.TeamMember_Role" json:"role,omitempty"`
	Slug                    string                 `protobuf:"bytes,102,opt,name=slug,proto3" json:"slug,omitempty"`
	User                    *User                  `protobuf:"bytes,200,opt,name=user,proto3" json:"user,omitempty" gorm:"foreignkey:UserID"`
	UserID                  int64                  `protobuf:"varint,201,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" sql:"not null" gorm:"index"`
	Team                    *Team                  `protobuf:"bytes,202,opt,name=team,proto3" json:"team,omitempty" gorm:"foreignkey:TeamID"`
	TeamID                  int64                  `protobuf:"varint,203,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty" sql:"not null" gorm:"index"`
	Coupons                 []*Coupon              `protobuf:"bytes,204,rep,name=coupons,proto3" json:"coupons,omitempty" gorm:"PRELOAD:false"`
	Achievements            []*Achievement         `protobuf:"bytes,205,rep,name=achievements,proto3" json:"achievements,omitempty" gorm:"PRELOAD:false"`
	SentWhoswhoAttempts     []*WhoswhoAttempt      `protobuf:"bytes,206,rep,name=sent_whoswho_attempts,json=sentWhoswhoAttempts,proto3" json:"sent_whoswho_attempts,omitempty" gorm:"PRELOAD:false"`
	ReceivedWhoswhoAttempts []*WhoswhoAttempt      `protobuf:"bytes,207,rep,name=received_whoswho_attempts,json=receivedWhoswhoAttempts,proto3" json:"received_whoswho_attempts,omitempty" gorm:"PRELOAD:false"`
	Items                   []*InventoryItem       `protobuf:"bytes,208,rep,name=items,proto3" json:"items,omitempty" gorm:"PRELOAD:false"`
	ChallengeValidations    []*ChallengeValidation `protobuf:"bytes,209,rep,name=challenge_validations,json=challengeValidations,proto3" json:"challenge_validations,omitempty" gorm:"PRELOAD:false"`
}

func (m *TeamMember) Reset()         { *m = TeamMember{} }
func (m *TeamMember) String() string { return proto.CompactTextString(m) }
func (*TeamMember) ProtoMessage()    {}
func (*TeamMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{6}
}
func (m *TeamMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamMember.Merge(m, src)
}
func (m *TeamMember) XXX_Size() int {
	return m.Size()
}
func (m *TeamMember) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamMember.DiscardUnknown(m)
}

var xxx_messageInfo_TeamMember proto.InternalMessageInfo

func (m *TeamMember) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *TeamMember) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *TeamMember) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *TeamMember) GetRole() TeamMember_Role {
	if m != nil {
		return m.Role
	}
	return TeamMember_Undefined
}

func (m *TeamMember) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *TeamMember) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *TeamMember) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *TeamMember) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *TeamMember) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *TeamMember) GetCoupons() []*Coupon {
	if m != nil {
		return m.Coupons
	}
	return nil
}

func (m *TeamMember) GetAchievements() []*Achievement {
	if m != nil {
		return m.Achievements
	}
	return nil
}

func (m *TeamMember) GetSentWhoswhoAttempts() []*WhoswhoAttempt {
	if m != nil {
		return m.SentWhoswhoAttempts
	}
	return nil
}

func (m *TeamMember) GetReceivedWhoswhoAttempts() []*WhoswhoAttempt {
	if m != nil {
		return m.ReceivedWhoswhoAttempts
	}
	return nil
}

func (m *TeamMember) GetItems() []*InventoryItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *TeamMember) GetChallengeValidations() []*ChallengeValidation {
	if m != nil {
		return m.ChallengeValidations
	}
	return nil
}

type TeamInvite struct {
	ID        int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt *time.Time `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt *time.Time `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	DeletedAt *time.Time `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3,stdtime" json:"deleted_at,omitempty"`
	User      *User      `protobuf:"bytes,200,opt,name=user,proto3" json:"user,omitempty" gorm:"foreignkey:UserID"`
	UserID    int64      `protobuf:"varint,201,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" sql:"not null" gorm:"index"`
	Team      *Team      `protobuf:"bytes,202,opt,name=team,proto3" json:"team,omitempty" gorm:"foreignkey:TeamID"`
	TeamID    int64      `protobuf:"varint,203,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty" sql:"not null" gorm:"index"`
	Slug      string     `protobuf:"bytes,204,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (m *TeamInvite) Reset()         { *m = TeamInvite{} }
func (m *TeamInvite) String() string { return proto.CompactTextString(m) }
func (*TeamInvite) ProtoMessage()    {}
func (*TeamInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{7}
}
func (m *TeamInvite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamInvite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamInvite.Merge(m, src)
}
func (m *TeamInvite) XXX_Size() int {
	return m.Size()
}
func (m *TeamInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamInvite.DiscardUnknown(m)
}

var xxx_messageInfo_TeamInvite proto.InternalMessageInfo

func (m *TeamInvite) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *TeamInvite) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *TeamInvite) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *TeamInvite) GetDeletedAt() *time.Time {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func (m *TeamInvite) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *TeamInvite) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *TeamInvite) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *TeamInvite) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *TeamInvite) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

// User defines a User Account / Profile
type User struct {
	ID                      int64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt               *time.Time            `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt               *time.Time            `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	DeletedAt               *time.Time            `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3,stdtime" json:"deleted_at,omitempty"`
	Username                string                `protobuf:"bytes,100,opt,name=username,proto3" json:"username,omitempty"`
	Email                   string                `protobuf:"bytes,101,opt,name=email,proto3" json:"email,omitempty"`
	GravatarURL             string                `protobuf:"bytes,102,opt,name=gravatar_url,json=gravatarUrl,proto3" json:"gravatar_url,omitempty"`
	WebsiteURL              string                `protobuf:"bytes,103,opt,name=website_url,json=websiteUrl,proto3" json:"website_url,omitempty"`
	Locale                  string                `protobuf:"bytes,104,opt,name=locale,proto3" json:"locale,omitempty"`
	OAuthSubject            string                `protobuf:"bytes,105,opt,name=oauth_subject,json=oauthSubject,proto3" json:"oauth_subject,omitempty" gorm:"unique_index"`
	DeletionReason          string                `protobuf:"bytes,106,opt,name=deletion_reason,json=deletionReason,proto3" json:"deletion_reason,omitempty"`
	DeletionStatus          DeletionStatus        `protobuf:"varint,107,opt,name=deletion_status,json=deletionStatus,proto3,enum=pathwar.db.DeletionStatus" json:"deletion_status,omitempty"`
	Slug                    string                `protobuf:"bytes,108,opt,name=slug,proto3" json:"slug,omitempty"`
	TeamMemberships         []*TeamMember         `protobuf:"bytes,200,rep,name=team_memberships,json=teamMemberships,proto3" json:"team_memberships,omitempty" gorm:"PRELOAD:false"`
	Notifications           []*Notification       `protobuf:"bytes,201,rep,name=notifications,proto3" json:"notifications,omitempty" gorm:"PRELOAD:false"`
	OrganizationMemberships []*OrganizationMember `protobuf:"bytes,202,rep,name=organization_memberships,json=organizationMemberships,proto3" json:"organization_memberships,omitempty" gorm:"PRELOAD:false"`
	ActiveTeamMember        *TeamMember           `protobuf:"bytes,203,opt,name=active_team_member,json=activeTeamMember,proto3" json:"active_team_member,omitempty" gorm:"foreignkey:ActiveTeamMemberID;PRELOAD:false"`
	ActiveTeamMemberID      int64                 `protobuf:"varint,204,opt,name=active_team_member_id,json=activeTeamMemberId,proto3" json:"active_team_member_id,omitempty" sql:"not null" gorm:"index"`
	ActiveSeason            *Season               `protobuf:"bytes,205,opt,name=active_season,json=activeSeason,proto3" json:"active_season,omitempty" gorm:"foreignkey:ActiveSeasonID;PRELOAD:false"`
	ActiveSeasonID          int64                 `protobuf:"varint,206,opt,name=active_season_id,json=activeSeasonId,proto3" json:"active_season_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{8}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *User) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *User) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *User) GetDeletedAt() *time.Time {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetGravatarURL() string {
	if m != nil {
		return m.GravatarURL
	}
	return ""
}

func (m *User) GetWebsiteURL() string {
	if m != nil {
		return m.WebsiteURL
	}
	return ""
}

func (m *User) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *User) GetOAuthSubject() string {
	if m != nil {
		return m.OAuthSubject
	}
	return ""
}

func (m *User) GetDeletionReason() string {
	if m != nil {
		return m.DeletionReason
	}
	return ""
}

func (m *User) GetDeletionStatus() DeletionStatus {
	if m != nil {
		return m.DeletionStatus
	}
	return DeletionStatus_Unknown
}

func (m *User) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *User) GetTeamMemberships() []*TeamMember {
	if m != nil {
		return m.TeamMemberships
	}
	return nil
}

func (m *User) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func (m *User) GetOrganizationMemberships() []*OrganizationMember {
	if m != nil {
		return m.OrganizationMemberships
	}
	return nil
}

func (m *User) GetActiveTeamMember() *TeamMember {
	if m != nil {
		return m.ActiveTeamMember
	}
	return nil
}

func (m *User) GetActiveTeamMemberID() int64 {
	if m != nil {
		return m.ActiveTeamMemberID
	}
	return 0
}

func (m *User) GetActiveSeason() *Season {
	if m != nil {
		return m.ActiveSeason
	}
	return nil
}

func (m *User) GetActiveSeasonID() int64 {
	if m != nil {
		return m.ActiveSeasonID
	}
	return 0
}

type Organization struct {
	ID                      int64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt               *time.Time            `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt               *time.Time            `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	DeletedAt               *time.Time            `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3,stdtime" json:"deleted_at,omitempty"`
	Name                    string                `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	GravatarURL             string                `protobuf:"bytes,101,opt,name=gravatar_url,json=gravatarUrl,proto3" json:"gravatar_url,omitempty"`
	Locale                  string                `protobuf:"bytes,102,opt,name=locale,proto3" json:"locale,omitempty"`
	DeletionStatus          DeletionStatus        `protobuf:"varint,103,opt,name=deletion_status,json=deletionStatus,proto3,enum=pathwar.db.DeletionStatus" json:"deletion_status,omitempty"`
	GlobalSeason            bool                  `protobuf:"varint,104,opt,name=global_season,json=globalSeason,proto3" json:"global_season,omitempty"`
	Slug                    string                `protobuf:"bytes,105,opt,name=slug,proto3" json:"slug,omitempty"`
	Teams                   []*Team               `protobuf:"bytes,200,rep,name=teams,proto3" json:"teams,omitempty" gorm:"PRELOAD:false"`
	ReceivedWhoswhoAttempts []*WhoswhoAttempt     `protobuf:"bytes,201,rep,name=received_whoswho_attempts,json=receivedWhoswhoAttempts,proto3" json:"received_whoswho_attempts,omitempty" gorm:"PRELOAD:false"`
	Members                 []*OrganizationMember `protobuf:"bytes,202,rep,name=members,proto3" json:"members,omitempty" gorm:"PRELOAD:false"`
}

func (m *Organization) Reset()         { *m = Organization{} }
func (m *Organization) String() string { return proto.CompactTextString(m) }
func (*Organization) ProtoMessage()    {}
func (*Organization) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{9}
}
func (m *Organization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Organization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Organization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Organization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Organization.Merge(m, src)
}
func (m *Organization) XXX_Size() int {
	return m.Size()
}
func (m *Organization) XXX_DiscardUnknown() {
	xxx_messageInfo_Organization.DiscardUnknown(m)
}

var xxx_messageInfo_Organization proto.InternalMessageInfo

func (m *Organization) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Organization) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Organization) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Organization) GetDeletedAt() *time.Time {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func (m *Organization) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Organization) GetGravatarURL() string {
	if m != nil {
		return m.GravatarURL
	}
	return ""
}

func (m *Organization) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *Organization) GetDeletionStatus() DeletionStatus {
	if m != nil {
		return m.DeletionStatus
	}
	return DeletionStatus_Unknown
}

func (m *Organization) GetGlobalSeason() bool {
	if m != nil {
		return m.GlobalSeason
	}
	return false
}

func (m *Organization) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *Organization) GetTeams() []*Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *Organization) GetReceivedWhoswhoAttempts() []*WhoswhoAttempt {
	if m != nil {
		return m.ReceivedWhoswhoAttempts
	}
	return nil
}

func (m *Organization) GetMembers() []*OrganizationMember {
	if m != nil {
		return m.Members
	}
	return nil
}

type Season struct {
	ID           int64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt    *time.Time          `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt    *time.Time          `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Name         string              `protobuf:"bytes,100,opt,name=name,proto3" json:"name,omitempty"`
	Status       Season_Status       `protobuf:"varint,101,opt,name=status,proto3,enum=pathwar.db.Season_Status" json:"status,omitempty"`
	Visibility   Season_Visibility   `protobuf:"varint,102,opt,name=visibility,proto3,enum=pathwar.db.Season_Visibility" json:"visibility,omitempty"`
	Subscription Season_Subscription `protobuf:"varint,103,opt,name=subscription,proto3,enum=pathwar.db.Season_Subscription" json:"subscription,omitempty"`
	IsGlobal     bool                `protobuf:"varint,104,opt,name=is_global,json=isGlobal,proto3" json:"is_global,omitempty"`
	Slug         string              `protobuf:"bytes,105,opt,name=slug,proto3" json:"slug,omitempty"`
	IsTesting    bool                `protobuf:"varint,106,opt,name=is_testing,json=isTesting,proto3" json:"is_testing,omitempty"`
	Teams        []*Team             `protobuf:"bytes,200,rep,name=teams,proto3" json:"teams,omitempty" gorm:"PRELOAD:false"`
	Coupons      []*Coupon           `protobuf:"bytes,201,rep,name=coupons,proto3" json:"coupons,omitempty" gorm:"PRELOAD:false"`
}

func (m *Season) Reset()         { *m = Season{} }
func (m *Season) String() string { return proto.CompactTextString(m) }
func (*Season) ProtoMessage()    {}
func (*Season) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{10}
}
func (m *Season) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Season) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Season.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Season) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Season.Merge(m, src)
}
func (m *Season) XXX_Size() int {
	return m.Size()
}
func (m *Season) XXX_DiscardUnknown() {
	xxx_messageInfo_Season.DiscardUnknown(m)
}

var xxx_messageInfo_Season proto.InternalMessageInfo

func (m *Season) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Season) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Season) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Season) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Season) GetStatus() Season_Status {
	if m != nil {
		return m.Status
	}
	return Season_UnknownStatus
}

func (m *Season) GetVisibility() Season_Visibility {
	if m != nil {
		return m.Visibility
	}
	return Season_UnknownVisibility
}

func (m *Season) GetSubscription() Season_Subscription {
	if m != nil {
		return m.Subscription
	}
	return Season_UnknownSubscription
}

func (m *Season) GetIsGlobal() bool {
	if m != nil {
		return m.IsGlobal
	}
	return false
}

func (m *Season) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *Season) GetIsTesting() bool {
	if m != nil {
		return m.IsTesting
	}
	return false
}

func (m *Season) GetTeams() []*Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *Season) GetCoupons() []*Coupon {
	if m != nil {
		return m.Coupons
	}
	return nil
}

type Team struct {
	ID                     int64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt              *time.Time               `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt              *time.Time               `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	DeletedAt              *time.Time               `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3,stdtime" json:"deleted_at,omitempty"`
	IsGlobal               bool                     `protobuf:"varint,100,opt,name=is_global,json=isGlobal,proto3" json:"is_global,omitempty"`
	DeletionStatus         DeletionStatus           `protobuf:"varint,101,opt,name=deletion_status,json=deletionStatus,proto3,enum=pathwar.db.DeletionStatus" json:"deletion_status,omitempty"`
	Cash                   int64                    `protobuf:"varint,102,opt,name=cash,proto3" json:"cash,omitempty"`
	Score                  int64                    `protobuf:"varint,103,opt,name=score,proto3" json:"score,omitempty"`
	GoldMedals             int64                    `protobuf:"varint,104,opt,name=gold_medals,json=goldMedals,proto3" json:"gold_medals,omitempty"`
	SilverMedals           int64                    `protobuf:"varint,105,opt,name=silver_medals,json=silverMedals,proto3" json:"silver_medals,omitempty"`
	BronzeMedals           int64                    `protobuf:"varint,106,opt,name=bronze_medals,json=bronzeMedals,proto3" json:"bronze_medals,omitempty"`
	NbAchievements         int64                    `protobuf:"varint,107,opt,name=nb_achievements,json=nbAchievements,proto3" json:"nb_achievements,omitempty"`
	Slug                   string                   `protobuf:"bytes,108,opt,name=slug,proto3" json:"slug,omitempty"`
	Season                 *Season                  `protobuf:"bytes,200,opt,name=season,proto3" json:"season,omitempty" gorm:"foreignkey:SeasonID"`
	SeasonID               int64                    `protobuf:"varint,201,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty" sql:"not null" gorm:"index;unique_index:idx_team_season_organization"`
	Organization           *Organization            `protobuf:"bytes,202,opt,name=organization,proto3" json:"organization,omitempty" gorm:"foreignkey:OrganizationID"`
	OrganizationID         int64                    `protobuf:"varint,203,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty" sql:"not null" gorm:"index;unique_index:idx_team_season_organization"`
	ChallengeSubscriptions []*ChallengeSubscription `protobuf:"bytes,205,rep,name=challenge_subscriptions,json=challengeSubscriptions,proto3" json:"challenge_subscriptions,omitempty" gorm:"PRELOAD:false"`
	Members                []*TeamMember            `protobuf:"bytes,206,rep,name=members,proto3" json:"members,omitempty" gorm:"PRELOAD:false"`
	Achievements           []*Achievement           `protobuf:"bytes,207,rep,name=achievements,proto3" json:"achievements,omitempty" gorm:"PRELOAD:false"`
}

func (m *Team) Reset()         { *m = Team{} }
func (m *Team) String() string { return proto.CompactTextString(m) }
func (*Team) ProtoMessage()    {}
func (*Team) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{11}
}
func (m *Team) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Team) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Team.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Team) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Team.Merge(m, src)
}
func (m *Team) XXX_Size() int {
	return m.Size()
}
func (m *Team) XXX_DiscardUnknown() {
	xxx_messageInfo_Team.DiscardUnknown(m)
}

var xxx_messageInfo_Team proto.InternalMessageInfo

func (m *Team) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Team) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Team) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Team) GetDeletedAt() *time.Time {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func (m *Team) GetIsGlobal() bool {
	if m != nil {
		return m.IsGlobal
	}
	return false
}

func (m *Team) GetDeletionStatus() DeletionStatus {
	if m != nil {
		return m.DeletionStatus
	}
	return DeletionStatus_Unknown
}

func (m *Team) GetCash() int64 {
	if m != nil {
		return m.Cash
	}
	return 0
}

func (m *Team) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Team) GetGoldMedals() int64 {
	if m != nil {
		return m.GoldMedals
	}
	return 0
}

func (m *Team) GetSilverMedals() int64 {
	if m != nil {
		return m.SilverMedals
	}
	return 0
}

func (m *Team) GetBronzeMedals() int64 {
	if m != nil {
		return m.BronzeMedals
	}
	return 0
}

func (m *Team) GetNbAchievements() int64 {
	if m != nil {
		return m.NbAchievements
	}
	return 0
}

func (m *Team) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *Team) GetSeason() *Season {
	if m != nil {
		return m.Season
	}
	return nil
}

func (m *Team) GetSeasonID() int64 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

func (m *Team) GetOrganization() *Organization {
	if m != nil {
		return m.Organization
	}
	return nil
}

func (m *Team) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

func (m *Team) GetChallengeSubscriptions() []*ChallengeSubscription {
	if m != nil {
		return m.ChallengeSubscriptions
	}
	return nil
}

func (m *Team) GetMembers() []*TeamMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Team) GetAchievements() []*Achievement {
	if m != nil {
		return m.Achievements
	}
	return nil
}

type WhoswhoAttempt struct {
	ID           int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt    *time.Time `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt    *time.Time `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Success      bool       `protobuf:"varint,100,opt,name=success,proto3" json:"success,omitempty"`
	Slug         string     `protobuf:"bytes,101,opt,name=slug,proto3" json:"slug,omitempty"`
	Author       *User      `protobuf:"bytes,200,opt,name=author,proto3" json:"author,omitempty" sql:"not null" gorm:"foreignkey:AuthorID"`
	AuthorID     int64      `protobuf:"varint,201,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty" sql:"not null" gorm:"index"`
	AuthorTeam   *Team      `protobuf:"bytes,202,opt,name=author_team,json=authorTeam,proto3" json:"author_team,omitempty" sql:"not null" gorm:"foreignkey:AuthorTeamID"`
	AuthorTeamID int64      `protobuf:"varint,203,opt,name=author_team_id,json=authorTeamId,proto3" json:"author_team_id,omitempty" sql:"not null" gorm:"index"`
	TargetUser   *User      `protobuf:"bytes,204,opt,name=target_user,json=targetUser,proto3" json:"target_user,omitempty" sql:"not null" gorm:"foreignkey:TargetUserID"`
	TargetUserID int64      `protobuf:"varint,205,opt,name=target_user_id,json=targetUserId,proto3" json:"target_user_id,omitempty" sql:"not null" gorm:"index"`
	TargetTeam   *Team      `protobuf:"bytes,206,opt,name=target_team,json=targetTeam,proto3" json:"target_team,omitempty" sql:"not null" gorm:"foreignkey:TargetTeamID"`
	TargetTeamID int64      `protobuf:"varint,207,opt,name=target_team_id,json=targetTeamId,proto3" json:"target_team_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *WhoswhoAttempt) Reset()         { *m = WhoswhoAttempt{} }
func (m *WhoswhoAttempt) String() string { return proto.CompactTextString(m) }
func (*WhoswhoAttempt) ProtoMessage()    {}
func (*WhoswhoAttempt) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{12}
}
func (m *WhoswhoAttempt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhoswhoAttempt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhoswhoAttempt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhoswhoAttempt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhoswhoAttempt.Merge(m, src)
}
func (m *WhoswhoAttempt) XXX_Size() int {
	return m.Size()
}
func (m *WhoswhoAttempt) XXX_DiscardUnknown() {
	xxx_messageInfo_WhoswhoAttempt.DiscardUnknown(m)
}

var xxx_messageInfo_WhoswhoAttempt proto.InternalMessageInfo

func (m *WhoswhoAttempt) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *WhoswhoAttempt) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *WhoswhoAttempt) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *WhoswhoAttempt) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *WhoswhoAttempt) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *WhoswhoAttempt) GetAuthor() *User {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *WhoswhoAttempt) GetAuthorID() int64 {
	if m != nil {
		return m.AuthorID
	}
	return 0
}

func (m *WhoswhoAttempt) GetAuthorTeam() *Team {
	if m != nil {
		return m.AuthorTeam
	}
	return nil
}

func (m *WhoswhoAttempt) GetAuthorTeamID() int64 {
	if m != nil {
		return m.AuthorTeamID
	}
	return 0
}

func (m *WhoswhoAttempt) GetTargetUser() *User {
	if m != nil {
		return m.TargetUser
	}
	return nil
}

func (m *WhoswhoAttempt) GetTargetUserID() int64 {
	if m != nil {
		return m.TargetUserID
	}
	return 0
}

func (m *WhoswhoAttempt) GetTargetTeam() *Team {
	if m != nil {
		return m.TargetTeam
	}
	return nil
}

func (m *WhoswhoAttempt) GetTargetTeamID() int64 {
	if m != nil {
		return m.TargetTeamID
	}
	return 0
}

type ChallengeValidation struct {
	ID                      int64                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt               *time.Time                 `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt               *time.Time                 `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Status                  ChallengeValidation_Status `protobuf:"varint,100,opt,name=status,proto3,enum=pathwar.db.ChallengeValidation_Status" json:"status,omitempty"`
	AuthorComment           string                     `protobuf:"bytes,101,opt,name=author_comment,json=authorComment,proto3" json:"author_comment,omitempty"`
	CorrectorComment        string                     `protobuf:"bytes,102,opt,name=corrector_comment,json=correctorComment,proto3" json:"corrector_comment,omitempty"`
	Passphrases             string                     `protobuf:"bytes,105,opt,name=passphrases,proto3" json:"passphrases,omitempty"`
	Slug                    string                     `protobuf:"bytes,106,opt,name=slug,proto3" json:"slug,omitempty"`
	ChallengeSubscription   *ChallengeSubscription     `protobuf:"bytes,200,opt,name=challenge_subscription,json=challengeSubscription,proto3" json:"challenge_subscription,omitempty" gorm:"foreignkey:ChallengeSubscriptionID"`
	ChallengeSubscriptionID int64                      `protobuf:"varint,201,opt,name=challenge_subscription_id,json=challengeSubscriptionId,proto3" json:"challenge_subscription_id,omitempty" sql:"not null" gorm:"index"`
	Author                  *User                      `protobuf:"bytes,202,opt,name=author,proto3" json:"author,omitempty" gorm:"foreignkey:AuthorID"`
	AuthorID                int64                      `protobuf:"varint,203,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty" sql:"not null" gorm:"index"`
	Team                    *Team                      `protobuf:"bytes,204,opt,name=team,proto3" json:"team,omitempty" gorm:"foreignkey:TeamID"`
	TeamID                  int64                      `protobuf:"varint,205,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *ChallengeValidation) Reset()         { *m = ChallengeValidation{} }
func (m *ChallengeValidation) String() string { return proto.CompactTextString(m) }
func (*ChallengeValidation) ProtoMessage()    {}
func (*ChallengeValidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{13}
}
func (m *ChallengeValidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeValidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeValidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeValidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeValidation.Merge(m, src)
}
func (m *ChallengeValidation) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeValidation) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeValidation.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeValidation proto.InternalMessageInfo

func (m *ChallengeValidation) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ChallengeValidation) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ChallengeValidation) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *ChallengeValidation) GetStatus() ChallengeValidation_Status {
	if m != nil {
		return m.Status
	}
	return ChallengeValidation_Unknown
}

func (m *ChallengeValidation) GetAuthorComment() string {
	if m != nil {
		return m.AuthorComment
	}
	return ""
}

func (m *ChallengeValidation) GetCorrectorComment() string {
	if m != nil {
		return m.CorrectorComment
	}
	return ""
}

func (m *ChallengeValidation) GetPassphrases() string {
	if m != nil {
		return m.Passphrases
	}
	return ""
}

func (m *ChallengeValidation) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *ChallengeValidation) GetChallengeSubscription() *ChallengeSubscription {
	if m != nil {
		return m.ChallengeSubscription
	}
	return nil
}

func (m *ChallengeValidation) GetChallengeSubscriptionID() int64 {
	if m != nil {
		return m.ChallengeSubscriptionID
	}
	return 0
}

func (m *ChallengeValidation) GetAuthor() *User {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *ChallengeValidation) GetAuthorID() int64 {
	if m != nil {
		return m.AuthorID
	}
	return 0
}

func (m *ChallengeValidation) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *ChallengeValidation) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

type ChallengeSubscription struct {
	ID                int64                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt         *time.Time                   `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt         *time.Time                   `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Status            ChallengeSubscription_Status `protobuf:"varint,100,opt,name=status,proto3,enum=pathwar.db.ChallengeSubscription_Status" json:"status,omitempty"`
	ClosedAt          *time.Time                   `protobuf:"bytes,101,opt,name=closed_at,json=closedAt,proto3,stdtime" json:"closed_at,omitempty"`
	Slug              string                       `protobuf:"bytes,102,opt,name=slug,proto3" json:"slug,omitempty"`
	Team              *Team                        `protobuf:"bytes,200,opt,name=team,proto3" json:"team,omitempty" gorm:"foreignkey:TeamID"`
	TeamID            int64                        `protobuf:"varint,201,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty" sql:"not null" gorm:"unique_index:idx_team_season_challenge"`
	SeasonChallenge   *SeasonChallenge             `protobuf:"bytes,202,opt,name=season_challenge,json=seasonChallenge,proto3" json:"season_challenge,omitempty" gorm:"foreignkey:SeasonChallengeID"`
	SeasonChallengeID int64                        `protobuf:"varint,203,opt,name=season_challenge_id,json=seasonChallengeId,proto3" json:"season_challenge_id,omitempty" sql:"not null" gorm:"unique_index:idx_team_season_challenge"`
	Buyer             *User                        `protobuf:"bytes,204,opt,name=buyer,proto3" json:"buyer,omitempty" gorm:"foreignkey:BuyerID"`
	BuyerID           int64                        `protobuf:"varint,205,opt,name=buyer_id,json=buyerId,proto3" json:"buyer_id,omitempty" sql:"not null" gorm:"index"`
	Closer            *User                        `protobuf:"bytes,206,opt,name=closer,proto3" json:"closer,omitempty" gorm:"foreignkey:CloserID"`
	CloserID          int64                        `protobuf:"varint,207,opt,name=closer_id,json=closerId,proto3" json:"closer_id,omitempty" sql:"null" gorm:"index"`
	Validations       []*ChallengeValidation       `protobuf:"bytes,208,rep,name=validations,proto3" json:"validations,omitempty" gorm:"PRELOAD:false"`
}

func (m *ChallengeSubscription) Reset()         { *m = ChallengeSubscription{} }
func (m *ChallengeSubscription) String() string { return proto.CompactTextString(m) }
func (*ChallengeSubscription) ProtoMessage()    {}
func (*ChallengeSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{14}
}
func (m *ChallengeSubscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeSubscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeSubscription.Merge(m, src)
}
func (m *ChallengeSubscription) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeSubscription proto.InternalMessageInfo

func (m *ChallengeSubscription) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ChallengeSubscription) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ChallengeSubscription) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *ChallengeSubscription) GetStatus() ChallengeSubscription_Status {
	if m != nil {
		return m.Status
	}
	return ChallengeSubscription_Unknown
}

func (m *ChallengeSubscription) GetClosedAt() *time.Time {
	if m != nil {
		return m.ClosedAt
	}
	return nil
}

func (m *ChallengeSubscription) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *ChallengeSubscription) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *ChallengeSubscription) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *ChallengeSubscription) GetSeasonChallenge() *SeasonChallenge {
	if m != nil {
		return m.SeasonChallenge
	}
	return nil
}

func (m *ChallengeSubscription) GetSeasonChallengeID() int64 {
	if m != nil {
		return m.SeasonChallengeID
	}
	return 0
}

func (m *ChallengeSubscription) GetBuyer() *User {
	if m != nil {
		return m.Buyer
	}
	return nil
}

func (m *ChallengeSubscription) GetBuyerID() int64 {
	if m != nil {
		return m.BuyerID
	}
	return 0
}

func (m *ChallengeSubscription) GetCloser() *User {
	if m != nil {
		return m.Closer
	}
	return nil
}

func (m *ChallengeSubscription) GetCloserID() int64 {
	if m != nil {
		return m.CloserID
	}
	return 0
}

func (m *ChallengeSubscription) GetValidations() []*ChallengeValidation {
	if m != nil {
		return m.Validations
	}
	return nil
}

type InventoryItem struct {
	ID        int64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt *time.Time         `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt *time.Time         `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Item      InventoryItem_Item `protobuf:"varint,100,opt,name=item,proto3,enum=pathwar.db.InventoryItem_Item" json:"item,omitempty"`
	Slug      string             `protobuf:"bytes,101,opt,name=slug,proto3" json:"slug,omitempty"`
	Owner     *TeamMember        `protobuf:"bytes,200,opt,name=owner,proto3" json:"owner,omitempty" gorm:"foreignkey:OwnerID"`
	OwnerID   int64              `protobuf:"varint,201,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *InventoryItem) Reset()         { *m = InventoryItem{} }
func (m *InventoryItem) String() string { return proto.CompactTextString(m) }
func (*InventoryItem) ProtoMessage()    {}
func (*InventoryItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{15}
}
func (m *InventoryItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InventoryItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InventoryItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InventoryItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InventoryItem.Merge(m, src)
}
func (m *InventoryItem) XXX_Size() int {
	return m.Size()
}
func (m *InventoryItem) XXX_DiscardUnknown() {
	xxx_messageInfo_InventoryItem.DiscardUnknown(m)
}

var xxx_messageInfo_InventoryItem proto.InternalMessageInfo

func (m *InventoryItem) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *InventoryItem) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *InventoryItem) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *InventoryItem) GetItem() InventoryItem_Item {
	if m != nil {
		return m.Item
	}
	return InventoryItem_Unknown
}

func (m *InventoryItem) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *InventoryItem) GetOwner() *TeamMember {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *InventoryItem) GetOwnerID() int64 {
	if m != nil {
		return m.OwnerID
	}
	return 0
}

type Notification struct {
	ID        int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt *time.Time `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt *time.Time `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	ReadAt    *time.Time `protobuf:"bytes,100,opt,name=read_at,json=readAt,proto3,stdtime" json:"read_at,omitempty"`
	ClickURL  string     `protobuf:"bytes,101,opt,name=click_url,json=clickUrl,proto3" json:"click_url,omitempty"`
	Msg       string     `protobuf:"bytes,102,opt,name=msg,proto3" json:"msg,omitempty"`
	Args      string     `protobuf:"bytes,103,opt,name=args,proto3" json:"args,omitempty"`
	User      *User      `protobuf:"bytes,200,opt,name=user,proto3" json:"user,omitempty" gorm:"foreignkey:UserID"`
	UserID    int64      `protobuf:"varint,201,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *Notification) Reset()         { *m = Notification{} }
func (m *Notification) String() string { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()    {}
func (*Notification) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{16}
}
func (m *Notification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Notification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Notification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Notification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notification.Merge(m, src)
}
func (m *Notification) XXX_Size() int {
	return m.Size()
}
func (m *Notification) XXX_DiscardUnknown() {
	xxx_messageInfo_Notification.DiscardUnknown(m)
}

var xxx_messageInfo_Notification proto.InternalMessageInfo

func (m *Notification) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Notification) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Notification) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Notification) GetReadAt() *time.Time {
	if m != nil {
		return m.ReadAt
	}
	return nil
}

func (m *Notification) GetClickURL() string {
	if m != nil {
		return m.ClickURL
	}
	return ""
}

func (m *Notification) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Notification) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

func (m *Notification) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Notification) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

type Coupon struct {
	ID                 int64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt          *time.Time          `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt          *time.Time          `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Hash               string              `protobuf:"bytes,100,opt,name=hash,proto3" json:"hash,omitempty" gorm:"unique_index"`
	Value              int64               `protobuf:"varint,101,opt,name=value,proto3" json:"value,omitempty"`
	MaxValidationCount int64               `protobuf:"varint,102,opt,name=max_validation_count,json=maxValidationCount,proto3" json:"max_validation_count,omitempty"`
	Season             *Season             `protobuf:"bytes,200,opt,name=season,proto3" json:"season,omitempty" gorm:"foreignkey:SeasonID"`
	SeasonID           int64               `protobuf:"varint,201,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty" gorm:"index"`
	Validations        []*CouponValidation `protobuf:"bytes,202,rep,name=validations,proto3" json:"validations,omitempty" gorm:"PRELOAD:false"`
}

func (m *Coupon) Reset()         { *m = Coupon{} }
func (m *Coupon) String() string { return proto.CompactTextString(m) }
func (*Coupon) ProtoMessage()    {}
func (*Coupon) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{17}
}
func (m *Coupon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Coupon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Coupon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Coupon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coupon.Merge(m, src)
}
func (m *Coupon) XXX_Size() int {
	return m.Size()
}
func (m *Coupon) XXX_DiscardUnknown() {
	xxx_messageInfo_Coupon.DiscardUnknown(m)
}

var xxx_messageInfo_Coupon proto.InternalMessageInfo

func (m *Coupon) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Coupon) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Coupon) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Coupon) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Coupon) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Coupon) GetMaxValidationCount() int64 {
	if m != nil {
		return m.MaxValidationCount
	}
	return 0
}

func (m *Coupon) GetSeason() *Season {
	if m != nil {
		return m.Season
	}
	return nil
}

func (m *Coupon) GetSeasonID() int64 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

func (m *Coupon) GetValidations() []*CouponValidation {
	if m != nil {
		return m.Validations
	}
	return nil
}

type CouponValidation struct {
	ID        int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt *time.Time `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt *time.Time `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Comment   string     `protobuf:"bytes,100,opt,name=comment,proto3" json:"comment,omitempty"`
	Author    *User      `protobuf:"bytes,200,opt,name=author,proto3" json:"author,omitempty" gorm:"foreignkey:AuthorID"`
	AuthorID  int64      `protobuf:"varint,201,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty" sql:"not null" gorm:"index"`
	Team      *Team      `protobuf:"bytes,202,opt,name=team,proto3" json:"team,omitempty" gorm:"foreignkey:TeamID"`
	TeamID    int64      `protobuf:"varint,203,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty" sql:"not null" gorm:"index"`
	Coupon    *Coupon    `protobuf:"bytes,204,opt,name=coupon,proto3" json:"coupon,omitempty" gorm:"foreignkey:CouponID"`
	CouponID  int64      `protobuf:"varint,205,opt,name=coupon_id,json=couponId,proto3" json:"coupon_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *CouponValidation) Reset()         { *m = CouponValidation{} }
func (m *CouponValidation) String() string { return proto.CompactTextString(m) }
func (*CouponValidation) ProtoMessage()    {}
func (*CouponValidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{18}
}
func (m *CouponValidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CouponValidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CouponValidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CouponValidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CouponValidation.Merge(m, src)
}
func (m *CouponValidation) XXX_Size() int {
	return m.Size()
}
func (m *CouponValidation) XXX_DiscardUnknown() {
	xxx_messageInfo_CouponValidation.DiscardUnknown(m)
}

var xxx_messageInfo_CouponValidation proto.InternalMessageInfo

func (m *CouponValidation) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CouponValidation) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *CouponValidation) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *CouponValidation) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *CouponValidation) GetAuthor() *User {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *CouponValidation) GetAuthorID() int64 {
	if m != nil {
		return m.AuthorID
	}
	return 0
}

func (m *CouponValidation) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *CouponValidation) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *CouponValidation) GetCoupon() *Coupon {
	if m != nil {
		return m.Coupon
	}
	return nil
}

func (m *CouponValidation) GetCouponID() int64 {
	if m != nil {
		return m.CouponID
	}
	return 0
}

type Achievement struct {
	ID                    int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt             *time.Time           `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt             *time.Time           `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Type                  Achievement_Type     `protobuf:"varint,100,opt,name=type,proto3,enum=pathwar.db.Achievement_Type" json:"type,omitempty"`
	IsGlobal              bool                 `protobuf:"varint,101,opt,name=is_global,json=isGlobal,proto3" json:"is_global,omitempty"`
	Comment               string               `protobuf:"bytes,102,opt,name=comment,proto3" json:"comment,omitempty"`
	Argument              string               `protobuf:"bytes,103,opt,name=argument,proto3" json:"argument,omitempty"`
	Slug                  string               `protobuf:"bytes,104,opt,name=slug,proto3" json:"slug,omitempty"`
	Author                *User                `protobuf:"bytes,200,opt,name=author,proto3" json:"author,omitempty" gorm:"foreignkey:AuthorID"`
	AuthorID              int64                `protobuf:"varint,201,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty" sql:"not null" gorm:"index"`
	Team                  *Team                `protobuf:"bytes,202,opt,name=team,proto3" json:"team,omitempty" gorm:"foreignkey:TeamID"`
	TeamID                int64                `protobuf:"varint,203,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty" sql:"not null" gorm:"index"`
	ChallengeValidation   *ChallengeValidation `protobuf:"bytes,204,opt,name=challenge_validation,json=challengeValidation,proto3" json:"challenge_validation,omitempty" gorm:"foreignkey:ChallengeValidationID"`
	ChallengeValidationID int64                `protobuf:"varint,205,opt,name=challenge_validation_id,json=challengeValidationId,proto3" json:"challenge_validation_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *Achievement) Reset()         { *m = Achievement{} }
func (m *Achievement) String() string { return proto.CompactTextString(m) }
func (*Achievement) ProtoMessage()    {}
func (*Achievement) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{19}
}
func (m *Achievement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Achievement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Achievement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Achievement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Achievement.Merge(m, src)
}
func (m *Achievement) XXX_Size() int {
	return m.Size()
}
func (m *Achievement) XXX_DiscardUnknown() {
	xxx_messageInfo_Achievement.DiscardUnknown(m)
}

var xxx_messageInfo_Achievement proto.InternalMessageInfo

func (m *Achievement) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Achievement) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Achievement) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Achievement) GetType() Achievement_Type {
	if m != nil {
		return m.Type
	}
	return Achievement_Undefined
}

func (m *Achievement) GetIsGlobal() bool {
	if m != nil {
		return m.IsGlobal
	}
	return false
}

func (m *Achievement) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Achievement) GetArgument() string {
	if m != nil {
		return m.Argument
	}
	return ""
}

func (m *Achievement) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *Achievement) GetAuthor() *User {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *Achievement) GetAuthorID() int64 {
	if m != nil {
		return m.AuthorID
	}
	return 0
}

func (m *Achievement) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *Achievement) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *Achievement) GetChallengeValidation() *ChallengeValidation {
	if m != nil {
		return m.ChallengeValidation
	}
	return nil
}

func (m *Achievement) GetChallengeValidationID() int64 {
	if m != nil {
		return m.ChallengeValidationID
	}
	return 0
}

type Activity struct {
	ID                      int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt               *time.Time             `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt               *time.Time             `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Kind                    Activity_Kind          `protobuf:"varint,100,opt,name=kind,proto3,enum=pathwar.db.Activity_Kind" json:"kind,omitempty"`
	Author                  *User                  `protobuf:"bytes,200,opt,name=author,proto3" json:"author,omitempty" gorm:"foreignkey:AuthorID"`
	AuthorID                int64                  `protobuf:"varint,201,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty" sql:"not null" gorm:"index"`
	Team                    *Team                  `protobuf:"bytes,202,opt,name=team,proto3" json:"team,omitempty" gorm:"foreignkey:TeamID"`
	TeamID                  int64                  `protobuf:"varint,203,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty" sql:"not null" gorm:"index"`
	User                    *User                  `protobuf:"bytes,204,opt,name=user,proto3" json:"user,omitempty" gorm:"foreignkey:UserID"`
	UserID                  int64                  `protobuf:"varint,205,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" sql:"not null" gorm:"index"`
	Organization            *Organization          `protobuf:"bytes,206,opt,name=organization,proto3" json:"organization,omitempty" gorm:"foreignkey:OrganizationID"`
	OrganizationID          int64                  `protobuf:"varint,207,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty" sql:"not null" gorm:"index"`
	Season                  *Season                `protobuf:"bytes,208,opt,name=season,proto3" json:"season,omitempty" gorm:"foreignkey:SeasonID"`
	SeasonID                int64                  `protobuf:"varint,209,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty" sql:"not null" gorm:"index"`
	Challenge               *Challenge             `protobuf:"bytes,210,opt,name=challenge,proto3" json:"challenge,omitempty" gorm:"foreignkey:ChallengeID"`
	ChallengeID             int64                  `protobuf:"varint,211,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty" sql:"not null" gorm:"index"`
	ChallengeFlavor         *ChallengeFlavor       `protobuf:"bytes,212,opt,name=challenge_flavor,json=challengeFlavor,proto3" json:"challenge_flavor,omitempty" gorm:"foreignkey:ChallengeFlavorID"`
	ChallengeFlavorID       int64                  `protobuf:"varint,213,opt,name=challenge_flavor_id,json=challengeFlavorId,proto3" json:"challenge_flavor_id,omitempty" sql:"not null" gorm:"index"`
	Coupon                  *Coupon                `protobuf:"bytes,214,opt,name=coupon,proto3" json:"coupon,omitempty" gorm:"foreignkey:CouponID"`
	CouponID                int64                  `protobuf:"varint,215,opt,name=coupon_id,json=couponId,proto3" json:"coupon_id,omitempty" sql:"not null" gorm:"index"`
	SeasonChallenge         *SeasonChallenge       `protobuf:"bytes,216,opt,name=season_challenge,json=seasonChallenge,proto3" json:"season_challenge,omitempty" gorm:"foreignkey:SeasonChallengeID"`
	SeasonChallengeID       int64                  `protobuf:"varint,217,opt,name=season_challenge_id,json=seasonChallengeId,proto3" json:"season_challenge_id,omitempty" sql:"not null" gorm:"index"`
	TeamMember              *TeamMember            `protobuf:"bytes,218,opt,name=team_member,json=teamMember,proto3" json:"team_member,omitempty" gorm:"foreignkey:TeamMemberID"`
	TeamMemberID            int64                  `protobuf:"varint,219,opt,name=team_member_id,json=teamMemberId,proto3" json:"team_member_id,omitempty" sql:"not null" gorm:"index"`
	ChallengeSubscription   *ChallengeSubscription `protobuf:"bytes,220,opt,name=challenge_subscription,json=challengeSubscription,proto3" json:"challenge_subscription,omitempty" gorm:"foreignkey:ChallengeSubscriptionID"`
	ChallengeSubscriptionID int64                  `protobuf:"varint,221,opt,name=challenge_subscription_id,json=challengeSubscriptionId,proto3" json:"challenge_subscription_id,omitempty" sql:"not null" gorm:"index"`
	ChallengeInstance       *ChallengeInstance     `protobuf:"bytes,222,opt,name=challenge_instance,json=challengeInstance,proto3" json:"challenge_instance,omitempty" gorm:"foreignkey:ChallengeInstanceID"`
	ChallengeInstanceID     int64                  `protobuf:"varint,223,opt,name=challenge_instance_id,json=challengeInstanceId,proto3" json:"challenge_instance_id,omitempty" sql:"not null" gorm:"index"`
	Agent                   *Agent                 `protobuf:"bytes,224,opt,name=agent,proto3" json:"agent,omitempty" gorm:"foreignkey:AgentID"`
	AgentID                 int64                  `protobuf:"varint,225,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty" sql:"not null" gorm:"index"`
	TeamInvite              *Agent                 `protobuf:"bytes,226,opt,name=team_invite,json=teamInvite,proto3" json:"team_invite,omitempty" gorm:"foreignkey:TeamInviteID"`
	TeamInviteID            int64                  `protobuf:"varint,227,opt,name=team_invite_id,json=teamInviteId,proto3" json:"team_invite_id,omitempty" sql:"not null" gorm:"index"`
}

func (m *Activity) Reset()         { *m = Activity{} }
func (m *Activity) String() string { return proto.CompactTextString(m) }
func (*Activity) ProtoMessage()    {}
func (*Activity) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{20}
}
func (m *Activity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Activity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Activity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Activity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Activity.Merge(m, src)
}
func (m *Activity) XXX_Size() int {
	return m.Size()
}
func (m *Activity) XXX_DiscardUnknown() {
	xxx_messageInfo_Activity.DiscardUnknown(m)
}

var xxx_messageInfo_Activity proto.InternalMessageInfo

func (m *Activity) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Activity) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Activity) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Activity) GetKind() Activity_Kind {
	if m != nil {
		return m.Kind
	}
	return Activity_Unknown
}

func (m *Activity) GetAuthor() *User {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *Activity) GetAuthorID() int64 {
	if m != nil {
		return m.AuthorID
	}
	return 0
}

func (m *Activity) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *Activity) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *Activity) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Activity) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *Activity) GetOrganization() *Organization {
	if m != nil {
		return m.Organization
	}
	return nil
}

func (m *Activity) GetOrganizationID() int64 {
	if m != nil {
		return m.OrganizationID
	}
	return 0
}

func (m *Activity) GetSeason() *Season {
	if m != nil {
		return m.Season
	}
	return nil
}

func (m *Activity) GetSeasonID() int64 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

func (m *Activity) GetChallenge() *Challenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (m *Activity) GetChallengeID() int64 {
	if m != nil {
		return m.ChallengeID
	}
	return 0
}

func (m *Activity) GetChallengeFlavor() *ChallengeFlavor {
	if m != nil {
		return m.ChallengeFlavor
	}
	return nil
}

func (m *Activity) GetChallengeFlavorID() int64 {
	if m != nil {
		return m.ChallengeFlavorID
	}
	return 0
}

func (m *Activity) GetCoupon() *Coupon {
	if m != nil {
		return m.Coupon
	}
	return nil
}

func (m *Activity) GetCouponID() int64 {
	if m != nil {
		return m.CouponID
	}
	return 0
}

func (m *Activity) GetSeasonChallenge() *SeasonChallenge {
	if m != nil {
		return m.SeasonChallenge
	}
	return nil
}

func (m *Activity) GetSeasonChallengeID() int64 {
	if m != nil {
		return m.SeasonChallengeID
	}
	return 0
}

func (m *Activity) GetTeamMember() *TeamMember {
	if m != nil {
		return m.TeamMember
	}
	return nil
}

func (m *Activity) GetTeamMemberID() int64 {
	if m != nil {
		return m.TeamMemberID
	}
	return 0
}

func (m *Activity) GetChallengeSubscription() *ChallengeSubscription {
	if m != nil {
		return m.ChallengeSubscription
	}
	return nil
}

func (m *Activity) GetChallengeSubscriptionID() int64 {
	if m != nil {
		return m.ChallengeSubscriptionID
	}
	return 0
}

func (m *Activity) GetChallengeInstance() *ChallengeInstance {
	if m != nil {
		return m.ChallengeInstance
	}
	return nil
}

func (m *Activity) GetChallengeInstanceID() int64 {
	if m != nil {
		return m.ChallengeInstanceID
	}
	return 0
}

func (m *Activity) GetAgent() *Agent {
	if m != nil {
		return m.Agent
	}
	return nil
}

func (m *Activity) GetAgentID() int64 {
	if m != nil {
		return m.AgentID
	}
	return 0
}

func (m *Activity) GetTeamInvite() *Agent {
	if m != nil {
		return m.TeamInvite
	}
	return nil
}

func (m *Activity) GetTeamInviteID() int64 {
	if m != nil {
		return m.TeamInviteID
	}
	return 0
}

type Dump struct {
	Achievements           []*Achievement           `protobuf:"bytes,1,rep,name=achievements,proto3" json:"achievements,omitempty"`
	Challenges             []*Challenge             `protobuf:"bytes,2,rep,name=challenges,proto3" json:"challenges,omitempty"`
	ChallengeFlavors       []*ChallengeFlavor       `protobuf:"bytes,3,rep,name=challenge_flavors,json=challengeFlavors,proto3" json:"challenge_flavors,omitempty"`
	ChallengeInstances     []*ChallengeInstance     `protobuf:"bytes,4,rep,name=challenge_instances,json=challengeInstances,proto3" json:"challenge_instances,omitempty"`
	ChallengeSubscriptions []*ChallengeSubscription `protobuf:"bytes,5,rep,name=challenge_subscriptions,json=challengeSubscriptions,proto3" json:"challenge_subscriptions,omitempty"`
	ChallengeValidations   []*ChallengeValidation   `protobuf:"bytes,6,rep,name=challenge_validations,json=challengeValidations,proto3" json:"challenge_validations,omitempty"`
	Coupons                []*Coupon                `protobuf:"bytes,7,rep,name=coupons,proto3" json:"coupons,omitempty"`
	CouponValidations      []*CouponValidation      `protobuf:"bytes,8,rep,name=coupon_validations,json=couponValidations,proto3" json:"coupon_validations,omitempty"`
	Agents                 []*Agent                 `protobuf:"bytes,9,rep,name=agents,proto3" json:"agents,omitempty"`
	InventoryItems         []*InventoryItem         `protobuf:"bytes,10,rep,name=inventory_items,json=inventoryItems,proto3" json:"inventory_items,omitempty"`
	Notifications          []*Notification          `protobuf:"bytes,11,rep,name=notifications,proto3" json:"notifications,omitempty"`
	Organizations          []*Organization          `protobuf:"bytes,12,rep,name=organizations,proto3" json:"organizations,omitempty"`
	OrganizationMembers    []*OrganizationMember    `protobuf:"bytes,13,rep,name=organization_members,json=organizationMembers,proto3" json:"organization_members,omitempty"`
	Seasons                []*Season                `protobuf:"bytes,14,rep,name=seasons,proto3" json:"seasons,omitempty"`
	SeasonChallenges       []*SeasonChallenge       `protobuf:"bytes,15,rep,name=season_challenges,json=seasonChallenges,proto3" json:"season_challenges,omitempty"`
	Teams                  []*Team                  `protobuf:"bytes,16,rep,name=teams,proto3" json:"teams,omitempty"`
	TeamMembers            []*TeamMember            `protobuf:"bytes,17,rep,name=team_members,json=teamMembers,proto3" json:"team_members,omitempty"`
	Users                  []*User                  `protobuf:"bytes,18,rep,name=users,proto3" json:"users,omitempty"`
	WhoswhoAttempts        []*WhoswhoAttempt        `protobuf:"bytes,19,rep,name=whoswho_attempts,json=whoswhoAttempts,proto3" json:"whoswho_attempts,omitempty"`
}

func (m *Dump) Reset()         { *m = Dump{} }
func (m *Dump) String() string { return proto.CompactTextString(m) }
func (*Dump) ProtoMessage()    {}
func (*Dump) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{21}
}
func (m *Dump) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dump) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dump.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dump) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dump.Merge(m, src)
}
func (m *Dump) XXX_Size() int {
	return m.Size()
}
func (m *Dump) XXX_DiscardUnknown() {
	xxx_messageInfo_Dump.DiscardUnknown(m)
}

var xxx_messageInfo_Dump proto.InternalMessageInfo

func (m *Dump) GetAchievements() []*Achievement {
	if m != nil {
		return m.Achievements
	}
	return nil
}

func (m *Dump) GetChallenges() []*Challenge {
	if m != nil {
		return m.Challenges
	}
	return nil
}

func (m *Dump) GetChallengeFlavors() []*ChallengeFlavor {
	if m != nil {
		return m.ChallengeFlavors
	}
	return nil
}

func (m *Dump) GetChallengeInstances() []*ChallengeInstance {
	if m != nil {
		return m.ChallengeInstances
	}
	return nil
}

func (m *Dump) GetChallengeSubscriptions() []*ChallengeSubscription {
	if m != nil {
		return m.ChallengeSubscriptions
	}
	return nil
}

func (m *Dump) GetChallengeValidations() []*ChallengeValidation {
	if m != nil {
		return m.ChallengeValidations
	}
	return nil
}

func (m *Dump) GetCoupons() []*Coupon {
	if m != nil {
		return m.Coupons
	}
	return nil
}

func (m *Dump) GetCouponValidations() []*CouponValidation {
	if m != nil {
		return m.CouponValidations
	}
	return nil
}

func (m *Dump) GetAgents() []*Agent {
	if m != nil {
		return m.Agents
	}
	return nil
}

func (m *Dump) GetInventoryItems() []*InventoryItem {
	if m != nil {
		return m.InventoryItems
	}
	return nil
}

func (m *Dump) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func (m *Dump) GetOrganizations() []*Organization {
	if m != nil {
		return m.Organizations
	}
	return nil
}

func (m *Dump) GetOrganizationMembers() []*OrganizationMember {
	if m != nil {
		return m.OrganizationMembers
	}
	return nil
}

func (m *Dump) GetSeasons() []*Season {
	if m != nil {
		return m.Seasons
	}
	return nil
}

func (m *Dump) GetSeasonChallenges() []*SeasonChallenge {
	if m != nil {
		return m.SeasonChallenges
	}
	return nil
}

func (m *Dump) GetTeams() []*Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *Dump) GetTeamMembers() []*TeamMember {
	if m != nil {
		return m.TeamMembers
	}
	return nil
}

func (m *Dump) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *Dump) GetWhoswhoAttempts() []*WhoswhoAttempt {
	if m != nil {
		return m.WhoswhoAttempts
	}
	return nil
}

type Info struct {
	TableRows map[string]uint32 `protobuf:"bytes,1,rep,name=table_rows,json=tableRows,proto3" json:"table_rows,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Info) Reset()         { *m = Info{} }
func (m *Info) String() string { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()    {}
func (*Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{22}
}
func (m *Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Info.Merge(m, src)
}
func (m *Info) XXX_Size() int {
	return m.Size()
}
func (m *Info) XXX_DiscardUnknown() {
	xxx_messageInfo_Info.DiscardUnknown(m)
}

var xxx_messageInfo_Info proto.InternalMessageInfo

func (m *Info) GetTableRows() map[string]uint32 {
	if m != nil {
		return m.TableRows
	}
	return nil
}

type AgentList struct {
	Items []*Agent `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *AgentList) Reset()         { *m = AgentList{} }
func (m *AgentList) String() string { return proto.CompactTextString(m) }
func (*AgentList) ProtoMessage()    {}
func (*AgentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{23}
}
func (m *AgentList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentList.Merge(m, src)
}
func (m *AgentList) XXX_Size() int {
	return m.Size()
}
func (m *AgentList) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentList.DiscardUnknown(m)
}

var xxx_messageInfo_AgentList proto.InternalMessageInfo

func (m *AgentList) GetItems() []*Agent {
	if m != nil {
		return m.Items
	}
	return nil
}

type ChallengeList struct {
	Items []*Challenge `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *ChallengeList) Reset()         { *m = ChallengeList{} }
func (m *ChallengeList) String() string { return proto.CompactTextString(m) }
func (*ChallengeList) ProtoMessage()    {}
func (*ChallengeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{24}
}
func (m *ChallengeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeList.Merge(m, src)
}
func (m *ChallengeList) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeList) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeList.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeList proto.InternalMessageInfo

func (m *ChallengeList) GetItems() []*Challenge {
	if m != nil {
		return m.Items
	}
	return nil
}

type SeasonChallengeList struct {
	Items []*SeasonChallenge `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *SeasonChallengeList) Reset()         { *m = SeasonChallengeList{} }
func (m *SeasonChallengeList) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeList) ProtoMessage()    {}
func (*SeasonChallengeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{25}
}
func (m *SeasonChallengeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeList.Merge(m, src)
}
func (m *SeasonChallengeList) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeList) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeList.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeList proto.InternalMessageInfo

func (m *SeasonChallengeList) GetItems() []*SeasonChallenge {
	if m != nil {
		return m.Items
	}
	return nil
}

type UserList struct {
	Items []*User `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *UserList) Reset()         { *m = UserList{} }
func (m *UserList) String() string { return proto.CompactTextString(m) }
func (*UserList) ProtoMessage()    {}
func (*UserList) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{26}
}
func (m *UserList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserList.Merge(m, src)
}
func (m *UserList) XXX_Size() int {
	return m.Size()
}
func (m *UserList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserList.DiscardUnknown(m)
}

var xxx_messageInfo_UserList proto.InternalMessageInfo

func (m *UserList) GetItems() []*User {
	if m != nil {
		return m.Items
	}
	return nil
}

type OrganizationList struct {
	Items []*Organization `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *OrganizationList) Reset()         { *m = OrganizationList{} }
func (m *OrganizationList) String() string { return proto.CompactTextString(m) }
func (*OrganizationList) ProtoMessage()    {}
func (*OrganizationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{27}
}
func (m *OrganizationList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrganizationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrganizationList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrganizationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationList.Merge(m, src)
}
func (m *OrganizationList) XXX_Size() int {
	return m.Size()
}
func (m *OrganizationList) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationList.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationList proto.InternalMessageInfo

func (m *OrganizationList) GetItems() []*Organization {
	if m != nil {
		return m.Items
	}
	return nil
}

type SeasonList struct {
	Items []*Season `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *SeasonList) Reset()         { *m = SeasonList{} }
func (m *SeasonList) String() string { return proto.CompactTextString(m) }
func (*SeasonList) ProtoMessage()    {}
func (*SeasonList) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{28}
}
func (m *SeasonList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonList.Merge(m, src)
}
func (m *SeasonList) XXX_Size() int {
	return m.Size()
}
func (m *SeasonList) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonList.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonList proto.InternalMessageInfo

func (m *SeasonList) GetItems() []*Season {
	if m != nil {
		return m.Items
	}
	return nil
}

type TeamList struct {
	Items []*Team `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *TeamList) Reset()         { *m = TeamList{} }
func (m *TeamList) String() string { return proto.CompactTextString(m) }
func (*TeamList) ProtoMessage()    {}
func (*TeamList) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{29}
}
func (m *TeamList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamList.Merge(m, src)
}
func (m *TeamList) XXX_Size() int {
	return m.Size()
}
func (m *TeamList) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamList.DiscardUnknown(m)
}

var xxx_messageInfo_TeamList proto.InternalMessageInfo

func (m *TeamList) GetItems() []*Team {
	if m != nil {
		return m.Items
	}
	return nil
}

type ActivityList struct {
	Items []*Activity `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *ActivityList) Reset()         { *m = ActivityList{} }
func (m *ActivityList) String() string { return proto.CompactTextString(m) }
func (*ActivityList) ProtoMessage()    {}
func (*ActivityList) Descriptor() ([]byte, []int) {
	return fileDescriptor_debbe06253822cef, []int{30}
}
func (m *ActivityList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityList.Merge(m, src)
}
func (m *ActivityList) XXX_Size() int {
	return m.Size()
}
func (m *ActivityList) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityList.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityList proto.InternalMessageInfo

func (m *ActivityList) GetItems() []*Activity {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterEnum("pathwar.db.DeletionStatus", DeletionStatus_name, DeletionStatus_value)
	proto.RegisterEnum("pathwar.db.ChallengeFlavor_Driver", ChallengeFlavor_Driver_name, ChallengeFlavor_Driver_value)
	proto.RegisterEnum("pathwar.db.ChallengeInstance_Status", ChallengeInstance_Status_name, ChallengeInstance_Status_value)
	proto.RegisterEnum("pathwar.db.Agent_Status", Agent_Status_name, Agent_Status_value)
	proto.RegisterEnum("pathwar.db.OrganizationMember_Role", OrganizationMember_Role_name, OrganizationMember_Role_value)
	proto.RegisterEnum("pathwar.db.TeamMember_Role", TeamMember_Role_name, TeamMember_Role_value)
	proto.RegisterEnum("pathwar.db.Season_Status", Season_Status_name, Season_Status_value)
	proto.RegisterEnum("pathwar.db.Season_Visibility", Season_Visibility_name, Season_Visibility_value)
	proto.RegisterEnum("pathwar.db.Season_Subscription", Season_Subscription_name, Season_Subscription_value)
	proto.RegisterEnum("pathwar.db.ChallengeValidation_Status", ChallengeValidation_Status_name, ChallengeValidation_Status_value)
	proto.RegisterEnum("pathwar.db.ChallengeSubscription_Status", ChallengeSubscription_Status_name, ChallengeSubscription_Status_value)
	proto.RegisterEnum("pathwar.db.InventoryItem_Item", InventoryItem_Item_name, InventoryItem_Item_value)
	proto.RegisterEnum("pathwar.db.Achievement_Type", Achievement_Type_name, Achievement_Type_value)
	proto.RegisterEnum("pathwar.db.Activity_Kind", Activity_Kind_name, Activity_Kind_value)
	proto.RegisterType((*Challenge)(nil), "pathwar.db.Challenge")
	proto.RegisterType((*ChallengeFlavor)(nil), "pathwar.db.ChallengeFlavor")
	proto.RegisterType((*ChallengeFlavor_RedumpPolicy)(nil), "pathwar.db.ChallengeFlavor.RedumpPolicy")
	proto.RegisterType((*SeasonChallenge)(nil), "pathwar.db.SeasonChallenge")
	proto.RegisterType((*ChallengeInstance)(nil), "pathwar.db.ChallengeInstance")
	proto.RegisterType((*Agent)(nil), "pathwar.db.Agent")
	proto.RegisterType((*OrganizationMember)(nil), "pathwar.db.OrganizationMember")
	proto.RegisterType((*TeamMember)(nil), "pathwar.db.TeamMember")
	proto.RegisterType((*TeamInvite)(nil), "pathwar.db.TeamInvite")
	proto.RegisterType((*User)(nil), "pathwar.db.User")
	proto.RegisterType((*Organization)(nil), "pathwar.db.Organization")
	proto.RegisterType((*Season)(nil), "pathwar.db.Season")
	proto.RegisterType((*Team)(nil), "pathwar.db.Team")
	proto.RegisterType((*WhoswhoAttempt)(nil), "pathwar.db.WhoswhoAttempt")
	proto.RegisterType((*ChallengeValidation)(nil), "pathwar.db.ChallengeValidation")
	proto.RegisterType((*ChallengeSubscription)(nil), "pathwar.db.ChallengeSubscription")
	proto.RegisterType((*InventoryItem)(nil), "pathwar.db.InventoryItem")
	proto.RegisterType((*Notification)(nil), "pathwar.db.Notification")
	proto.RegisterType((*Coupon)(nil), "pathwar.db.Coupon")
	proto.RegisterType((*CouponValidation)(nil), "pathwar.db.CouponValidation")
	proto.RegisterType((*Achievement)(nil), "pathwar.db.Achievement")
	proto.RegisterType((*Activity)(nil), "pathwar.db.Activity")
	proto.RegisterType((*Dump)(nil), "pathwar.db.Dump")
	proto.RegisterType((*Info)(nil), "pathwar.db.Info")
	proto.RegisterMapType((map[string]uint32)(nil), "pathwar.db.Info.TableRowsEntry")
	proto.RegisterType((*AgentList)(nil), "pathwar.db.AgentList")
	proto.RegisterType((*ChallengeList)(nil), "pathwar.db.ChallengeList")
	proto.RegisterType((*SeasonChallengeList)(nil), "pathwar.db.SeasonChallengeList")
	proto.RegisterType((*UserList)(nil), "pathwar.db.UserList")
	proto.RegisterType((*OrganizationList)(nil), "pathwar.db.OrganizationList")
	proto.RegisterType((*SeasonList)(nil), "pathwar.db.SeasonList")
	proto.RegisterType((*TeamList)(nil), "pathwar.db.TeamList")
	proto.RegisterType((*ActivityList)(nil), "pathwar.db.ActivityList")
}

func init() { proto.RegisterFile("pwdb.proto", fileDescriptor_debbe06253822cef) }

var fileDescriptor_debbe06253822cef = []byte{
	// 5538 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x3c, 0x5d, 0x73, 0x1b, 0xd7,
	0x75, 0x06, 0x09, 0x82, 0xc0, 0x21, 0x40, 0x2e, 0x2f, 0x49, 0x69, 0x25, 0x5b, 0x5a, 0x7a, 0x9d,
	0x58, 0x92, 0x65, 0x51, 0x14, 0x13, 0xb9, 0x89, 0xac, 0x78, 0x42, 0x50, 0xb2, 0x04, 0x4b, 0xb6,
	0xd4, 0xa5, 0x28, 0x37, 0x8e, 0x33, 0x98, 0x05, 0xf6, 0x02, 0x5c, 0x73, 0xb1, 0x0b, 0xed, 0x2e,
	0x48, 0xd1, 0x33, 0x9d, 0xe9, 0x64, 0x9a, 0xb6, 0x6f, 0xcd, 0x4c, 0x3b, 0xd3, 0x69, 0xa7, 0x3f,
	0xa0, 0xcf, 0x7d, 0xec, 0x4c, 0x1f, 0x3b, 0x23, 0x27, 0x92, 0xed, 0xb4, 0x69, 0x9b, 0x7e, 0x04,
	0x49, 0xe9, 0x87, 0xf6, 0x19, 0xd3, 0xa7, 0xf6, 0xa1, 0x9d, 0xfb, 0xb1, 0xbb, 0x77, 0x17, 0x0b,
	0x80, 0x0c, 0x99, 0x34, 0xac, 0xad, 0x07, 0x11, 0xf7, 0xec, 0x39, 0xe7, 0x7e, 0xec, 0x39, 0xe7,
	0x9e, 0x73, 0xee, 0xb9, 0x0b, 0xd0, 0xde, 0x31, 0x6a, 0x4b, 0x6d, 0xd7, 0xf1, 0x1d, 0x04, 0x6d,
	0xdd, 0xdf, 0xdc, 0xd1, 0xdd, 0x25, 0xa3, 0x76, 0xfa, 0x52, 0xd3, 0xf4, 0x37, 0x3b, 0xb5, 0xa5,
	0xba, 0xd3, 0xba, 0xdc, 0x74, 0x9a, 0xce, 0x65, 0x8a, 0x52, 0xeb, 0x34, 0x68, 0x8b, 0x36, 0xe8,
	0x2f, 0x46, 0x7a, 0x5a, 0x69, 0x3a, 0x4e, 0xd3, 0xc2, 0x11, 0x96, 0x6f, 0xb6, 0xb0, 0xe7, 0xeb,
	0xad, 0x36, 0x43, 0x50, 0xff, 0x3b, 0x0b, 0x85, 0xb5, 0x4d, 0xdd, 0xb2, 0xb0, 0xdd, 0xc4, 0xe8,
	0x9b, 0x30, 0x66, 0x1a, 0x72, 0x66, 0x31, 0x73, 0x7e, 0xbc, 0xbc, 0xbc, 0xd7, 0x55, 0xc6, 0x2a,
	0x37, 0x7a, 0x5d, 0xe5, 0xe5, 0xa6, 0xe3, 0xb6, 0xae, 0xa9, 0x6d, 0xd7, 0x6c, 0xe9, 0xee, 0x6e,
	0x75, 0x0b, 0xef, 0xaa, 0x8b, 0xbb, 0x7a, 0xcb, 0xba, 0xa6, 0x9a, 0xc6, 0xab, 0x4e, 0xcb, 0xf4,
	0x71, 0xab, 0xed, 0xef, 0xaa, 0xda, 0x98, 0x69, 0xa0, 0x1a, 0x40, 0xdd, 0xc5, 0xba, 0x8f, 0x8d,
	0xaa, 0xee, 0xcb, 0x63, 0x8b, 0x99, 0xf3, 0x53, 0x2b, 0xa7, 0x97, 0xd8, 0x28, 0x96, 0x82, 0x51,
	0x2c, 0x3d, 0x08, 0x46, 0x51, 0x3e, 0xf7, 0xa4, 0xab, 0x64, 0x7a, 0x5d, 0xe5, 0x79, 0xc6, 0x30,
	0xa2, 0x15, 0x18, 0x7f, 0xff, 0x67, 0x4a, 0x46, 0x2b, 0xf0, 0x47, 0xab, 0x3e, 0xe9, 0xa3, 0xd3,
	0x36, 0x82, 0x3e, 0xc6, 0x0f, 0xda, 0x47, 0x44, 0xdb, 0xd7, 0x07, 0x7f, 0xb4, 0xea, 0x23, 0x04,
	0x59, 0x5b, 0x6f, 0x61, 0xd9, 0x58, 0xcc, 0x9c, 0x2f, 0x68, 0xf4, 0x37, 0x5a, 0x84, 0x29, 0x03,
	0x7b, 0x75, 0xd7, 0x6c, 0xfb, 0xa6, 0x63, 0xcb, 0x98, 0x3e, 0x12, 0x41, 0xe8, 0x04, 0xe4, 0xf4,
	0x8e, 0xbf, 0xe9, 0xb8, 0x72, 0x83, 0x3e, 0xe4, 0x2d, 0x02, 0xb7, 0x9c, 0xba, 0x6e, 0x61, 0xb9,
	0xc9, 0xe0, 0xac, 0x85, 0x4e, 0x41, 0xde, 0xf4, 0xaa, 0x86, 0xab, 0x37, 0x7c, 0x79, 0x73, 0x31,
	0x73, 0x3e, 0xaf, 0x4d, 0x9a, 0xde, 0x0d, 0xd2, 0x44, 0x97, 0x61, 0xaa, 0xed, 0xe2, 0x6d, 0x13,
	0xef, 0x54, 0x3b, 0xae, 0x25, 0x9b, 0x84, 0xae, 0x3c, 0xbd, 0xd7, 0x55, 0xe0, 0x3e, 0x03, 0x6f,
	0x68, 0x77, 0x35, 0xe0, 0x28, 0x1b, 0xae, 0x85, 0x4e, 0x43, 0x7e, 0xd3, 0x69, 0xe1, 0xb6, 0xde,
	0xc4, 0xf2, 0x07, 0xb4, 0x97, 0xb0, 0x8d, 0x2e, 0x42, 0xd6, 0xb3, 0x3a, 0x4d, 0x79, 0x8b, 0x72,
	0x39, 0xd9, 0xeb, 0x2a, 0x73, 0xec, 0x9d, 0x76, 0x6c, 0xf3, 0x51, 0x07, 0x57, 0x4d, 0xdb, 0xc0,
	0x8f, 0x55, 0x8d, 0x22, 0x21, 0x13, 0x26, 0x1b, 0x96, 0xbe, 0xed, 0xb8, 0x9e, 0xfc, 0x24, 0xb3,
	0x38, 0x7e, 0x7e, 0x6a, 0xe5, 0xf9, 0xa5, 0x48, 0x02, 0x97, 0x42, 0x69, 0x79, 0x93, 0x22, 0x95,
	0xaf, 0xf4, 0xba, 0xca, 0x25, 0xc6, 0xed, 0xbe, 0x76, 0xf3, 0xee, 0xbd, 0xd5, 0x1b, 0xd7, 0x1a,
	0xba, 0xe5, 0xe1, 0x40, 0x46, 0x38, 0x2f, 0x51, 0x50, 0x02, 0xfe, 0xea, 0x1f, 0x97, 0x60, 0x26,
	0xc1, 0xef, 0x0b, 0x19, 0x0c, 0x65, 0x50, 0x86, 0xc9, 0x6d, 0xec, 0x7a, 0x44, 0xd6, 0x98, 0x18,
	0x06, 0x4d, 0xf4, 0x2a, 0x80, 0xe7, 0x74, 0xdc, 0x3a, 0xa6, 0xb2, 0xb1, 0x49, 0xdf, 0x6a, 0x69,
	0xaf, 0xab, 0x14, 0xd6, 0x29, 0x94, 0x88, 0x46, 0x81, 0x21, 0x10, 0xc9, 0xf8, 0x06, 0x4c, 0xd7,
	0x9d, 0x56, 0xdb, 0xf1, 0x70, 0xb5, 0xd6, 0xb1, 0x0d, 0x0b, 0x73, 0x69, 0x3a, 0xd1, 0xeb, 0x2a,
	0x88, 0xad, 0xab, 0x67, 0x7e, 0x88, 0xaf, 0x5d, 0x59, 0x26, 0xff, 0x54, 0xad, 0xc4, 0xb1, 0xcb,
	0x14, 0x19, 0xdd, 0x86, 0x9c, 0xe1, 0x9a, 0xdb, 0xd8, 0xa5, 0x62, 0x35, 0xbd, 0xa2, 0x0e, 0x91,
	0x86, 0xa5, 0x1b, 0x14, 0xb3, 0x5c, 0xec, 0x75, 0x95, 0x3c, 0x9b, 0xea, 0x25, 0x55, 0xe3, 0xf4,
	0xe8, 0x9b, 0x30, 0xdd, 0xee, 0xb8, 0xf5, 0x4d, 0xdd, 0xc3, 0xd5, 0xb6, 0x6b, 0xd6, 0x31, 0x15,
	0xc8, 0xf1, 0xf2, 0xa9, 0x5e, 0x57, 0x59, 0x60, 0xd8, 0xf1, 0xe7, 0xaa, 0x56, 0x0a, 0x00, 0xf7,
	0x49, 0x1b, 0x55, 0x60, 0x76, 0x5b, 0xb7, 0x4c, 0x43, 0x27, 0xea, 0x56, 0x75, 0xf1, 0x8e, 0xee,
	0x1a, 0xb2, 0x45, 0x99, 0xbc, 0xd0, 0xeb, 0x2a, 0x32, 0x63, 0xd2, 0x87, 0xa2, 0x6a, 0x52, 0x04,
	0xd3, 0x28, 0x28, 0xd4, 0x89, 0xd6, 0x7e, 0x74, 0x02, 0x41, 0xb6, 0xe6, 0x18, 0xbb, 0xb2, 0xcd,
	0xcc, 0x01, 0xf9, 0x4d, 0xcc, 0x41, 0x5b, 0xf7, 0xbc, 0xf6, 0xa6, 0xab, 0x7b, 0xd8, 0x93, 0x1d,
	0x32, 0x0a, 0x4d, 0x04, 0x11, 0x95, 0xac, 0xeb, 0x3e, 0x6e, 0x3a, 0xee, 0xae, 0xdc, 0x66, 0x2a,
	0x19, 0xb4, 0xd1, 0x22, 0x64, 0x7d, 0xbd, 0xe9, 0xc9, 0x8f, 0x16, 0xc7, 0xcf, 0x17, 0xd8, 0x7a,
	0xb1, 0xee, 0x2f, 0xa9, 0x1a, 0x7d, 0x82, 0xce, 0x41, 0xde, 0xd7, 0x9b, 0x55, 0xcb, 0xf4, 0x7c,
	0xd9, 0xa5, 0x83, 0x8c, 0xaf, 0xea, 0xa4, 0xaf, 0x37, 0xef, 0x9a, 0x9e, 0x8f, 0xda, 0x50, 0x72,
	0xb1, 0xd1, 0x69, 0xb5, 0xab, 0x6d, 0xc7, 0x32, 0xeb, 0xbb, 0xb2, 0x47, 0xb5, 0xf6, 0xfc, 0xb0,
	0xf7, 0xa4, 0x51, 0x82, 0xfb, 0x14, 0xbf, 0xfc, 0x62, 0xaf, 0xab, 0x9c, 0x09, 0x7a, 0xe7, 0x6a,
	0xc5, 0x38, 0x5e, 0x62, 0x1c, 0x55, 0xad, 0xe8, 0x0a, 0x04, 0xe8, 0x0d, 0x98, 0x8f, 0xf5, 0x58,
	0xad, 0x3b, 0x76, 0xc3, 0x6c, 0xca, 0x7e, 0xca, 0x30, 0x91, 0x48, 0xb9, 0x46, 0xf1, 0x90, 0x0b,
	0x85, 0x7a, 0x30, 0x20, 0x62, 0x64, 0x88, 0xf6, 0x2c, 0xa4, 0x0e, 0xb7, 0x7c, 0xbd, 0xd7, 0x55,
	0xbe, 0xc6, 0xc6, 0xd6, 0x70, 0x5c, 0x6c, 0x36, 0xed, 0x2d, 0xbc, 0x7b, 0x2d, 0x7c, 0x5e, 0xb9,
	0x11, 0x0c, 0x38, 0x64, 0x28, 0x9a, 0x83, 0xa8, 0x1b, 0xd4, 0x86, 0x62, 0xd8, 0xa8, 0x9a, 0x86,
	0xfc, 0x11, 0x33, 0x31, 0x77, 0xf7, 0xba, 0xca, 0x94, 0xc0, 0xae, 0xd7, 0x55, 0xbe, 0xee, 0x3d,
	0xb2, 0xae, 0xa9, 0xb6, 0xe3, 0x2f, 0xda, 0x1d, 0xcb, 0x52, 0x17, 0x59, 0xef, 0x4c, 0x1e, 0x92,
	0x9d, 0x55, 0xe3, 0xe6, 0x67, 0x2a, 0x7c, 0x50, 0x31, 0xd0, 0x9f, 0x65, 0x60, 0xd6, 0xc3, 0xba,
	0xe7, 0xd8, 0xd5, 0x10, 0xec, 0xc9, 0x3f, 0x48, 0xb1, 0xa9, 0xeb, 0x14, 0x2b, 0x9a, 0xf4, 0xbd,
	0x5e, 0x57, 0xb9, 0x93, 0x62, 0x53, 0x5f, 0x17, 0x96, 0x80, 0xbd, 0xc8, 0x68, 0xfe, 0x7d, 0x3d,
	0x89, 0xe3, 0x92, 0xbc, 0x78, 0x0f, 0x1e, 0xfa, 0x5e, 0x06, 0x0a, 0xa6, 0xed, 0xf9, 0xba, 0x5d,
	0xc7, 0x9e, 0xfc, 0x43, 0x36, 0xa8, 0x33, 0xa9, 0xef, 0xa0, 0xc2, 0xd1, 0xca, 0xb7, 0x7a, 0x5d,
	0x65, 0xed, 0x80, 0xc3, 0x0a, 0xfb, 0x88, 0xbd, 0x96, 0x10, 0x7a, 0xfa, 0x7d, 0x28, 0x8a, 0xb2,
	0x48, 0x74, 0xc6, 0xf3, 0x5d, 0xa2, 0x25, 0xbb, 0x74, 0x13, 0x28, 0x68, 0x61, 0x1b, 0x2d, 0xc3,
	0x84, 0x81, 0x2d, 0x7d, 0x97, 0xda, 0xf4, 0x42, 0xf9, 0x74, 0xaf, 0xab, 0x9c, 0x60, 0xbd, 0x50,
	0xb0, 0xd8, 0x03, 0x43, 0x54, 0xbf, 0x0a, 0x39, 0x66, 0x91, 0xd0, 0x14, 0x4c, 0x6e, 0xd8, 0x5b,
	0xb6, 0xb3, 0x63, 0x4b, 0xcf, 0x21, 0x80, 0xdc, 0x0d, 0xa7, 0xbe, 0x85, 0x5d, 0x29, 0x83, 0x66,
	0xa1, 0xc4, 0x7e, 0xaf, 0x31, 0xab, 0x27, 0x8d, 0xa9, 0xff, 0x33, 0x01, 0x33, 0x89, 0x57, 0x82,
	0x5e, 0x15, 0xb6, 0xa5, 0x17, 0xc2, 0x6d, 0x09, 0xf5, 0x6f, 0x4b, 0x74, 0x0b, 0x5a, 0x3b, 0xe0,
	0x16, 0x94, 0x27, 0xdb, 0x43, 0x72, 0x8f, 0x59, 0x3b, 0xe0, 0x1e, 0x23, 0x30, 0x89, 0x39, 0x32,
	0xd4, 0xcc, 0x71, 0x47, 0x86, 0x5a, 0xb3, 0x2f, 0xc3, 0xb4, 0x5d, 0xab, 0x46, 0x16, 0xd1, 0xa3,
	0xbe, 0xcc, 0xb8, 0x56, 0xb2, 0x6b, 0x0f, 0x23, 0x20, 0x7a, 0x00, 0x39, 0xb6, 0x51, 0x07, 0x2a,
	0x3a, 0xd4, 0x0f, 0x38, 0xdb, 0xeb, 0x2a, 0xa7, 0xfb, 0x14, 0x35, 0x14, 0x07, 0x8d, 0xf3, 0x42,
	0x8f, 0xa1, 0xc0, 0x7e, 0x09, 0x4a, 0xf8, 0xde, 0x5e, 0x57, 0xc9, 0x07, 0xa8, 0xbd, 0xae, 0xf2,
	0xd6, 0x60, 0x0d, 0x7c, 0x5d, 0x34, 0xcf, 0xd7, 0x4c, 0xe3, 0x71, 0x95, 0x89, 0x76, 0xa4, 0x91,
	0x9c, 0x3b, 0x03, 0xab, 0x5a, 0x9e, 0xb5, 0x2b, 0x06, 0xba, 0x03, 0x39, 0x06, 0x24, 0x3a, 0x48,
	0xe6, 0x83, 0xfa, 0x75, 0x70, 0xc0, 0x34, 0xd8, 0x43, 0x3a, 0x0d, 0xc6, 0x82, 0x4c, 0x83, 0x6b,
	0x9c, 0x69, 0x10, 0xf5, 0x09, 0xa7, 0x11, 0xa0, 0x1e, 0xf5, 0x34, 0xd8, 0x8f, 0x0a, 0x71, 0x6f,
	0x4a, 0x5e, 0xa7, 0x16, 0x3a, 0x9d, 0x9e, 0xfc, 0x94, 0x29, 0xef, 0x8b, 0xa9, 0x6f, 0x67, 0x5d,
	0x40, 0x2d, 0xcb, 0xbd, 0xae, 0x32, 0x9f, 0xe6, 0xab, 0x69, 0x71, 0x96, 0xea, 0x77, 0x0b, 0x30,
	0xdb, 0xa7, 0xff, 0xc7, 0x56, 0x07, 0xae, 0x43, 0xce, 0xf3, 0x75, 0xbf, 0xe3, 0x51, 0x2d, 0x98,
	0x5e, 0xf9, 0xd2, 0x50, 0x33, 0xb7, 0xb4, 0x4e, 0x71, 0x35, 0x4e, 0x83, 0xee, 0xc2, 0x8c, 0xa5,
	0x7b, 0x7e, 0xd5, 0xf3, 0x75, 0x97, 0x8f, 0x03, 0x1f, 0x60, 0x1c, 0x25, 0x42, 0xbc, 0xce, 0x68,
	0x57, 0x7d, 0x81, 0x9b, 0xd3, 0x6e, 0x33, 0x6e, 0x8d, 0x83, 0x73, 0xa3, 0xb4, 0xab, 0x3e, 0xfa,
	0x0e, 0xc8, 0x94, 0x1b, 0xdf, 0x8d, 0x5d, 0xfc, 0xa8, 0x83, 0x3d, 0x3e, 0xc8, 0xe6, 0x01, 0xd8,
	0x2e, 0x10, 0x2e, 0xcc, 0x0e, 0x6b, 0x01, 0x8f, 0x55, 0x1f, 0xbd, 0x04, 0x25, 0x3a, 0xeb, 0x4e,
	0xbb, 0x8a, 0x5d, 0xd7, 0x71, 0x99, 0xab, 0xa9, 0x15, 0x39, 0xf0, 0x26, 0x81, 0xa1, 0x17, 0x81,
	0x3b, 0x07, 0xd5, 0xba, 0xd3, 0xb1, 0x7d, 0xea, 0x5c, 0x8e, 0x6b, 0x53, 0x0c, 0xb6, 0x46, 0x40,
	0xe8, 0x02, 0x08, 0xfe, 0x17, 0x47, 0xfb, 0x80, 0xa2, 0xcd, 0x44, 0x70, 0x86, 0x7a, 0x0e, 0x66,
	0x82, 0xcd, 0x21, 0xf0, 0x2a, 0x88, 0x93, 0x58, 0xd4, 0xa6, 0x03, 0x30, 0xf7, 0x21, 0x02, 0xc3,
	0x66, 0x09, 0x86, 0xed, 0x16, 0x4c, 0xe8, 0x4d, 0x6c, 0xfb, 0x81, 0xc1, 0x9a, 0x15, 0x5f, 0xf4,
	0x2a, 0x79, 0x52, 0x3e, 0xd3, 0xeb, 0x2a, 0xa7, 0xfa, 0xf4, 0x9b, 0x3e, 0x23, 0xea, 0xcd, 0xe8,
	0xd1, 0x9b, 0x90, 0xa7, 0x3f, 0x04, 0x1b, 0xf5, 0xca, 0x5e, 0x57, 0x99, 0xe4, 0x78, 0xc4, 0x91,
	0x1f, 0xe2, 0x24, 0x68, 0x93, 0x94, 0xb8, 0x62, 0x08, 0x26, 0xf4, 0x07, 0x47, 0x68, 0x42, 0x2b,
	0xa2, 0x09, 0xe5, 0xb6, 0xe7, 0x62, 0xc2, 0x84, 0x0e, 0x1d, 0x5f, 0x64, 0x13, 0x5f, 0x83, 0x82,
	0xdd, 0x34, 0xed, 0xc7, 0x34, 0x90, 0xf8, 0x2f, 0xba, 0xe1, 0x96, 0x65, 0xc2, 0xea, 0x1d, 0x02,
	0xdd, 0xd0, 0xee, 0xc6, 0x1c, 0xd3, 0x3c, 0xc5, 0xdd, 0x70, 0x2d, 0xb5, 0x06, 0x39, 0xa6, 0x26,
	0xf1, 0x8d, 0xb5, 0x00, 0x13, 0x15, 0xef, 0x1d, 0xbc, 0x23, 0x65, 0xd0, 0x1c, 0xcc, 0xac, 0xd6,
	0xeb, 0xb8, 0xed, 0x63, 0xa3, 0xbc, 0x4b, 0xd7, 0x4d, 0x1a, 0x43, 0x25, 0x28, 0xac, 0x6e, 0xeb,
	0xa6, 0xa5, 0xd7, 0x2c, 0x2c, 0x8d, 0xa3, 0x69, 0x80, 0x77, 0x30, 0x36, 0x98, 0xe0, 0x49, 0x59,
	0x54, 0x84, 0xfc, 0x0d, 0xd3, 0x23, 0x0f, 0x0d, 0x69, 0x42, 0xfd, 0x8f, 0x49, 0x98, 0xa0, 0x84,
	0xc7, 0x79, 0xf3, 0xed, 0xcb, 0x22, 0xd0, 0x38, 0xdd, 0xf3, 0x29, 0x1c, 0x07, 0x71, 0x3a, 0x6b,
	0xa3, 0x13, 0x30, 0xe6, 0x78, 0x2c, 0x77, 0x50, 0xce, 0x91, 0x79, 0xde, 0x5b, 0xd7, 0xc6, 0x1c,
	0x0f, 0x2d, 0x87, 0x06, 0xac, 0x49, 0x0d, 0x98, 0xdc, 0x27, 0xd7, 0x49, 0xa3, 0x75, 0x12, 0x26,
	0xb1, 0xeb, 0x56, 0x5b, 0x5e, 0x93, 0xeb, 0x6c, 0x0e, 0xbb, 0xee, 0xdb, 0x1e, 0x55, 0x1b, 0xdd,
	0xad, 0x6f, 0xb2, 0x10, 0x50, 0xa3, 0xbf, 0xc5, 0x40, 0xf3, 0x83, 0x78, 0xa0, 0x89, 0x78, 0x94,
	0xb2, 0xc5, 0xb0, 0x69, 0x5c, 0xf2, 0x12, 0x94, 0x0c, 0xa7, 0xa5, 0x9b, 0x76, 0xd5, 0xeb, 0x34,
	0x1a, 0xe6, 0x63, 0xae, 0x81, 0x45, 0x06, 0x5c, 0xa7, 0x30, 0x74, 0x06, 0x80, 0xc9, 0x55, 0xdb,
	0x71, 0x7d, 0x1a, 0x63, 0x8d, 0x6b, 0x4c, 0xd2, 0xee, 0x3b, 0xae, 0x4f, 0x16, 0xa1, 0x85, 0x7d,
	0xdd, 0xd0, 0x7d, 0x9d, 0xc7, 0x54, 0x61, 0x9b, 0x90, 0xd2, 0x2c, 0x55, 0xd5, 0xc3, 0xd8, 0xe6,
	0x61, 0x55, 0x81, 0x42, 0xd6, 0x31, 0xb6, 0x89, 0x2d, 0x61, 0x8f, 0x5d, 0xdc, 0x34, 0x3d, 0x1f,
	0xbb, 0xd8, 0xa0, 0xc1, 0xd5, 0xb8, 0x36, 0x43, 0xe1, 0x5a, 0x08, 0x46, 0x0f, 0x61, 0x9e, 0x5b,
	0x47, 0x02, 0x72, 0x99, 0xf5, 0xd1, 0x7d, 0xf9, 0xd1, 0x01, 0xde, 0x26, 0x62, 0x96, 0x31, 0x62,
	0xb0, 0x4a, 0xac, 0x43, 0x91, 0xd9, 0x70, 0x8c, 0x29, 0x3f, 0xf7, 0x00, 0xfc, 0x80, 0x1a, 0x70,
	0x8c, 0x09, 0x9f, 0xe7, 0xa1, 0xa0, 0x77, 0xfc, 0xcd, 0xaa, 0xa7, 0x5b, 0xbe, 0xec, 0xb1, 0x65,
	0x20, 0x80, 0x75, 0xdd, 0xa2, 0xb6, 0xd7, 0xc0, 0x0d, 0xbd, 0x63, 0xf9, 0x55, 0x66, 0xd3, 0x7c,
	0x9a, 0x20, 0x2a, 0x72, 0x20, 0x53, 0x8c, 0xc0, 0x08, 0x76, 0x04, 0x23, 0x68, 0xc2, 0x9c, 0x10,
	0x9e, 0x84, 0x2e, 0xfe, 0x93, 0x7d, 0xb9, 0xf8, 0x83, 0x3d, 0x04, 0x54, 0x4f, 0x22, 0x7b, 0xea,
	0xad, 0x74, 0x2b, 0x00, 0x90, 0x5b, 0xad, 0xfb, 0xe6, 0x36, 0x96, 0x32, 0x44, 0xa5, 0x2b, 0xb6,
	0xce, 0x5a, 0x63, 0x04, 0x8d, 0x2c, 0x8a, 0xd3, 0xf1, 0xa5, 0x71, 0x62, 0x2c, 0xe8, 0x0e, 0x22,
	0x65, 0xd5, 0x3f, 0x9a, 0x00, 0x74, 0xcf, 0x6d, 0xea, 0xb6, 0xf9, 0x21, 0x5d, 0xe4, 0xb7, 0x71,
	0xab, 0x86, 0xdd, 0x63, 0xab, 0xf7, 0xbf, 0x01, 0x59, 0xd7, 0xb1, 0x30, 0x77, 0x37, 0x5e, 0x12,
	0x97, 0xbc, 0x7f, 0x96, 0x4b, 0x9a, 0x63, 0x61, 0x8d, 0x12, 0x84, 0xef, 0x13, 0x0b, 0xef, 0x73,
	0x0d, 0xb2, 0x1d, 0x0f, 0x87, 0x4e, 0xb8, 0x24, 0x72, 0xdb, 0xf0, 0xb0, 0xcb, 0x32, 0x1f, 0x7d,
	0xdb, 0x06, 0x79, 0x44, 0x36, 0x0d, 0x4a, 0x8c, 0xd6, 0x60, 0x92, 0xfc, 0x15, 0xf6, 0xb3, 0x0b,
	0x7b, 0x5d, 0x25, 0xc7, 0x90, 0x46, 0x6d, 0x17, 0x39, 0x42, 0x5a, 0x31, 0x50, 0x1d, 0x8a, 0x8e,
	0x30, 0xfc, 0x60, 0x4f, 0x93, 0x07, 0xcd, 0xaf, 0xfc, 0xa5, 0x5e, 0x57, 0x59, 0xec, 0x1b, 0x99,
	0x88, 0x42, 0x46, 0x18, 0x63, 0x8a, 0xbe, 0x0d, 0x33, 0x62, 0x5b, 0xd8, 0xe2, 0xae, 0xec, 0x75,
	0x95, 0xe9, 0x38, 0xf1, 0xa8, 0x91, 0x4f, 0x8b, 0xac, 0x2a, 0x86, 0xfa, 0x2a, 0x64, 0xc9, 0x6a,
	0x93, 0x7d, 0x68, 0xc3, 0x36, 0x70, 0xc3, 0xb4, 0xb1, 0xc1, 0xb6, 0xad, 0x7b, 0x3b, 0x36, 0x0d,
	0x07, 0x01, 0x72, 0xec, 0xb5, 0x48, 0x63, 0xea, 0xef, 0x17, 0x00, 0x1e, 0x60, 0xbd, 0x75, 0xcc,
	0xa5, 0xf1, 0x72, 0x4c, 0x1a, 0x63, 0x1e, 0x48, 0x34, 0xbb, 0x34, 0x29, 0x6c, 0xfc, 0x5a, 0x4a,
	0xe1, 0x1a, 0x64, 0x7d, 0xac, 0xb7, 0x02, 0xe9, 0x93, 0x92, 0xf3, 0x19, 0x30, 0x12, 0xf2, 0x88,
	0x8e, 0x84, 0x10, 0x93, 0x91, 0x90, 0xbf, 0x82, 0x74, 0xd1, 0x91, 0x30, 0xa4, 0x91, 0x23, 0x21,
	0xa4, 0x15, 0x03, 0xdd, 0x82, 0xc9, 0xba, 0xd3, 0x69, 0x0b, 0x31, 0x58, 0x2c, 0xa2, 0x5c, 0xa3,
	0xcf, 0x86, 0x98, 0xd4, 0x80, 0x1a, 0x3d, 0x84, 0xa2, 0x5e, 0xdf, 0x34, 0xf1, 0x36, 0x6e, 0x61,
	0xdb, 0xf7, 0xe4, 0x67, 0x8c, 0xdb, 0xc9, 0xd8, 0x36, 0x1f, 0x21, 0x0c, 0x61, 0x19, 0xe3, 0x83,
	0x4c, 0x58, 0xf0, 0x88, 0x17, 0xbb, 0xb3, 0xe9, 0x78, 0x3b, 0x9b, 0x4e, 0x55, 0xf7, 0x69, 0x7e,
	0xc4, 0x93, 0x3f, 0x66, 0x1d, 0x9c, 0x16, 0x3b, 0x78, 0x97, 0x21, 0xad, 0x32, 0x9c, 0x21, 0x7d,
	0xcc, 0x11, 0x9e, 0x71, 0x6c, 0x0f, 0x3d, 0x82, 0x53, 0x2e, 0xae, 0x63, 0x73, 0x1b, 0x1b, 0xfd,
	0xdd, 0x7d, 0x72, 0x98, 0xee, 0x4e, 0x06, 0x7c, 0x93, 0x5d, 0xbe, 0x05, 0x13, 0xa6, 0x8f, 0x5b,
	0x9e, 0xfc, 0x29, 0x63, 0x7f, 0x4a, 0x64, 0x5f, 0xb1, 0xb7, 0xb1, 0xed, 0x3b, 0xee, 0x6e, 0xc5,
	0xc7, 0xad, 0x21, 0xdc, 0x19, 0x0b, 0xe4, 0xc0, 0x42, 0xb4, 0x69, 0x8a, 0x99, 0x91, 0x1f, 0x31,
	0xde, 0x4a, 0xea, 0xb6, 0x19, 0x65, 0x4b, 0x86, 0xf4, 0x30, 0x5f, 0xef, 0x47, 0xf7, 0x0e, 0x68,
	0x89, 0xfe, 0x32, 0xcb, 0x2c, 0x51, 0xc5, 0xde, 0x36, 0xfd, 0xe3, 0x1b, 0x88, 0xaf, 0x01, 0x18,
	0xd8, 0xc2, 0x9c, 0x49, 0xf6, 0x20, 0x4c, 0x38, 0x1d, 0x65, 0xf2, 0x85, 0x25, 0x4a, 0x5a, 0xa2,
	0x39, 0x6e, 0xb1, 0x9f, 0x66, 0x22, 0x93, 0xad, 0xfe, 0x3b, 0x40, 0x96, 0x4c, 0xe8, 0xf3, 0x2d,
	0x2e, 0xa7, 0x21, 0x4f, 0x5e, 0x97, 0x10, 0x87, 0x85, 0x6d, 0x34, 0x0f, 0x13, 0xb8, 0xa5, 0x9b,
	0x16, 0xf7, 0xb7, 0x58, 0x03, 0xad, 0x40, 0xb1, 0xe9, 0xea, 0xdb, 0xba, 0xaf, 0xbb, 0x34, 0x2c,
	0x66, 0xf1, 0xd8, 0xcc, 0x5e, 0x57, 0x99, 0xba, 0xc5, 0xe1, 0x1b, 0xda, 0x5d, 0x6d, 0x2a, 0x40,
	0xda, 0x70, 0x2d, 0x74, 0x19, 0xa6, 0x76, 0x70, 0xcd, 0x33, 0x7d, 0x76, 0x24, 0xd7, 0x8c, 0x8e,
	0x6b, 0xdf, 0x65, 0x60, 0x7a, 0x5c, 0xcb, 0x51, 0x08, 0x41, 0x74, 0x24, 0xbc, 0x19, 0x3b, 0x12,
	0xbe, 0x0b, 0x25, 0x87, 0x05, 0x05, 0x9d, 0xda, 0x07, 0xb8, 0xee, 0xf3, 0xb3, 0xba, 0x73, 0x7b,
	0x5d, 0xa5, 0x78, 0x6f, 0x95, 0x04, 0x07, 0x0c, 0x3e, 0xe8, 0xbc, 0xaa, 0x48, 0xa9, 0x39, 0x12,
	0x3a, 0x07, 0x33, 0x74, 0x25, 0xd8, 0x51, 0x18, 0xcd, 0x7d, 0xb2, 0x08, 0x6f, 0x3a, 0x00, 0x6b,
	0x2c, 0x9d, 0xb9, 0x26, 0x20, 0xf2, 0x50, 0x73, 0x8b, 0xba, 0x0b, 0x31, 0x9b, 0x7d, 0x83, 0xa3,
	0xf0, 0x60, 0x33, 0x64, 0xc2, 0x83, 0x80, 0xb4, 0x94, 0xcc, 0xfb, 0x20, 0x51, 0xf1, 0x6e, 0x51,
	0x53, 0xe6, 0x6d, 0x9a, 0xed, 0x30, 0x14, 0x39, 0x91, 0xee, 0x89, 0x0c, 0x31, 0xa5, 0x33, 0x7e,
	0x88, 0x45, 0x39, 0xa1, 0x6f, 0x41, 0xc9, 0x76, 0x7c, 0xb3, 0x61, 0xd6, 0xb9, 0xb9, 0xfe, 0x88,
	0xb1, 0x8e, 0xb9, 0xa4, 0xef, 0x08, 0x18, 0xc3, 0x52, 0xa0, 0x31, 0x4e, 0xc8, 0x07, 0x39, 0xe6,
	0x87, 0x8a, 0x13, 0xe0, 0x67, 0x38, 0x67, 0x87, 0x3b, 0xf6, 0xc3, 0xf6, 0x34, 0xa7, 0x0f, 0x9b,
	0x4d, 0xe8, 0xb7, 0x01, 0xb1, 0x60, 0xa9, 0x2a, 0xac, 0x1a, 0x33, 0x0c, 0x83, 0x17, 0xec, 0xb5,
	0x5e, 0x57, 0x59, 0xe9, 0xcf, 0x69, 0x51, 0x3e, 0x11, 0x5a, 0xe5, 0xc6, 0xeb, 0x89, 0x51, 0x48,
	0x7a, 0x02, 0x85, 0x38, 0x0c, 0xfd, 0xdd, 0x13, 0xd3, 0xf4, 0x94, 0x59, 0x8f, 0xab, 0x7b, 0x5d,
	0x05, 0xf5, 0x33, 0x1e, 0x65, 0xa6, 0x50, 0xb2, 0xa3, 0x8a, 0x81, 0x2c, 0x28, 0xf1, 0xae, 0x78,
	0x52, 0xfe, 0xd9, 0xe0, 0xa4, 0xfc, 0x4a, 0xaf, 0xab, 0x2c, 0x0d, 0x98, 0x60, 0x90, 0x6f, 0x7f,
	0xbd, 0xdf, 0x13, 0x8a, 0x1e, 0x13, 0x31, 0x8c, 0xf5, 0x46, 0xe6, 0xf4, 0xb1, 0x10, 0x56, 0xc4,
	0x79, 0x8d, 0x0c, 0x2b, 0x44, 0xde, 0x15, 0x43, 0xfd, 0xcf, 0x09, 0x28, 0x8a, 0xef, 0xff, 0xf3,
	0x6d, 0x71, 0xd3, 0xb2, 0x5e, 0x49, 0x9b, 0x8a, 0xf7, 0x61, 0x53, 0x23, 0x13, 0xd9, 0x88, 0x99,
	0xc8, 0x14, 0x5b, 0xd5, 0x3c, 0xb0, 0xad, 0x7a, 0x09, 0x4a, 0x4d, 0xcb, 0xa9, 0xe9, 0x56, 0x20,
	0x7e, 0xac, 0xfe, 0xa6, 0xc8, 0x80, 0x5c, 0x6a, 0x02, 0x83, 0x66, 0x0a, 0x06, 0x6d, 0x15, 0x26,
	0x88, 0x6e, 0x84, 0x56, 0xac, 0x7f, 0xd7, 0x1f, 0xe2, 0x6c, 0x52, 0xca, 0xe1, 0xbe, 0xf2, 0x47,
	0xbf, 0x14, 0x5f, 0x79, 0x1d, 0x26, 0xb9, 0x01, 0x3b, 0xbc, 0xf1, 0x0a, 0x38, 0xa9, 0x7f, 0x91,
	0x83, 0x1c, 0x5f, 0xa9, 0xff, 0x4f, 0x19, 0xda, 0x2b, 0x61, 0xb6, 0x15, 0x53, 0xb1, 0x3a, 0xd5,
	0x6f, 0x91, 0x92, 0xe9, 0xd6, 0x6f, 0x00, 0x6c, 0x9b, 0x9e, 0x59, 0x33, 0x2d, 0xd3, 0xdf, 0xa5,
	0xe2, 0x3a, 0x1d, 0xcf, 0xb4, 0x71, 0xb2, 0x87, 0x21, 0x92, 0x26, 0x10, 0xa0, 0x35, 0x28, 0x8a,
	0xe7, 0x6f, 0x5c, 0x9c, 0x95, 0xb4, 0x7e, 0x05, 0x34, 0x2d, 0x46, 0x84, 0x9e, 0x87, 0x82, 0xe9,
	0x55, 0x99, 0xfc, 0x72, 0x69, 0xce, 0x9b, 0xde, 0x2d, 0xda, 0x4e, 0x95, 0xe4, 0x33, 0x00, 0xa6,
	0x57, 0xf5, 0xb1, 0xe7, 0x9b, 0x76, 0x93, 0xfa, 0x05, 0x79, 0xad, 0x60, 0x7a, 0x0f, 0x18, 0xe0,
	0x28, 0x04, 0x5d, 0x08, 0x90, 0x3f, 0x3a, 0x4c, 0x80, 0xac, 0x5e, 0x0d, 0x13, 0x8d, 0xb3, 0x50,
	0xe2, 0x89, 0x46, 0x06, 0x90, 0x9e, 0x43, 0x53, 0x30, 0xc9, 0xcf, 0xd7, 0xa4, 0x0c, 0x6b, 0xd0,
	0xe3, 0x31, 0x69, 0x4c, 0x7d, 0x0b, 0x20, 0x5a, 0x71, 0xb4, 0x00, 0xb3, 0x9c, 0x34, 0x02, 0x32,
	0xf2, 0xfb, 0xae, 0xb9, 0xad, 0xfb, 0x3c, 0x5d, 0xb9, 0x61, 0x5b, 0xa6, 0x47, 0x98, 0x8d, 0x91,
	0x10, 0xec, 0x7e, 0xa7, 0x66, 0x99, 0x75, 0x69, 0x5c, 0xbd, 0x0e, 0x45, 0x71, 0xf1, 0xd1, 0x49,
	0x98, 0x0b, 0x06, 0x22, 0x80, 0xa5, 0xe7, 0x50, 0x1e, 0xb2, 0xf7, 0xda, 0xd8, 0x96, 0x32, 0x24,
	0x98, 0x5b, 0xb3, 0x58, 0x49, 0xc1, 0x77, 0x01, 0xb2, 0x64, 0xcd, 0x3e, 0xdf, 0x3b, 0x43, 0x4c,
	0x44, 0x8d, 0x84, 0x88, 0xa6, 0x98, 0x75, 0xfc, 0x8b, 0xb8, 0xa0, 0x75, 0xdd, 0xdb, 0xa4, 0x2a,
	0x38, 0xae, 0xd1, 0xdf, 0xc4, 0xcb, 0xf7, 0xea, 0x8e, 0xcb, 0x8a, 0x2f, 0xc7, 0x35, 0xd6, 0x40,
	0x0a, 0x4c, 0x35, 0x1d, 0xcb, 0xa8, 0xb6, 0xb0, 0xa1, 0x5b, 0x1e, 0x55, 0x98, 0x71, 0x0d, 0x08,
	0xe8, 0x6d, 0x0a, 0xa1, 0x87, 0x9f, 0xa6, 0xb5, 0x8d, 0xdd, 0x00, 0x85, 0x1d, 0x6c, 0x16, 0x19,
	0x30, 0x42, 0xaa, 0xb9, 0x8e, 0xfd, 0x21, 0x0e, 0x90, 0xd8, 0xb1, 0x66, 0x91, 0x01, 0x39, 0xd2,
	0x39, 0x98, 0xb1, 0x6b, 0xd5, 0x58, 0x86, 0x87, 0x16, 0xbe, 0x69, 0xd3, 0x76, 0x6d, 0x55, 0xcc,
	0xd7, 0xa4, 0x39, 0xd0, 0x51, 0xd5, 0xc2, 0x93, 0xc3, 0x57, 0x2d, 0x78, 0x62, 0xd5, 0x02, 0x0f,
	0x7c, 0x37, 0x12, 0x55, 0x0b, 0x37, 0x0f, 0x52, 0xb5, 0x40, 0xdd, 0x44, 0xce, 0x52, 0xf4, 0x69,
	0xc5, 0x82, 0x85, 0x5f, 0x49, 0xda, 0xf8, 0x7b, 0x99, 0x81, 0x79, 0xe3, 0x6f, 0xa7, 0xe6, 0x8d,
	0x8f, 0x68, 0x9a, 0x89, 0x0c, 0x33, 0xea, 0xc0, 0xc9, 0x28, 0x91, 0x14, 0xaf, 0xd3, 0x78, 0x76,
	0x04, 0x75, 0x1a, 0x27, 0xea, 0x69, 0x04, 0x1e, 0xba, 0x13, 0xed, 0xef, 0x1f, 0xff, 0xa2, 0xd1,
	0x55, 0xc0, 0xa1, 0x2f, 0x1d, 0xf9, 0xc9, 0xd1, 0xa4, 0x23, 0xd5, 0x9f, 0x4c, 0xc2, 0x74, 0xdc,
	0x31, 0x39, 0xb6, 0xe6, 0x50, 0x86, 0x49, 0xaf, 0x53, 0xaf, 0x63, 0xcf, 0xe3, 0x76, 0x2c, 0x68,
	0xa6, 0x1e, 0xe1, 0xfc, 0x56, 0x58, 0x17, 0x3e, 0x30, 0x69, 0x75, 0xa9, 0xd7, 0x55, 0x2e, 0xa4,
	0x8a, 0xa4, 0x18, 0xf1, 0x50, 0x26, 0x54, 0xa1, 0x79, 0x65, 0x79, 0x85, 0x1d, 0x21, 0xc6, 0xaa,
	0xa9, 0x68, 0x29, 0x40, 0x80, 0x3a, 0xb2, 0x14, 0x80, 0x91, 0x57, 0x0c, 0x84, 0x61, 0x8a, 0xb3,
	0x1a, 0x9e, 0xd4, 0xa2, 0x05, 0xdf, 0xfb, 0x1b, 0x69, 0x90, 0xe9, 0x02, 0x3d, 0x6c, 0xa2, 0x87,
	0x30, 0x2d, 0x74, 0x23, 0xa8, 0xe9, 0xe5, 0xbd, 0xae, 0x52, 0x14, 0xe9, 0x46, 0x0d, 0xbd, 0x18,
	0x71, 0x65, 0xc3, 0xf7, 0x75, 0xb7, 0x89, 0xfd, 0x2a, 0xcd, 0x0e, 0x3e, 0x1d, 0xb4, 0xd0, 0xfb,
	0x1a, 0xfe, 0x03, 0xca, 0x29, 0x48, 0x19, 0x82, 0x1f, 0x36, 0xc9, 0xf0, 0x85, 0x6e, 0xc8, 0xf0,
	0x9f, 0x09, 0xc3, 0x17, 0xe9, 0x46, 0x0e, 0x3f, 0xe2, 0x1a, 0x1b, 0x3e, 0x5d, 0xfd, 0x8f, 0x0f,
	0xb5, 0xfa, 0x6c, 0x18, 0xe1, 0xea, 0xfb, 0x61, 0x53, 0x18, 0x7e, 0xb0, 0xfa, 0x9f, 0xf4, 0x0d,
	0x7f, 0x9f, 0xab, 0x1f, 0x71, 0xad, 0x18, 0xea, 0x1f, 0xe6, 0x61, 0x2e, 0x25, 0x2d, 0x7e, 0x6c,
	0xf5, 0xfb, 0x8d, 0x44, 0xc9, 0xd8, 0xcb, 0x23, 0xf2, 0xff, 0xc9, 0x80, 0xe0, 0xcb, 0xa1, 0x94,
	0xd7, 0x9d, 0x16, 0xb1, 0x7e, 0xdc, 0x1e, 0x94, 0x18, 0x74, 0x8d, 0x01, 0xd1, 0x45, 0x98, 0xad,
	0x3b, 0xae, 0x8b, 0xeb, 0xbe, 0x80, 0xc9, 0xa2, 0x5d, 0x29, 0x7c, 0x10, 0x20, 0x27, 0x0a, 0xce,
	0x99, 0x2b, 0x1f, 0x2b, 0x38, 0x0f, 0x6c, 0xcf, 0x07, 0x82, 0xed, 0xf9, 0x83, 0x0c, 0x9c, 0x48,
	0xdf, 0x91, 0x02, 0x63, 0xb4, 0x8f, 0x0d, 0x89, 0x5a, 0xa7, 0xc1, 0x55, 0xd8, 0x22, 0x2e, 0x91,
	0xb8, 0x85, 0xd4, 0x5d, 0x0a, 0xed, 0xc0, 0xa9, 0xf4, 0x91, 0x08, 0xc6, 0xeb, 0xda, 0x5e, 0x57,
	0x39, 0x39, 0x80, 0xf1, 0x28, 0x91, 0x3c, 0x99, 0xda, 0x6d, 0xc5, 0x40, 0x95, 0xd0, 0xfe, 0xfe,
	0x60, 0x90, 0x59, 0x48, 0xf7, 0xa0, 0x46, 0x18, 0xdc, 0x1f, 0x1e, 0xca, 0xe0, 0x06, 0xc7, 0x07,
	0x4f, 0x8f, 0xe8, 0xf8, 0xe0, 0xd9, 0x2f, 0x7a, 0x7c, 0xa0, 0x6a, 0xe9, 0x75, 0x1c, 0x61, 0x79,
	0xd6, 0xb6, 0x49, 0x4b, 0xba, 0x8a, 0x90, 0x0f, 0x4a, 0xba, 0x58, 0x2d, 0x87, 0x86, 0x1b, 0x1d,
	0x0f, 0x1b, 0xd2, 0x38, 0x92, 0x80, 0x98, 0x6e, 0x27, 0x7c, 0x9c, 0x55, 0xff, 0xba, 0x00, 0x0b,
	0xa9, 0xef, 0xf1, 0xd8, 0xda, 0x84, 0x6f, 0x26, 0x6c, 0xc2, 0xf9, 0x91, 0x7a, 0x93, 0xb4, 0x0a,
	0xab, 0x50, 0xa8, 0x93, 0x80, 0xf0, 0xc0, 0x45, 0xa4, 0x79, 0x46, 0x26, 0xd4, 0x73, 0x27, 0xce,
	0xe6, 0xa9, 0x20, 0x3d, 0x39, 0x8c, 0x20, 0x19, 0x91, 0x20, 0x71, 0x55, 0x7c, 0x2b, 0x26, 0x48,
	0xd7, 0x53, 0x05, 0x69, 0xa8, 0xa7, 0x1c, 0xaa, 0x63, 0x74, 0x50, 0xd5, 0x06, 0x29, 0xf9, 0x30,
	0xb5, 0x34, 0x32, 0x79, 0x23, 0xe2, 0x5c, 0xaf, 0xab, 0xbc, 0x34, 0x20, 0xc0, 0x11, 0x2f, 0x83,
	0x68, 0x33, 0x89, 0x9b, 0x0e, 0xe8, 0xf7, 0x32, 0x30, 0x97, 0xec, 0x52, 0xd0, 0x5d, 0x12, 0xfd,
	0xcc, 0xf6, 0xf1, 0x39, 0xf4, 0x7c, 0x67, 0x13, 0xc3, 0xa8, 0x18, 0xe8, 0x4d, 0x98, 0xa8, 0x75,
	0x76, 0x87, 0xb9, 0x26, 0xe9, 0xb5, 0xa9, 0x65, 0x42, 0x44, 0x6b, 0x53, 0x29, 0x39, 0x7a, 0x13,
	0xf2, 0xf4, 0x87, 0xa0, 0xf2, 0xb4, 0x36, 0x95, 0xe3, 0x8d, 0xac, 0x4d, 0xa5, 0xc4, 0xcc, 0x28,
	0x52, 0xa9, 0x72, 0x53, 0x9d, 0x8d, 0x21, 0x46, 0x91, 0xe6, 0x34, 0x98, 0x51, 0x64, 0x0c, 0xd0,
	0x4d, 0x2e, 0xd7, 0xae, 0xe0, 0x50, 0x9c, 0x23, 0x46, 0x31, 0x40, 0xed, 0x75, 0x95, 0x93, 0x6c,
	0x50, 0x29, 0x06, 0x91, 0x91, 0x56, 0x0c, 0xf4, 0x3e, 0x4c, 0x89, 0x47, 0xef, 0x9f, 0x1e, 0xfa,
	0xe8, 0x5d, 0x64, 0xa7, 0x5e, 0x1a, 0x5d, 0xac, 0x06, 0x90, 0xa3, 0x23, 0x36, 0xa4, 0x31, 0xf5,
	0xaf, 0xc6, 0xa1, 0x14, 0x2b, 0x22, 0x38, 0xb6, 0x76, 0x6b, 0x05, 0xb2, 0xa6, 0x8f, 0x5b, 0xdc,
	0x6a, 0x9d, 0x1d, 0x58, 0x25, 0xb1, 0x44, 0xfe, 0xd3, 0x28, 0x6e, 0x6a, 0x14, 0x73, 0x17, 0x26,
	0x9c, 0x1d, 0x3b, 0x3a, 0x79, 0x1f, 0x14, 0x61, 0xa6, 0x8b, 0x31, 0x2d, 0x6b, 0xa0, 0x62, 0x4c,
	0x99, 0x10, 0x31, 0xa6, 0x3f, 0x92, 0x25, 0xd6, 0x1c, 0x6f, 0xa4, 0x18, 0x53, 0xe2, 0x8a, 0xa1,
	0xce, 0x41, 0x96, 0xbe, 0x1d, 0xf1, 0xa5, 0xaa, 0x3f, 0x1f, 0x87, 0xa2, 0x78, 0xec, 0x77, 0x6c,
	0xdf, 0xdd, 0x37, 0x60, 0xd2, 0xc5, 0x3a, 0xe5, 0x60, 0x1c, 0x80, 0x43, 0x8e, 0x10, 0xad, 0xfa,
	0xe8, 0x02, 0x51, 0x4c, 0xb3, 0xbe, 0x25, 0x9c, 0xb9, 0x14, 0x99, 0x5e, 0x9a, 0xf5, 0xad, 0x0d,
	0xed, 0x2e, 0x51, 0x3e, 0xf2, 0xcb, 0xb5, 0x90, 0x04, 0xe3, 0x2d, 0x2f, 0xd8, 0x57, 0xc8, 0x4f,
	0x56, 0x2a, 0xdc, 0xf4, 0xf8, 0x9d, 0x65, 0xfa, 0xfb, 0xd7, 0xa7, 0xf8, 0x42, 0xfd, 0xd3, 0x2c,
	0xe4, 0x58, 0x02, 0xf9, 0xd8, 0xbe, 0xdc, 0x8b, 0x90, 0xdd, 0xd4, 0xbd, 0x4d, 0x76, 0xf8, 0x30,
	0xe4, 0x0a, 0xea, 0x26, 0xcf, 0x62, 0x6e, 0xeb, 0x56, 0x07, 0xf3, 0xbb, 0x5a, 0xac, 0x81, 0x96,
	0x61, 0xbe, 0xa5, 0x3f, 0xae, 0xf6, 0xdd, 0xae, 0x60, 0xf9, 0x4f, 0xd4, 0xd2, 0x1f, 0x3f, 0x4c,
	0x5c, 0xb0, 0x38, 0xd2, 0x7c, 0xe2, 0xb5, 0x94, 0x7c, 0xe2, 0x0b, 0x89, 0x7c, 0x62, 0x31, 0x6e,
	0xed, 0xc3, 0xb4, 0xe0, 0xb7, 0xe2, 0xd6, 0x9e, 0x1f, 0x4b, 0xbd, 0xd0, 0x7f, 0x40, 0x70, 0x70,
	0x53, 0xff, 0xe7, 0x13, 0x20, 0x25, 0x69, 0x8f, 0x73, 0xaa, 0x29, 0x88, 0x0c, 0xf9, 0x35, 0x70,
	0xde, 0x14, 0xc2, 0x9a, 0x27, 0x47, 0x1a, 0xd6, 0x7c, 0x74, 0x24, 0x61, 0xcd, 0xff, 0x7d, 0x55,
	0xd4, 0x1d, 0xc8, 0xb1, 0x03, 0xa4, 0xc0, 0xe5, 0x4a, 0x3b, 0x7d, 0x1a, 0xe0, 0xe3, 0xd0, 0x87,
	0xcc, 0xc7, 0x61, 0x46, 0xa6, 0x02, 0x05, 0xf6, 0x4b, 0xf0, 0xbb, 0xe8, 0x0a, 0x05, 0xa8, 0x23,
	0x57, 0x88, 0x91, 0x57, 0x0c, 0xf5, 0xc7, 0x45, 0x98, 0x12, 0xf2, 0xa7, 0xc7, 0x56, 0x32, 0x97,
	0x21, 0xeb, 0xef, 0xb6, 0x83, 0xc2, 0xe2, 0x17, 0x06, 0xa4, 0x87, 0x97, 0x1e, 0xec, 0xb6, 0xb1,
	0x46, 0x31, 0xe3, 0x07, 0x40, 0x38, 0x71, 0x00, 0x24, 0x08, 0x7a, 0x23, 0x2e, 0xe8, 0xa7, 0x21,
	0xaf, 0xbb, 0xcd, 0x0e, 0x7d, 0xd4, 0xe4, 0xf7, 0x24, 0x78, 0x3b, 0xf4, 0x54, 0x36, 0x05, 0x4f,
	0xe5, 0x0b, 0xc5, 0x18, 0xae, 0x18, 0xbf, 0x93, 0x81, 0xf9, 0xb4, 0x72, 0xd7, 0x40, 0x4f, 0x46,
	0xba, 0xdc, 0x17, 0x7b, 0x5d, 0xe5, 0xdc, 0xe0, 0x7c, 0x50, 0x84, 0x49, 0x06, 0x3e, 0x97, 0x52,
	0x00, 0x8b, 0x1e, 0x89, 0xe7, 0x24, 0xc2, 0xf6, 0x15, 0x29, 0xd7, 0xd7, 0xf6, 0xba, 0xca, 0x42,
	0x2a, 0xcb, 0x51, 0xd3, 0x5c, 0x48, 0xe9, 0xb0, 0x62, 0xa8, 0x3f, 0x9d, 0x80, 0x2c, 0x91, 0xc5,
	0x64, 0xcd, 0xed, 0x2c, 0x94, 0xca, 0x9d, 0xdd, 0x2b, 0x61, 0x57, 0x52, 0x06, 0x21, 0x98, 0x2e,
	0x77, 0x76, 0xaf, 0x46, 0xf7, 0xe5, 0xa5, 0x31, 0x34, 0x07, 0x33, 0x04, 0x6d, 0x59, 0x00, 0x8e,
	0x73, 0xe0, 0x8a, 0x08, 0xcc, 0x72, 0xe0, 0x55, 0x11, 0x38, 0x81, 0x4e, 0x00, 0xe2, 0xa3, 0xc1,
	0x42, 0x57, 0x80, 0x4e, 0xc2, 0x5c, 0x00, 0x17, 0xfb, 0x9b, 0x42, 0x32, 0xcc, 0x87, 0x04, 0x22,
	0xab, 0xa2, 0xf8, 0x24, 0xd6, 0x73, 0x49, 0x7c, 0x12, 0xeb, 0x7e, 0x9a, 0x8c, 0x29, 0xea, 0x9e,
	0x1a, 0x22, 0x69, 0x1e, 0xcd, 0x83, 0x14, 0xf5, 0xcd, 0x8e, 0xda, 0xa5, 0x05, 0xb4, 0x00, 0xb3,
	0x42, 0xc7, 0x1c, 0x7c, 0x42, 0x04, 0xaf, 0x84, 0xe0, 0x93, 0x22, 0xf8, 0x6a, 0x08, 0x96, 0x63,
	0xd3, 0x5d, 0x0e, 0xe1, 0xa7, 0x48, 0x97, 0x4c, 0x73, 0x84, 0x45, 0x38, 0x4b, 0x98, 0x30, 0xe8,
	0x8a, 0x30, 0x68, 0x25, 0x02, 0x8b, 0x2b, 0xb3, 0x48, 0x78, 0x73, 0x1e, 0xe2, 0x1c, 0x5f, 0x24,
	0xf0, 0x9b, 0xba, 0x6b, 0xed, 0xae, 0x1a, 0x4e, 0xdb, 0xc7, 0xee, 0x03, 0xa7, 0x7d, 0x65, 0x79,
	0x59, 0x3a, 0x4f, 0x96, 0xb8, 0x1f, 0xbe, 0x2c, 0x5d, 0x40, 0x45, 0xc8, 0xdf, 0xb3, 0x8c, 0x2b,
	0xdf, 0xc2, 0xba, 0x2b, 0xad, 0x10, 0xb1, 0xb8, 0x67, 0x19, 0x2b, 0xa4, 0xe5, 0x49, 0x5f, 0x21,
	0x23, 0x5d, 0xc7, 0xb6, 0x71, 0xe5, 0x7e, 0xc7, 0xb2, 0xf8, 0xa5, 0x58, 0xe9, 0x3d, 0x32, 0x24,
	0x02, 0x5d, 0x11, 0xa0, 0x9e, 0xf4, 0xed, 0x00, 0x7c, 0x35, 0x06, 0x7e, 0x9f, 0x8c, 0x88, 0xf2,
	0x58, 0x26, 0x70, 0x37, 0x80, 0x7f, 0x07, 0x15, 0x60, 0x62, 0xdd, 0xd7, 0x1b, 0x0d, 0xc9, 0x40,
	0x33, 0x30, 0xb5, 0xe6, 0xd8, 0xbe, 0x6b, 0xd6, 0x3a, 0xbe, 0xe3, 0x4a, 0x54, 0x3a, 0xcb, 0x9d,
	0xe6, 0xed, 0x8e, 0xed, 0x63, 0x57, 0x6a, 0x90, 0xe6, 0xdb, 0x8e, 0x81, 0x5d, 0x9d, 0x3c, 0x6d,
	0x92, 0xf7, 0x78, 0x5b, 0xaf, 0x6f, 0x3d, 0xd8, 0xc4, 0xf7, 0x2d, 0xdd, 0x6f, 0x38, 0x6e, 0x4b,
	0xda, 0x54, 0xb3, 0xf9, 0x57, 0xa4, 0x57, 0xd4, 0x3f, 0x91, 0x21, 0x4f, 0x43, 0x59, 0xd3, 0xdf,
	0x3d, 0xb6, 0x7b, 0xca, 0x25, 0xc8, 0x6e, 0x99, 0xb6, 0xc1, 0xf7, 0x94, 0x53, 0xf1, 0x3d, 0x85,
	0xcd, 0x6d, 0xe9, 0x8e, 0x69, 0x1b, 0x1a, 0x45, 0xfb, 0xc2, 0xd2, 0x8f, 0xb0, 0xf4, 0x41, 0xbc,
	0xf6, 0xf4, 0x88, 0xe2, 0xb5, 0x67, 0x47, 0x76, 0x79, 0xec, 0xe3, 0x5f, 0xd1, 0xe5, 0xb1, 0x4f,
	0x8e, 0xea, 0xf2, 0x98, 0x10, 0x39, 0x7d, 0x7a, 0xf8, 0xc8, 0xa9, 0x22, 0x46, 0x4e, 0x3f, 0x12,
	0xa4, 0x6d, 0xbf, 0x35, 0xa8, 0x51, 0x20, 0xf5, 0xae, 0xf8, 0x35, 0x9d, 0xbf, 0x1d, 0xfa, 0x35,
	0x1d, 0xe1, 0x4b, 0x3f, 0x03, 0xbe, 0xa6, 0x23, 0x7e, 0x32, 0x47, 0x4b, 0x7c, 0x32, 0xe7, 0xef,
	0xd8, 0x30, 0x97, 0xfa, 0x3f, 0x99, 0x33, 0x74, 0xa4, 0xb1, 0x8f, 0xe2, 0xb4, 0x41, 0x4a, 0x7e,
	0xe3, 0x42, 0xfe, 0xf1, 0x3e, 0xee, 0xc6, 0xa7, 0x27, 0x80, 0x13, 0x58, 0x34, 0x01, 0x5c, 0x4f,
	0x7c, 0x50, 0x0c, 0x8b, 0xf7, 0x61, 0xa3, 0x7b, 0xf3, 0x7f, 0xcf, 0x26, 0xf3, 0xd5, 0xbd, 0xae,
	0x32, 0xdb, 0xc7, 0x66, 0xd4, 0x94, 0x66, 0x13, 0x9d, 0xc4, 0x82, 0x8d, 0x7f, 0x38, 0xe2, 0x60,
	0xe3, 0x1f, 0x0f, 0x13, 0x6c, 0xa4, 0x66, 0xdc, 0x7f, 0xf2, 0x4b, 0xcd, 0xb8, 0xe3, 0xf4, 0x84,
	0xfb, 0x3f, 0x09, 0x0b, 0x9e, 0x96, 0x70, 0x1f, 0xbe, 0xe0, 0xfd, 0xf9, 0xf4, 0xf7, 0x61, 0x4a,
	0xac, 0x91, 0xff, 0xe7, 0xe1, 0x49, 0x49, 0xb5, 0xd7, 0x55, 0xce, 0xa6, 0x5a, 0xdc, 0xa0, 0x88,
	0x5d, 0xd5, 0x20, 0xba, 0x5e, 0x40, 0x0f, 0xca, 0xe3, 0x25, 0xf0, 0xff, 0x22, 0x1e, 0x94, 0x1f,
	0xa0, 0xf8, 0xbd, 0xe8, 0x8b, 0x65, 0xef, 0x43, 0x8e, 0x63, 0xff, 0xf5, 0xd7, 0xe9, 0x38, 0xf6,
	0xa7, 0xbf, 0xc4, 0xe3, 0xd8, 0xc7, 0x80, 0xfa, 0x6f, 0xa8, 0xcb, 0x5d, 0x36, 0xfd, 0x11, 0x17,
	0xd4, 0x2f, 0xf4, 0xba, 0xca, 0x97, 0x87, 0x58, 0x30, 0x8e, 0x47, 0xa6, 0x3d, 0xdb, 0x77, 0x63,
	0x1d, 0x6d, 0x89, 0xd7, 0xfc, 0xc2, 0xef, 0x8c, 0x98, 0x86, 0xfc, 0x33, 0x36, 0xdd, 0xd7, 0xf6,
	0xba, 0xca, 0x5c, 0x0a, 0xb3, 0x51, 0x53, 0x9d, 0xeb, 0xeb, 0x8a, 0x5e, 0x0f, 0xe5, 0x5f, 0x23,
	0xf9, 0xf9, 0x11, 0x7e, 0x8d, 0xe4, 0xdf, 0x0e, 0xf1, 0x35, 0x92, 0x77, 0xb9, 0xc6, 0x98, 0xf4,
	0x16, 0xa1, 0xbc, 0x37, 0x70, 0x58, 0x83, 0x95, 0x85, 0x5d, 0x40, 0x0c, 0x95, 0x85, 0xdf, 0x47,
	0x0c, 0x94, 0x85, 0x31, 0x26, 0xc3, 0xfc, 0x2c, 0xa1, 0x2c, 0x01, 0xdd, 0xbe, 0x94, 0x85, 0x23,
	0x1b, 0xea, 0xdf, 0x8c, 0x41, 0x96, 0x38, 0x7b, 0xf1, 0x13, 0x1b, 0x09, 0x8a, 0xc4, 0xf5, 0x08,
	0x3e, 0xf4, 0x20, 0x65, 0x68, 0x40, 0xe7, 0x61, 0xf7, 0xae, 0xd3, 0x34, 0x6d, 0x69, 0x8c, 0x78,
	0xdd, 0xa4, 0xb9, 0x8e, 0xfd, 0xfb, 0x2e, 0x6e, 0x60, 0x17, 0xdb, 0x75, 0x1a, 0xac, 0x2d, 0xc0,
	0x2c, 0x81, 0xd3, 0x12, 0x52, 0xbc, 0x5a, 0xa7, 0x99, 0x52, 0x29, 0xcb, 0x9c, 0xf4, 0xb8, 0xf1,
	0xeb, 0xec, 0x4a, 0x13, 0xe8, 0x45, 0x38, 0x93, 0x2a, 0xf9, 0x41, 0x5c, 0x23, 0xe5, 0x48, 0x9c,
	0x18, 0xcb, 0x33, 0x62, 0x69, 0x92, 0x84, 0x93, 0x74, 0x15, 0xc3, 0xf1, 0xe5, 0xd1, 0x22, 0xbc,
	0x40, 0x41, 0x7d, 0x92, 0xb5, 0x46, 0x9d, 0x67, 0xa9, 0x30, 0x18, 0x63, 0x83, 0x7a, 0xc6, 0x12,
	0x90, 0x59, 0x93, 0x85, 0xa4, 0x14, 0xa6, 0x63, 0x4b, 0x53, 0xa4, 0xf3, 0x68, 0x69, 0x49, 0x98,
	0x21, 0x15, 0x49, 0xd0, 0x12, 0xc1, 0xd8, 0x69, 0xbc, 0x54, 0x52, 0x9f, 0x15, 0x20, 0x7b, 0xa3,
	0xd3, 0x6a, 0xa3, 0xd7, 0x13, 0x95, 0x7d, 0xc3, 0x0b, 0xfb, 0x12, 0xb7, 0x89, 0xaf, 0x02, 0x08,
	0xdf, 0xb1, 0x1b, 0xa3, 0xa4, 0xe9, 0x7e, 0x86, 0x26, 0x20, 0xa2, 0xdb, 0x30, 0x9b, 0xdc, 0x7f,
	0x3d, 0x79, 0x7c, 0xe4, 0x87, 0x45, 0x35, 0x29, 0xb1, 0xc7, 0x7a, 0xe8, 0x9d, 0xf4, 0x2f, 0x5b,
	0x64, 0xf7, 0xf1, 0x61, 0x8b, 0xb4, 0xcf, 0x57, 0xa0, 0xf7, 0x06, 0xd7, 0x6a, 0x4e, 0xec, 0xb3,
	0x54, 0x73, 0x60, 0x41, 0xe6, 0x83, 0x41, 0x17, 0x8a, 0x73, 0xfb, 0x3a, 0xd4, 0x4c, 0xbf, 0x35,
	0x8c, 0x5e, 0x8d, 0x0a, 0xea, 0x27, 0x07, 0xd5, 0xd3, 0x47, 0xd7, 0xca, 0xef, 0x00, 0xe2, 0x5e,
	0x84, 0x38, 0x80, 0xfc, 0xe8, 0x3c, 0xbb, 0x36, 0x5b, 0x4f, 0x40, 0x3c, 0x74, 0x01, 0x72, 0xd4,
	0x8e, 0x78, 0x72, 0x81, 0x32, 0xe8, 0x37, 0x1b, 0x1a, 0x47, 0x40, 0x65, 0x98, 0x31, 0x83, 0x83,
	0xc5, 0x2a, 0xbb, 0xa2, 0x0d, 0x23, 0x6e, 0x68, 0x6b, 0xd3, 0xa6, 0xd8, 0xf4, 0xd0, 0x1b, 0xc9,
	0x9b, 0x7d, 0x53, 0xc3, 0x2f, 0xf6, 0x25, 0xaf, 0xef, 0xbd, 0x01, 0x25, 0xd1, 0x7d, 0xf7, 0xe4,
	0x62, 0x3f, 0xbd, 0x18, 0x0e, 0x68, 0x71, 0x74, 0xf4, 0x9b, 0x30, 0x9f, 0x76, 0xfd, 0x4f, 0x2e,
	0xed, 0xe7, 0xf2, 0x8c, 0x36, 0x97, 0x72, 0xbf, 0x8f, 0xbc, 0x3c, 0xe6, 0xc5, 0x78, 0xf2, 0x74,
	0xff, 0xcb, 0x63, 0x26, 0x48, 0x0b, 0x50, 0x88, 0xda, 0xf4, 0x7f, 0x3c, 0x72, 0x66, 0xe4, 0xb7,
	0x23, 0x53, 0x3e, 0xf5, 0xf8, 0x72, 0x70, 0x91, 0x43, 0x4a, 0xbf, 0xc7, 0x11, 0xdc, 0xd6, 0xf8,
	0x3a, 0x14, 0xc5, 0xab, 0x9a, 0xf2, 0xec, 0xb0, 0x3a, 0x62, 0x6d, 0x4a, 0xb8, 0x8b, 0x49, 0xba,
	0x20, 0x61, 0x9e, 0x27, 0xa3, 0xfe, 0x2e, 0xa8, 0xad, 0x66, 0x8f, 0xd1, 0x4d, 0x90, 0xfa, 0x2e,
	0x3c, 0xcd, 0x8d, 0xba, 0xef, 0xa4, 0xcd, 0xec, 0xc4, 0x6f, 0x33, 0xa9, 0xbf, 0x9b, 0x81, 0x6c,
	0xc5, 0x6e, 0x38, 0xe8, 0x0d, 0x00, 0x5f, 0xaf, 0x59, 0xb8, 0xea, 0x3a, 0x3b, 0x81, 0x35, 0x53,
	0xe2, 0x42, 0xd6, 0x70, 0x96, 0x1e, 0x10, 0x14, 0xcd, 0xd9, 0xf1, 0x6e, 0xda, 0xbe, 0xbb, 0xab,
	0x15, 0xfc, 0xa0, 0x7d, 0xfa, 0x3a, 0x4c, 0xc7, 0x1f, 0x22, 0x09, 0xc6, 0xb7, 0x70, 0xf0, 0xe9,
	0x49, 0xf2, 0x33, 0x3a, 0x78, 0x1b, 0x5b, 0xcc, 0x9c, 0x2f, 0xf1, 0x83, 0xb7, 0x6b, 0x63, 0x5f,
	0xcb, 0xa8, 0x5f, 0x85, 0x02, 0x15, 0x7c, 0xfa, 0x15, 0xd6, 0x73, 0xc1, 0xd7, 0x08, 0x32, 0x83,
	0xd4, 0x83, 0x3d, 0x57, 0xaf, 0x43, 0x29, 0x7c, 0x39, 0x94, 0xf2, 0x62, 0x9c, 0x72, 0x80, 0x49,
	0xe5, 0xd4, 0xb7, 0x61, 0x2e, 0xf1, 0xc6, 0x29, 0x8f, 0x2b, 0x71, 0x1e, 0x43, 0x25, 0x84, 0x73,
	0x5a, 0x81, 0x3c, 0xdd, 0x34, 0x09, 0xf9, 0xcb, 0x71, 0xf2, 0x94, 0xf7, 0xc7, 0x68, 0xca, 0x20,
	0x89, 0xd2, 0x4e, 0x69, 0x97, 0xe2, 0xb4, 0x83, 0x35, 0x8c, 0xf3, 0x78, 0x0d, 0x80, 0x8d, 0x88,
	0x52, 0x9f, 0x8f, 0x53, 0xa7, 0xa9, 0x44, 0x34, 0x5e, 0x22, 0x7e, 0x23, 0xc7, 0xcb, 0x44, 0x9a,
	0xd1, 0x5c, 0x83, 0x62, 0x90, 0x35, 0xa2, 0x74, 0xaf, 0xc4, 0xe9, 0xe6, 0xd3, 0xd2, 0x4b, 0x9c,
	0xf6, 0x95, 0xdb, 0x30, 0x1d, 0xbf, 0x6c, 0x32, 0xb8, 0x6e, 0xa4, 0x04, 0x85, 0xf0, 0xb3, 0x79,
	0xd2, 0x18, 0x9a, 0x06, 0x58, 0xb5, 0x1d, 0x7b, 0xb7, 0x65, 0x7e, 0x88, 0x0d, 0x69, 0xbc, 0xbc,
	0xf2, 0x64, 0xef, 0x6c, 0xe6, 0xd3, 0xbd, 0xb3, 0x99, 0x9f, 0xef, 0x9d, 0xcd, 0x7c, 0xff, 0xb3,
	0xb3, 0xcf, 0x7d, 0xfa, 0xd9, 0xd9, 0xe7, 0x7e, 0xf2, 0xd9, 0xd9, 0xe7, 0xde, 0x93, 0x83, 0xfe,
	0x2d, 0xdd, 0x36, 0x2e, 0x37, 0x9d, 0xcb, 0xed, 0xad, 0xe6, 0xe5, 0xf6, 0x8e, 0x51, 0xab, 0xe5,
	0x68, 0xc2, 0xec, 0x2b, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x09, 0x68, 0xf9, 0xfb, 0x09, 0x5e,
	0x00, 0x00,
}

func (m *Challenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Challenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Challenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Flavors) > 0 {
		for iNdEx := len(m.Flavors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Flavors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xda
	}
	if len(m.Homepage) > 0 {
		i -= len(m.Homepage)
		copy(dAtA[i:], m.Homepage)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Homepage)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd2
	}
	if len(m.PreviewURL) > 0 {
		i -= len(m.PreviewURL)
		copy(dAtA[i:], m.PreviewURL)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.PreviewURL)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	if m.IsDraft {
		i--
		if m.IsDraft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc0
	}
	if len(m.Locale) > 0 {
		i -= len(m.Locale)
		copy(dAtA[i:], m.Locale)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Locale)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	if len(m.Author) > 0 {
		i -= len(m.Author)
		copy(dAtA[i:], m.Author)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Author)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.UpdatedAt != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintPwdb(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintPwdb(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeFlavor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeFlavor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeFlavor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Instances) > 0 {
		for iNdEx := len(m.Instances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Instances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xda
		}
	}
	if len(m.SeasonChallenges) > 0 {
		for iNdEx := len(m.SeasonChallenges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SeasonChallenges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xd2
		}
	}
	if m.ChallengeID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ChallengeID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.Challenge != nil {
		{
			size, err := m.Challenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if len(m.RedumpPolicyConfig) > 0 {
		i -= len(m.RedumpPolicyConfig)
		copy(dAtA[i:], m.RedumpPolicyConfig)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.RedumpPolicyConfig)))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xa2
	}
	if len(m.RedumpPolicy) > 0 {
		for iNdEx := len(m.RedumpPolicy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RedumpPolicy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.TagList) > 0 {
		i -= len(m.TagList)
		copy(dAtA[i:], m.TagList)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.TagList)))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x92
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintPwdb(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x7
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x82
	}
	if m.Passphrases != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Passphrases))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xf8
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xf2
	}
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xea
	}
	if m.ValidationReward != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ValidationReward))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xe0
	}
	if m.PurchasePrice != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.PurchasePrice))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd8
	}
	if m.Driver != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Driver))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd0
	}
	if len(m.ComposeBundle) > 0 {
		i -= len(m.ComposeBundle)
		copy(dAtA[i:], m.ComposeBundle)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.ComposeBundle)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	if len(m.SourceURL) > 0 {
		i -= len(m.SourceURL)
		copy(dAtA[i:], m.SourceURL)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.SourceURL)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.UpdatedAt != nil {
		n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintPwdb(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintPwdb(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeFlavor_RedumpPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeFlavor_RedumpPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeFlavor_RedumpPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Delay) > 0 {
		i -= len(m.Delay)
		copy(dAtA[i:], m.Delay)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Delay)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Strategy) > 0 {
		i -= len(m.Strategy)
		copy(dAtA[i:], m.Strategy)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Strategy)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SeasonChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subscriptions) > 0 {
		for iNdEx := len(m.Subscriptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subscriptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xe2
		}
	}
	if m.SeasonID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.Season != nil {
		{
			size, err := m.Season.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.FlavorID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.FlavorID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.Flavor != nil {
		{
			size, err := m.Flavor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if m.NbValidations != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.NbValidations))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa8
	}
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.UpdatedAt != nil {
		n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err8 != nil {
			return 0, err8
		}
		i -= n8
		i = encodeVarintPwdb(dAtA, i, uint64(n8))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err9 != nil {
			return 0, err9
		}
		i -= n9
		i = encodeVarintPwdb(dAtA, i, uint64(n9))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeInstance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeInstance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeInstance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NginxURL) > 0 {
		i -= len(m.NginxURL)
		copy(dAtA[i:], m.NginxURL)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.NginxURL)))
		i--
		dAtA[i] = 0xf
		i--
		dAtA[i] = 0xd2
	}
	if m.FlavorID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.FlavorID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.Flavor != nil {
		{
			size, err := m.Flavor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.AgentID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.AgentID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.Agent != nil {
		{
			size, err := m.Agent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xe2
	}
	if len(m.InstanceConfig) > 0 {
		i -= len(m.InstanceConfig)
		copy(dAtA[i:], m.InstanceConfig)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.InstanceConfig)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xda
	}
	if m.ValidationCount != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ValidationCount))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd0
	}
	if m.RedumpCount != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.RedumpCount))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc8
	}
	if len(m.StartupError) > 0 {
		i -= len(m.StartupError)
		copy(dAtA[i:], m.StartupError)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.StartupError)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc2
	}
	if m.LastRedumpRequestedAt != nil {
		n12, err12 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastRedumpRequestedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastRedumpRequestedAt):])
		if err12 != nil {
			return 0, err12
		}
		i -= n12
		i = encodeVarintPwdb(dAtA, i, uint64(n12))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	if m.LastStoppedAt != nil {
		n13, err13 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastStoppedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastStoppedAt):])
		if err13 != nil {
			return 0, err13
		}
		i -= n13
		i = encodeVarintPwdb(dAtA, i, uint64(n13))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if m.LastStartedAt != nil {
		n14, err14 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastStartedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastStartedAt):])
		if err14 != nil {
			return 0, err14
		}
		i -= n14
		i = encodeVarintPwdb(dAtA, i, uint64(n14))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.Status != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.UpdatedAt != nil {
		n15, err15 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err15 != nil {
			return 0, err15
		}
		i -= n15
		i = encodeVarintPwdb(dAtA, i, uint64(n15))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n16, err16 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err16 != nil {
			return 0, err16
		}
		i -= n16
		i = encodeVarintPwdb(dAtA, i, uint64(n16))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Agent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Agent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Agent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChallengeInstances) > 0 {
		for iNdEx := len(m.ChallengeInstances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengeInstances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xaa
	}
	if m.DefaultAgent {
		i--
		if m.DefaultAgent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xa0
	}
	if len(m.AuthSalt) > 0 {
		i -= len(m.AuthSalt)
		copy(dAtA[i:], m.AuthSalt)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.AuthSalt)))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x9a
	}
	if m.LastSeenAt != nil {
		n17, err17 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastSeenAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastSeenAt):])
		if err17 != nil {
			return 0, err17
		}
		i -= n17
		i = encodeVarintPwdb(dAtA, i, uint64(n17))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x92
	}
	if m.LastRegistrationAt != nil {
		n18, err18 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastRegistrationAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastRegistrationAt):])
		if err18 != nil {
			return 0, err18
		}
		i -= n18
		i = encodeVarintPwdb(dAtA, i, uint64(n18))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x8a
	}
	if m.TimesRegistered != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.TimesRegistered))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x80
	}
	if m.TimesSeen != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.TimesSeen))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xf8
	}
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xf2
	}
	if m.NginxPort != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.NginxPort))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xe8
	}
	if len(m.DomainSuffix) > 0 {
		i -= len(m.DomainSuffix)
		copy(dAtA[i:], m.DomainSuffix)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.DomainSuffix)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xe2
	}
	if len(m.Tags) > 0 {
		i -= len(m.Tags)
		copy(dAtA[i:], m.Tags)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Tags)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xda
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd2
	}
	if len(m.Arch) > 0 {
		i -= len(m.Arch)
		copy(dAtA[i:], m.Arch)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Arch)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	if len(m.ErrMsg) > 0 {
		i -= len(m.ErrMsg)
		copy(dAtA[i:], m.ErrMsg)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.ErrMsg)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc2
	}
	if m.Status != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb8
	}
	if len(m.OS) > 0 {
		i -= len(m.OS)
		copy(dAtA[i:], m.OS)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.OS)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.UpdatedAt != nil {
		n19, err19 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err19 != nil {
			return 0, err19
		}
		i -= n19
		i = encodeVarintPwdb(dAtA, i, uint64(n19))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n20, err20 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err20 != nil {
			return 0, err20
		}
		i -= n20
		i = encodeVarintPwdb(dAtA, i, uint64(n20))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OrganizationMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrganizationMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrganizationMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrganizationID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.OrganizationID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.Organization != nil {
		{
			size, err := m.Organization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.UserID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.Role != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.UpdatedAt != nil {
		n23, err23 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err23 != nil {
			return 0, err23
		}
		i -= n23
		i = encodeVarintPwdb(dAtA, i, uint64(n23))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n24, err24 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err24 != nil {
			return 0, err24
		}
		i -= n24
		i = encodeVarintPwdb(dAtA, i, uint64(n24))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChallengeValidations) > 0 {
		for iNdEx := len(m.ChallengeValidations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengeValidations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xd
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xd
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.ReceivedWhoswhoAttempts) > 0 {
		for iNdEx := len(m.ReceivedWhoswhoAttempts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReceivedWhoswhoAttempts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xfa
		}
	}
	if len(m.SentWhoswhoAttempts) > 0 {
		for iNdEx := len(m.SentWhoswhoAttempts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SentWhoswhoAttempts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xf2
		}
	}
	if len(m.Achievements) > 0 {
		for iNdEx := len(m.Achievements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Achievements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xea
		}
	}
	if len(m.Coupons) > 0 {
		for iNdEx := len(m.Coupons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coupons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xe2
		}
	}
	if m.TeamID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.UserID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if m.Role != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.UpdatedAt != nil {
		n27, err27 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err27 != nil {
			return 0, err27
		}
		i -= n27
		i = encodeVarintPwdb(dAtA, i, uint64(n27))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n28, err28 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err28 != nil {
			return 0, err28
		}
		i -= n28
		i = encodeVarintPwdb(dAtA, i, uint64(n28))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamInvite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamInvite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe2
	}
	if m.TeamID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.UserID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if m.DeletedAt != nil {
		n31, err31 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.DeletedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.DeletedAt):])
		if err31 != nil {
			return 0, err31
		}
		i -= n31
		i = encodeVarintPwdb(dAtA, i, uint64(n31))
		i--
		dAtA[i] = 0x22
	}
	if m.UpdatedAt != nil {
		n32, err32 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err32 != nil {
			return 0, err32
		}
		i -= n32
		i = encodeVarintPwdb(dAtA, i, uint64(n32))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n33, err33 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err33 != nil {
			return 0, err33
		}
		i -= n33
		i = encodeVarintPwdb(dAtA, i, uint64(n33))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActiveSeasonID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ActiveSeasonID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xf0
	}
	if m.ActiveSeason != nil {
		{
			size, err := m.ActiveSeason.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xea
	}
	if m.ActiveTeamMemberID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ActiveTeamMemberID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe0
	}
	if m.ActiveTeamMember != nil {
		{
			size, err := m.ActiveTeamMember.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xda
	}
	if len(m.OrganizationMemberships) > 0 {
		for iNdEx := len(m.OrganizationMemberships) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrganizationMemberships[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.Notifications) > 0 {
		for iNdEx := len(m.Notifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.TeamMemberships) > 0 {
		for iNdEx := len(m.TeamMemberships) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TeamMemberships[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xe2
	}
	if m.DeletionStatus != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.DeletionStatus))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd8
	}
	if len(m.DeletionReason) > 0 {
		i -= len(m.DeletionReason)
		copy(dAtA[i:], m.DeletionReason)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.DeletionReason)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd2
	}
	if len(m.OAuthSubject) > 0 {
		i -= len(m.OAuthSubject)
		copy(dAtA[i:], m.OAuthSubject)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.OAuthSubject)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	if len(m.Locale) > 0 {
		i -= len(m.Locale)
		copy(dAtA[i:], m.Locale)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Locale)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc2
	}
	if len(m.WebsiteURL) > 0 {
		i -= len(m.WebsiteURL)
		copy(dAtA[i:], m.WebsiteURL)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.WebsiteURL)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	if len(m.GravatarURL) > 0 {
		i -= len(m.GravatarURL)
		copy(dAtA[i:], m.GravatarURL)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.GravatarURL)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.DeletedAt != nil {
		n36, err36 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.DeletedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.DeletedAt):])
		if err36 != nil {
			return 0, err36
		}
		i -= n36
		i = encodeVarintPwdb(dAtA, i, uint64(n36))
		i--
		dAtA[i] = 0x22
	}
	if m.UpdatedAt != nil {
		n37, err37 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err37 != nil {
			return 0, err37
		}
		i -= n37
		i = encodeVarintPwdb(dAtA, i, uint64(n37))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n38, err38 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err38 != nil {
			return 0, err38
		}
		i -= n38
		i = encodeVarintPwdb(dAtA, i, uint64(n38))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Organization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Organization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Organization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.ReceivedWhoswhoAttempts) > 0 {
		for iNdEx := len(m.ReceivedWhoswhoAttempts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReceivedWhoswhoAttempts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.Teams) > 0 {
		for iNdEx := len(m.Teams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Teams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	if m.GlobalSeason {
		i--
		if m.GlobalSeason {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc0
	}
	if m.DeletionStatus != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.DeletionStatus))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb8
	}
	if len(m.Locale) > 0 {
		i -= len(m.Locale)
		copy(dAtA[i:], m.Locale)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Locale)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if len(m.GravatarURL) > 0 {
		i -= len(m.GravatarURL)
		copy(dAtA[i:], m.GravatarURL)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.GravatarURL)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.DeletedAt != nil {
		n39, err39 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.DeletedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.DeletedAt):])
		if err39 != nil {
			return 0, err39
		}
		i -= n39
		i = encodeVarintPwdb(dAtA, i, uint64(n39))
		i--
		dAtA[i] = 0x22
	}
	if m.UpdatedAt != nil {
		n40, err40 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err40 != nil {
			return 0, err40
		}
		i -= n40
		i = encodeVarintPwdb(dAtA, i, uint64(n40))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n41, err41 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err41 != nil {
			return 0, err41
		}
		i -= n41
		i = encodeVarintPwdb(dAtA, i, uint64(n41))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Season) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Season) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Season) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coupons) > 0 {
		for iNdEx := len(m.Coupons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coupons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.Teams) > 0 {
		for iNdEx := len(m.Teams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Teams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.IsTesting {
		i--
		if m.IsTesting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd0
	}
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	if m.IsGlobal {
		i--
		if m.IsGlobal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc0
	}
	if m.Subscription != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Subscription))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb8
	}
	if m.Visibility != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Visibility))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb0
	}
	if m.Status != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa8
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.UpdatedAt != nil {
		n42, err42 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err42 != nil {
			return 0, err42
		}
		i -= n42
		i = encodeVarintPwdb(dAtA, i, uint64(n42))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n43, err43 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err43 != nil {
			return 0, err43
		}
		i -= n43
		i = encodeVarintPwdb(dAtA, i, uint64(n43))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Team) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Team) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Team) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Achievements) > 0 {
		for iNdEx := len(m.Achievements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Achievements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xfa
		}
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xf2
		}
	}
	if len(m.ChallengeSubscriptions) > 0 {
		for iNdEx := len(m.ChallengeSubscriptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengeSubscriptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xea
		}
	}
	if m.OrganizationID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.OrganizationID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.Organization != nil {
		{
			size, err := m.Organization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.SeasonID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.Season != nil {
		{
			size, err := m.Season.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xe2
	}
	if m.NbAchievements != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.NbAchievements))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd8
	}
	if m.BronzeMedals != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.BronzeMedals))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd0
	}
	if m.SilverMedals != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.SilverMedals))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc8
	}
	if m.GoldMedals != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.GoldMedals))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc0
	}
	if m.Score != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb8
	}
	if m.Cash != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Cash))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb0
	}
	if m.DeletionStatus != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.DeletionStatus))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa8
	}
	if m.IsGlobal {
		i--
		if m.IsGlobal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.DeletedAt != nil {
		n46, err46 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.DeletedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.DeletedAt):])
		if err46 != nil {
			return 0, err46
		}
		i -= n46
		i = encodeVarintPwdb(dAtA, i, uint64(n46))
		i--
		dAtA[i] = 0x22
	}
	if m.UpdatedAt != nil {
		n47, err47 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err47 != nil {
			return 0, err47
		}
		i -= n47
		i = encodeVarintPwdb(dAtA, i, uint64(n47))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n48, err48 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err48 != nil {
			return 0, err48
		}
		i -= n48
		i = encodeVarintPwdb(dAtA, i, uint64(n48))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WhoswhoAttempt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhoswhoAttempt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhoswhoAttempt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TargetTeamID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.TargetTeamID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xf8
	}
	if m.TargetTeam != nil {
		{
			size, err := m.TargetTeam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xf2
	}
	if m.TargetUserID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.TargetUserID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe8
	}
	if m.TargetUser != nil {
		{
			size, err := m.TargetUser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe2
	}
	if m.AuthorTeamID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.AuthorTeamID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.AuthorTeam != nil {
		{
			size, err := m.AuthorTeam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.AuthorID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.AuthorID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.Author != nil {
		{
			size, err := m.Author.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.UpdatedAt != nil {
		n53, err53 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err53 != nil {
			return 0, err53
		}
		i -= n53
		i = encodeVarintPwdb(dAtA, i, uint64(n53))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n54, err54 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err54 != nil {
			return 0, err54
		}
		i -= n54
		i = encodeVarintPwdb(dAtA, i, uint64(n54))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeValidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe8
	}
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe2
	}
	if m.AuthorID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.AuthorID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.Author != nil {
		{
			size, err := m.Author.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.ChallengeSubscriptionID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ChallengeSubscriptionID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.ChallengeSubscription != nil {
		{
			size, err := m.ChallengeSubscription.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd2
	}
	if len(m.Passphrases) > 0 {
		i -= len(m.Passphrases)
		copy(dAtA[i:], m.Passphrases)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Passphrases)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	if len(m.CorrectorComment) > 0 {
		i -= len(m.CorrectorComment)
		copy(dAtA[i:], m.CorrectorComment)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.CorrectorComment)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if len(m.AuthorComment) > 0 {
		i -= len(m.AuthorComment)
		copy(dAtA[i:], m.AuthorComment)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.AuthorComment)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.Status != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.UpdatedAt != nil {
		n58, err58 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err58 != nil {
			return 0, err58
		}
		i -= n58
		i = encodeVarintPwdb(dAtA, i, uint64(n58))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n59, err59 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err59 != nil {
			return 0, err59
		}
		i -= n59
		i = encodeVarintPwdb(dAtA, i, uint64(n59))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeSubscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeSubscription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeSubscription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validations) > 0 {
		for iNdEx := len(m.Validations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xd
			i--
			dAtA[i] = 0x82
		}
	}
	if m.CloserID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.CloserID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xf8
	}
	if m.Closer != nil {
		{
			size, err := m.Closer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xf2
	}
	if m.BuyerID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.BuyerID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe8
	}
	if m.Buyer != nil {
		{
			size, err := m.Buyer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe2
	}
	if m.SeasonChallengeID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.SeasonChallengeID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.SeasonChallenge != nil {
		{
			size, err := m.SeasonChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.TeamID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if m.ClosedAt != nil {
		n64, err64 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ClosedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ClosedAt):])
		if err64 != nil {
			return 0, err64
		}
		i -= n64
		i = encodeVarintPwdb(dAtA, i, uint64(n64))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.Status != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.UpdatedAt != nil {
		n65, err65 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err65 != nil {
			return 0, err65
		}
		i -= n65
		i = encodeVarintPwdb(dAtA, i, uint64(n65))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n66, err66 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err66 != nil {
			return 0, err66
		}
		i -= n66
		i = encodeVarintPwdb(dAtA, i, uint64(n66))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InventoryItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InventoryItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InventoryItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OwnerID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.OwnerID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.Item != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Item))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.UpdatedAt != nil {
		n68, err68 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err68 != nil {
			return 0, err68
		}
		i -= n68
		i = encodeVarintPwdb(dAtA, i, uint64(n68))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n69, err69 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err69 != nil {
			return 0, err69
		}
		i -= n69
		i = encodeVarintPwdb(dAtA, i, uint64(n69))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Notification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Notification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Args) > 0 {
		i -= len(m.Args)
		copy(dAtA[i:], m.Args)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Args)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if len(m.ClickURL) > 0 {
		i -= len(m.ClickURL)
		copy(dAtA[i:], m.ClickURL)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.ClickURL)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.ReadAt != nil {
		n71, err71 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ReadAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ReadAt):])
		if err71 != nil {
			return 0, err71
		}
		i -= n71
		i = encodeVarintPwdb(dAtA, i, uint64(n71))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.UpdatedAt != nil {
		n72, err72 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err72 != nil {
			return 0, err72
		}
		i -= n72
		i = encodeVarintPwdb(dAtA, i, uint64(n72))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n73, err73 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err73 != nil {
			return 0, err73
		}
		i -= n73
		i = encodeVarintPwdb(dAtA, i, uint64(n73))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Coupon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Coupon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Coupon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validations) > 0 {
		for iNdEx := len(m.Validations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xd2
		}
	}
	if m.SeasonID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.Season != nil {
		{
			size, err := m.Season.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if m.MaxValidationCount != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.MaxValidationCount))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb0
	}
	if m.Value != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa8
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.UpdatedAt != nil {
		n75, err75 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err75 != nil {
			return 0, err75
		}
		i -= n75
		i = encodeVarintPwdb(dAtA, i, uint64(n75))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n76, err76 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err76 != nil {
			return 0, err76
		}
		i -= n76
		i = encodeVarintPwdb(dAtA, i, uint64(n76))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CouponValidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CouponValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CouponValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CouponID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.CouponID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe8
	}
	if m.Coupon != nil {
		{
			size, err := m.Coupon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe2
	}
	if m.TeamID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.AuthorID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.AuthorID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.Author != nil {
		{
			size, err := m.Author.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.UpdatedAt != nil {
		n80, err80 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err80 != nil {
			return 0, err80
		}
		i -= n80
		i = encodeVarintPwdb(dAtA, i, uint64(n80))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n81, err81 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err81 != nil {
			return 0, err81
		}
		i -= n81
		i = encodeVarintPwdb(dAtA, i, uint64(n81))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Achievement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Achievement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Achievement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeValidationID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ChallengeValidationID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe8
	}
	if m.ChallengeValidation != nil {
		{
			size, err := m.ChallengeValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe2
	}
	if m.TeamID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.AuthorID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.AuthorID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.Author != nil {
		{
			size, err := m.Author.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Argument) > 0 {
		i -= len(m.Argument)
		copy(dAtA[i:], m.Argument)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Argument)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintPwdb(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if m.IsGlobal {
		i--
		if m.IsGlobal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa8
	}
	if m.Type != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.UpdatedAt != nil {
		n85, err85 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err85 != nil {
			return 0, err85
		}
		i -= n85
		i = encodeVarintPwdb(dAtA, i, uint64(n85))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n86, err86 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err86 != nil {
			return 0, err86
		}
		i -= n86
		i = encodeVarintPwdb(dAtA, i, uint64(n86))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Activity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Activity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Activity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamInviteID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.TeamInviteID))
		i--
		dAtA[i] = 0xe
		i--
		dAtA[i] = 0x98
	}
	if m.TeamInvite != nil {
		{
			size, err := m.TeamInvite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xe
		i--
		dAtA[i] = 0x92
	}
	if m.AgentID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.AgentID))
		i--
		dAtA[i] = 0xe
		i--
		dAtA[i] = 0x88
	}
	if m.Agent != nil {
		{
			size, err := m.Agent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xe
		i--
		dAtA[i] = 0x82
	}
	if m.ChallengeInstanceID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ChallengeInstanceID))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xf8
	}
	if m.ChallengeInstance != nil {
		{
			size, err := m.ChallengeInstance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xf2
	}
	if m.ChallengeSubscriptionID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ChallengeSubscriptionID))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xe8
	}
	if m.ChallengeSubscription != nil {
		{
			size, err := m.ChallengeSubscription.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xe2
	}
	if m.TeamMemberID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.TeamMemberID))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xd8
	}
	if m.TeamMember != nil {
		{
			size, err := m.TeamMember.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xd2
	}
	if m.SeasonChallengeID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.SeasonChallengeID))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xc8
	}
	if m.SeasonChallenge != nil {
		{
			size, err := m.SeasonChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xc2
	}
	if m.CouponID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.CouponID))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xb8
	}
	if m.Coupon != nil {
		{
			size, err := m.Coupon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xb2
	}
	if m.ChallengeFlavorID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ChallengeFlavorID))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xa8
	}
	if m.ChallengeFlavor != nil {
		{
			size, err := m.ChallengeFlavor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xa2
	}
	if m.ChallengeID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ChallengeID))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0x98
	}
	if m.Challenge != nil {
		{
			size, err := m.Challenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0x92
	}
	if m.SeasonID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0x88
	}
	if m.Season != nil {
		{
			size, err := m.Season.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0x82
	}
	if m.OrganizationID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.OrganizationID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xf8
	}
	if m.Organization != nil {
		{
			size, err := m.Organization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xf2
	}
	if m.UserID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe8
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe2
	}
	if m.TeamID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.AuthorID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.AuthorID))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.Author != nil {
		{
			size, err := m.Author.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if m.Kind != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.UpdatedAt != nil {
		n101, err101 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err101 != nil {
			return 0, err101
		}
		i -= n101
		i = encodeVarintPwdb(dAtA, i, uint64(n101))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		n102, err102 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err102 != nil {
			return 0, err102
		}
		i -= n102
		i = encodeVarintPwdb(dAtA, i, uint64(n102))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintPwdb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Dump) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dump) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dump) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WhoswhoAttempts) > 0 {
		for iNdEx := len(m.WhoswhoAttempts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WhoswhoAttempts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.TeamMembers) > 0 {
		for iNdEx := len(m.TeamMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TeamMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.Teams) > 0 {
		for iNdEx := len(m.Teams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Teams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.SeasonChallenges) > 0 {
		for iNdEx := len(m.SeasonChallenges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SeasonChallenges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.Seasons) > 0 {
		for iNdEx := len(m.Seasons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Seasons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.OrganizationMembers) > 0 {
		for iNdEx := len(m.OrganizationMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrganizationMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.Organizations) > 0 {
		for iNdEx := len(m.Organizations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Organizations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Notifications) > 0 {
		for iNdEx := len(m.Notifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.InventoryItems) > 0 {
		for iNdEx := len(m.InventoryItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InventoryItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Agents) > 0 {
		for iNdEx := len(m.Agents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Agents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.CouponValidations) > 0 {
		for iNdEx := len(m.CouponValidations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CouponValidations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Coupons) > 0 {
		for iNdEx := len(m.Coupons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coupons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ChallengeValidations) > 0 {
		for iNdEx := len(m.ChallengeValidations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengeValidations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ChallengeSubscriptions) > 0 {
		for iNdEx := len(m.ChallengeSubscriptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengeSubscriptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ChallengeInstances) > 0 {
		for iNdEx := len(m.ChallengeInstances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengeInstances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ChallengeFlavors) > 0 {
		for iNdEx := len(m.ChallengeFlavors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengeFlavors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Challenges) > 0 {
		for iNdEx := len(m.Challenges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Challenges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Achievements) > 0 {
		for iNdEx := len(m.Achievements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Achievements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Info) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Info) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TableRows) > 0 {
		for k := range m.TableRows {
			v := m.TableRows[k]
			baseI := i
			i = encodeVarintPwdb(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPwdb(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPwdb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AgentList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OrganizationList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrganizationList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrganizationList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SeasonList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TeamList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActivityList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPwdb(dAtA []byte, offset int, v uint64) int {
	offset -= sovPwdb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Challenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Locale)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.IsDraft {
		n += 3
	}
	l = len(m.PreviewURL)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Homepage)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if len(m.Flavors) > 0 {
		for _, e := range m.Flavors {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *ChallengeFlavor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.SourceURL)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.ComposeBundle)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.Driver != 0 {
		n += 2 + sovPwdb(uint64(m.Driver))
	}
	if m.PurchasePrice != 0 {
		n += 2 + sovPwdb(uint64(m.PurchasePrice))
	}
	if m.ValidationReward != 0 {
		n += 2 + sovPwdb(uint64(m.ValidationReward))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.Passphrases != 0 {
		n += 2 + sovPwdb(uint64(m.Passphrases))
	}
	l = len(m.Category)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	l = len(m.TagList)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if len(m.RedumpPolicy) > 0 {
		for _, e := range m.RedumpPolicy {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	l = len(m.RedumpPolicyConfig)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.Challenge != nil {
		l = m.Challenge.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.ChallengeID != 0 {
		n += 2 + sovPwdb(uint64(m.ChallengeID))
	}
	if len(m.SeasonChallenges) > 0 {
		for _, e := range m.SeasonChallenges {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Instances) > 0 {
		for _, e := range m.Instances {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *ChallengeFlavor_RedumpPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Strategy)
	if l > 0 {
		n += 1 + l + sovPwdb(uint64(l))
	}
	l = len(m.Delay)
	if l > 0 {
		n += 1 + l + sovPwdb(uint64(l))
	}
	return n
}

func (m *SeasonChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.NbValidations != 0 {
		n += 2 + sovPwdb(uint64(m.NbValidations))
	}
	if m.Flavor != nil {
		l = m.Flavor.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.FlavorID != 0 {
		n += 2 + sovPwdb(uint64(m.FlavorID))
	}
	if m.Season != nil {
		l = m.Season.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.SeasonID != 0 {
		n += 2 + sovPwdb(uint64(m.SeasonID))
	}
	if len(m.Subscriptions) > 0 {
		for _, e := range m.Subscriptions {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *ChallengeInstance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.Status != 0 {
		n += 2 + sovPwdb(uint64(m.Status))
	}
	if m.LastStartedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastStartedAt)
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.LastStoppedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastStoppedAt)
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.LastRedumpRequestedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastRedumpRequestedAt)
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.StartupError)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.RedumpCount != 0 {
		n += 2 + sovPwdb(uint64(m.RedumpCount))
	}
	if m.ValidationCount != 0 {
		n += 2 + sovPwdb(uint64(m.ValidationCount))
	}
	l = len(m.InstanceConfig)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.Agent != nil {
		l = m.Agent.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.AgentID != 0 {
		n += 2 + sovPwdb(uint64(m.AgentID))
	}
	if m.Flavor != nil {
		l = m.Flavor.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.FlavorID != 0 {
		n += 2 + sovPwdb(uint64(m.FlavorID))
	}
	l = len(m.NginxURL)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	return n
}

func (m *Agent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.OS)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.Status != 0 {
		n += 2 + sovPwdb(uint64(m.Status))
	}
	l = len(m.ErrMsg)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Arch)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Tags)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.DomainSuffix)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.NginxPort != 0 {
		n += 2 + sovPwdb(uint64(m.NginxPort))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.TimesSeen != 0 {
		n += 2 + sovPwdb(uint64(m.TimesSeen))
	}
	if m.TimesRegistered != 0 {
		n += 2 + sovPwdb(uint64(m.TimesRegistered))
	}
	if m.LastRegistrationAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastRegistrationAt)
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.LastSeenAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastSeenAt)
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.AuthSalt)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.DefaultAgent {
		n += 3
	}
	l = len(m.Slug)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if len(m.ChallengeInstances) > 0 {
		for _, e := range m.ChallengeInstances {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *OrganizationMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.Role != 0 {
		n += 2 + sovPwdb(uint64(m.Role))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.UserID != 0 {
		n += 2 + sovPwdb(uint64(m.UserID))
	}
	if m.Organization != nil {
		l = m.Organization.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.OrganizationID != 0 {
		n += 2 + sovPwdb(uint64(m.OrganizationID))
	}
	return n
}

func (m *TeamMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.Role != 0 {
		n += 2 + sovPwdb(uint64(m.Role))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.UserID != 0 {
		n += 2 + sovPwdb(uint64(m.UserID))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.TeamID != 0 {
		n += 2 + sovPwdb(uint64(m.TeamID))
	}
	if len(m.Coupons) > 0 {
		for _, e := range m.Coupons {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Achievements) > 0 {
		for _, e := range m.Achievements {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.SentWhoswhoAttempts) > 0 {
		for _, e := range m.SentWhoswhoAttempts {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.ReceivedWhoswhoAttempts) > 0 {
		for _, e := range m.ReceivedWhoswhoAttempts {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.ChallengeValidations) > 0 {
		for _, e := range m.ChallengeValidations {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *TeamInvite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.DeletedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.DeletedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.UserID != 0 {
		n += 2 + sovPwdb(uint64(m.UserID))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.TeamID != 0 {
		n += 2 + sovPwdb(uint64(m.TeamID))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	return n
}

func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.DeletedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.DeletedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.GravatarURL)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.WebsiteURL)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Locale)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.OAuthSubject)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.DeletionReason)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.DeletionStatus != 0 {
		n += 2 + sovPwdb(uint64(m.DeletionStatus))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if len(m.TeamMemberships) > 0 {
		for _, e := range m.TeamMemberships {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Notifications) > 0 {
		for _, e := range m.Notifications {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.OrganizationMemberships) > 0 {
		for _, e := range m.OrganizationMemberships {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if m.ActiveTeamMember != nil {
		l = m.ActiveTeamMember.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.ActiveTeamMemberID != 0 {
		n += 2 + sovPwdb(uint64(m.ActiveTeamMemberID))
	}
	if m.ActiveSeason != nil {
		l = m.ActiveSeason.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.ActiveSeasonID != 0 {
		n += 2 + sovPwdb(uint64(m.ActiveSeasonID))
	}
	return n
}

func (m *Organization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.DeletedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.DeletedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.GravatarURL)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Locale)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.DeletionStatus != 0 {
		n += 2 + sovPwdb(uint64(m.DeletionStatus))
	}
	if m.GlobalSeason {
		n += 3
	}
	l = len(m.Slug)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.ReceivedWhoswhoAttempts) > 0 {
		for _, e := range m.ReceivedWhoswhoAttempts {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *Season) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.Status != 0 {
		n += 2 + sovPwdb(uint64(m.Status))
	}
	if m.Visibility != 0 {
		n += 2 + sovPwdb(uint64(m.Visibility))
	}
	if m.Subscription != 0 {
		n += 2 + sovPwdb(uint64(m.Subscription))
	}
	if m.IsGlobal {
		n += 3
	}
	l = len(m.Slug)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.IsTesting {
		n += 3
	}
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Coupons) > 0 {
		for _, e := range m.Coupons {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *Team) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.DeletedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.DeletedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.IsGlobal {
		n += 3
	}
	if m.DeletionStatus != 0 {
		n += 2 + sovPwdb(uint64(m.DeletionStatus))
	}
	if m.Cash != 0 {
		n += 2 + sovPwdb(uint64(m.Cash))
	}
	if m.Score != 0 {
		n += 2 + sovPwdb(uint64(m.Score))
	}
	if m.GoldMedals != 0 {
		n += 2 + sovPwdb(uint64(m.GoldMedals))
	}
	if m.SilverMedals != 0 {
		n += 2 + sovPwdb(uint64(m.SilverMedals))
	}
	if m.BronzeMedals != 0 {
		n += 2 + sovPwdb(uint64(m.BronzeMedals))
	}
	if m.NbAchievements != 0 {
		n += 2 + sovPwdb(uint64(m.NbAchievements))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.Season != nil {
		l = m.Season.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.SeasonID != 0 {
		n += 2 + sovPwdb(uint64(m.SeasonID))
	}
	if m.Organization != nil {
		l = m.Organization.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.OrganizationID != 0 {
		n += 2 + sovPwdb(uint64(m.OrganizationID))
	}
	if len(m.ChallengeSubscriptions) > 0 {
		for _, e := range m.ChallengeSubscriptions {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Achievements) > 0 {
		for _, e := range m.Achievements {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *WhoswhoAttempt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.Success {
		n += 3
	}
	l = len(m.Slug)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.Author != nil {
		l = m.Author.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.AuthorID != 0 {
		n += 2 + sovPwdb(uint64(m.AuthorID))
	}
	if m.AuthorTeam != nil {
		l = m.AuthorTeam.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.AuthorTeamID != 0 {
		n += 2 + sovPwdb(uint64(m.AuthorTeamID))
	}
	if m.TargetUser != nil {
		l = m.TargetUser.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.TargetUserID != 0 {
		n += 2 + sovPwdb(uint64(m.TargetUserID))
	}
	if m.TargetTeam != nil {
		l = m.TargetTeam.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.TargetTeamID != 0 {
		n += 2 + sovPwdb(uint64(m.TargetTeamID))
	}
	return n
}

func (m *ChallengeValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.Status != 0 {
		n += 2 + sovPwdb(uint64(m.Status))
	}
	l = len(m.AuthorComment)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.CorrectorComment)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Passphrases)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.ChallengeSubscription != nil {
		l = m.ChallengeSubscription.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.ChallengeSubscriptionID != 0 {
		n += 2 + sovPwdb(uint64(m.ChallengeSubscriptionID))
	}
	if m.Author != nil {
		l = m.Author.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.AuthorID != 0 {
		n += 2 + sovPwdb(uint64(m.AuthorID))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.TeamID != 0 {
		n += 2 + sovPwdb(uint64(m.TeamID))
	}
	return n
}

func (m *ChallengeSubscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.Status != 0 {
		n += 2 + sovPwdb(uint64(m.Status))
	}
	if m.ClosedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ClosedAt)
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.TeamID != 0 {
		n += 2 + sovPwdb(uint64(m.TeamID))
	}
	if m.SeasonChallenge != nil {
		l = m.SeasonChallenge.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.SeasonChallengeID != 0 {
		n += 2 + sovPwdb(uint64(m.SeasonChallengeID))
	}
	if m.Buyer != nil {
		l = m.Buyer.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.BuyerID != 0 {
		n += 2 + sovPwdb(uint64(m.BuyerID))
	}
	if m.Closer != nil {
		l = m.Closer.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.CloserID != 0 {
		n += 2 + sovPwdb(uint64(m.CloserID))
	}
	if len(m.Validations) > 0 {
		for _, e := range m.Validations {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *InventoryItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.Item != 0 {
		n += 2 + sovPwdb(uint64(m.Item))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.OwnerID != 0 {
		n += 2 + sovPwdb(uint64(m.OwnerID))
	}
	return n
}

func (m *Notification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.ReadAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ReadAt)
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.ClickURL)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Args)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.UserID != 0 {
		n += 2 + sovPwdb(uint64(m.UserID))
	}
	return n
}

func (m *Coupon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.Value != 0 {
		n += 2 + sovPwdb(uint64(m.Value))
	}
	if m.MaxValidationCount != 0 {
		n += 2 + sovPwdb(uint64(m.MaxValidationCount))
	}
	if m.Season != nil {
		l = m.Season.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.SeasonID != 0 {
		n += 2 + sovPwdb(uint64(m.SeasonID))
	}
	if len(m.Validations) > 0 {
		for _, e := range m.Validations {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *CouponValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.Author != nil {
		l = m.Author.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.AuthorID != 0 {
		n += 2 + sovPwdb(uint64(m.AuthorID))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.TeamID != 0 {
		n += 2 + sovPwdb(uint64(m.TeamID))
	}
	if m.Coupon != nil {
		l = m.Coupon.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.CouponID != 0 {
		n += 2 + sovPwdb(uint64(m.CouponID))
	}
	return n
}

func (m *Achievement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.Type != 0 {
		n += 2 + sovPwdb(uint64(m.Type))
	}
	if m.IsGlobal {
		n += 3
	}
	l = len(m.Comment)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Argument)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.Author != nil {
		l = m.Author.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.AuthorID != 0 {
		n += 2 + sovPwdb(uint64(m.AuthorID))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.TeamID != 0 {
		n += 2 + sovPwdb(uint64(m.TeamID))
	}
	if m.ChallengeValidation != nil {
		l = m.ChallengeValidation.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.ChallengeValidationID != 0 {
		n += 2 + sovPwdb(uint64(m.ChallengeValidationID))
	}
	return n
}

func (m *Activity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPwdb(uint64(m.ID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPwdb(uint64(l))
	}
	if m.Kind != 0 {
		n += 2 + sovPwdb(uint64(m.Kind))
	}
	if m.Author != nil {
		l = m.Author.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.AuthorID != 0 {
		n += 2 + sovPwdb(uint64(m.AuthorID))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.TeamID != 0 {
		n += 2 + sovPwdb(uint64(m.TeamID))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.UserID != 0 {
		n += 2 + sovPwdb(uint64(m.UserID))
	}
	if m.Organization != nil {
		l = m.Organization.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.OrganizationID != 0 {
		n += 2 + sovPwdb(uint64(m.OrganizationID))
	}
	if m.Season != nil {
		l = m.Season.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.SeasonID != 0 {
		n += 2 + sovPwdb(uint64(m.SeasonID))
	}
	if m.Challenge != nil {
		l = m.Challenge.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.ChallengeID != 0 {
		n += 2 + sovPwdb(uint64(m.ChallengeID))
	}
	if m.ChallengeFlavor != nil {
		l = m.ChallengeFlavor.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.ChallengeFlavorID != 0 {
		n += 2 + sovPwdb(uint64(m.ChallengeFlavorID))
	}
	if m.Coupon != nil {
		l = m.Coupon.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.CouponID != 0 {
		n += 2 + sovPwdb(uint64(m.CouponID))
	}
	if m.SeasonChallenge != nil {
		l = m.SeasonChallenge.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.SeasonChallengeID != 0 {
		n += 2 + sovPwdb(uint64(m.SeasonChallengeID))
	}
	if m.TeamMember != nil {
		l = m.TeamMember.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.TeamMemberID != 0 {
		n += 2 + sovPwdb(uint64(m.TeamMemberID))
	}
	if m.ChallengeSubscription != nil {
		l = m.ChallengeSubscription.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.ChallengeSubscriptionID != 0 {
		n += 2 + sovPwdb(uint64(m.ChallengeSubscriptionID))
	}
	if m.ChallengeInstance != nil {
		l = m.ChallengeInstance.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.ChallengeInstanceID != 0 {
		n += 2 + sovPwdb(uint64(m.ChallengeInstanceID))
	}
	if m.Agent != nil {
		l = m.Agent.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.AgentID != 0 {
		n += 2 + sovPwdb(uint64(m.AgentID))
	}
	if m.TeamInvite != nil {
		l = m.TeamInvite.Size()
		n += 2 + l + sovPwdb(uint64(l))
	}
	if m.TeamInviteID != 0 {
		n += 2 + sovPwdb(uint64(m.TeamInviteID))
	}
	return n
}

func (m *Dump) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Achievements) > 0 {
		for _, e := range m.Achievements {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Challenges) > 0 {
		for _, e := range m.Challenges {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.ChallengeFlavors) > 0 {
		for _, e := range m.ChallengeFlavors {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.ChallengeInstances) > 0 {
		for _, e := range m.ChallengeInstances {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.ChallengeSubscriptions) > 0 {
		for _, e := range m.ChallengeSubscriptions {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.ChallengeValidations) > 0 {
		for _, e := range m.ChallengeValidations {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Coupons) > 0 {
		for _, e := range m.Coupons {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.CouponValidations) > 0 {
		for _, e := range m.CouponValidations {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Agents) > 0 {
		for _, e := range m.Agents {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.InventoryItems) > 0 {
		for _, e := range m.InventoryItems {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Notifications) > 0 {
		for _, e := range m.Notifications {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Organizations) > 0 {
		for _, e := range m.Organizations {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.OrganizationMembers) > 0 {
		for _, e := range m.OrganizationMembers {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Seasons) > 0 {
		for _, e := range m.Seasons {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.SeasonChallenges) > 0 {
		for _, e := range m.SeasonChallenges {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.TeamMembers) > 0 {
		for _, e := range m.TeamMembers {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	if len(m.WhoswhoAttempts) > 0 {
		for _, e := range m.WhoswhoAttempts {
			l = e.Size()
			n += 2 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TableRows) > 0 {
		for k, v := range m.TableRows {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPwdb(uint64(len(k))) + 1 + sovPwdb(uint64(v))
			n += mapEntrySize + 1 + sovPwdb(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AgentList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *ChallengeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *SeasonChallengeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *UserList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *OrganizationList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *SeasonList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *TeamList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func (m *ActivityList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwdb(uint64(l))
		}
	}
	return n
}

func sovPwdb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPwdb(x uint64) (n int) {
	return sovPwdb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Challenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Challenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Challenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 104:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDraft = bool(v != 0)
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviewURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Homepage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Homepage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 107:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flavors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flavors = append(m.Flavors, &ChallengeFlavor{})
			if err := m.Flavors[len(m.Flavors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeFlavor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeFlavor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeFlavor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComposeBundle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComposeBundle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 106:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Driver", wireType)
			}
			m.Driver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Driver |= ChallengeFlavor_Driver(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 107:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchasePrice", wireType)
			}
			m.PurchasePrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PurchasePrice |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 108:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationReward", wireType)
			}
			m.ValidationReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidationReward |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 109:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 110:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 111:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passphrases", wireType)
			}
			m.Passphrases = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Passphrases |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 112:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 113:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 114:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagList = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 115:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedumpPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedumpPolicy = append(m.RedumpPolicy, &ChallengeFlavor_RedumpPolicy{})
			if err := m.RedumpPolicy[len(m.RedumpPolicy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 116:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedumpPolicyConfig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedumpPolicyConfig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Challenge == nil {
				m.Challenge = &Challenge{}
			}
			if err := m.Challenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeID", wireType)
			}
			m.ChallengeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonChallenges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeasonChallenges = append(m.SeasonChallenges, &SeasonChallenge{})
			if err := m.SeasonChallenges[len(m.SeasonChallenges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instances = append(m.Instances, &ChallengeInstance{})
			if err := m.Instances[len(m.Instances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeFlavor_RedumpPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedumpPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedumpPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strategy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delay = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbValidations", wireType)
			}
			m.NbValidations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NbValidations |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flavor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flavor == nil {
				m.Flavor = &ChallengeFlavor{}
			}
			if err := m.Flavor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlavorID", wireType)
			}
			m.FlavorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlavorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Season == nil {
				m.Season = &Season{}
			}
			if err := m.Season.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 204:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, &ChallengeSubscription{})
			if err := m.Subscriptions[len(m.Subscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeInstance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeInstance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeInstance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ChallengeInstance_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStartedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastStartedAt == nil {
				m.LastStartedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastStartedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStoppedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastStoppedAt == nil {
				m.LastStoppedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastStoppedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRedumpRequestedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastRedumpRequestedAt == nil {
				m.LastRedumpRequestedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastRedumpRequestedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartupError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartupError = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 105:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedumpCount", wireType)
			}
			m.RedumpCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedumpCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 106:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationCount", wireType)
			}
			m.ValidationCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidationCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 107:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceConfig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceConfig = append(m.InstanceConfig[:0], dAtA[iNdEx:postIndex]...)
			if m.InstanceConfig == nil {
				m.InstanceConfig = []byte{}
			}
			iNdEx = postIndex
		case 108:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Agent == nil {
				m.Agent = &Agent{}
			}
			if err := m.Agent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			m.AgentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgentID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flavor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flavor == nil {
				m.Flavor = &ChallengeFlavor{}
			}
			if err := m.Flavor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlavorID", wireType)
			}
			m.FlavorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlavorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 250:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NginxURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NginxURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Agent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Agent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Agent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OS = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 103:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Agent_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 107:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 108:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainSuffix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainSuffix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 109:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NginxPort", wireType)
			}
			m.NginxPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NginxPort |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 110:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 111:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimesSeen", wireType)
			}
			m.TimesSeen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimesSeen |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 112:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimesRegistered", wireType)
			}
			m.TimesRegistered = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimesRegistered |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 113:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRegistrationAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastRegistrationAt == nil {
				m.LastRegistrationAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastRegistrationAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 114:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeenAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastSeenAt == nil {
				m.LastSeenAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastSeenAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 115:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthSalt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthSalt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 116:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultAgent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefaultAgent = bool(v != 0)
		case 117:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeInstances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeInstances = append(m.ChallengeInstances, &ChallengeInstance{})
			if err := m.ChallengeInstances[len(m.ChallengeInstances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrganizationMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrganizationMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrganizationMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= OrganizationMember_Role(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Organization == nil {
				m.Organization = &Organization{}
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			m.OrganizationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrganizationID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= TeamMember_Role(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &Team{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 204:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coupons = append(m.Coupons, &Coupon{})
			if err := m.Coupons[len(m.Coupons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 205:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Achievements = append(m.Achievements, &Achievement{})
			if err := m.Achievements[len(m.Achievements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 206:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentWhoswhoAttempts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SentWhoswhoAttempts = append(m.SentWhoswhoAttempts, &WhoswhoAttempt{})
			if err := m.SentWhoswhoAttempts[len(m.SentWhoswhoAttempts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 207:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedWhoswhoAttempts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceivedWhoswhoAttempts = append(m.ReceivedWhoswhoAttempts, &WhoswhoAttempt{})
			if err := m.ReceivedWhoswhoAttempts[len(m.ReceivedWhoswhoAttempts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 208:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &InventoryItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 209:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeValidations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeValidations = append(m.ChallengeValidations, &ChallengeValidation{})
			if err := m.ChallengeValidations[len(m.ChallengeValidations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.DeletedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &Team{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 204:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.DeletedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GravatarURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GravatarURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebsiteURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebsiteURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OAuthSubject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OAuthSubject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletionReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletionReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 107:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletionStatus", wireType)
			}
			m.DeletionStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletionStatus |= DeletionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 108:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamMemberships", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamMemberships = append(m.TeamMemberships, &TeamMember{})
			if err := m.TeamMemberships[len(m.TeamMemberships)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notifications = append(m.Notifications, &Notification{})
			if err := m.Notifications[len(m.Notifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationMemberships", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationMemberships = append(m.OrganizationMemberships, &OrganizationMember{})
			if err := m.OrganizationMemberships[len(m.OrganizationMemberships)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveTeamMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActiveTeamMember == nil {
				m.ActiveTeamMember = &TeamMember{}
			}
			if err := m.ActiveTeamMember.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 204:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveTeamMemberID", wireType)
			}
			m.ActiveTeamMemberID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveTeamMemberID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 205:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveSeason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActiveSeason == nil {
				m.ActiveSeason = &Season{}
			}
			if err := m.ActiveSeason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 206:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveSeasonID", wireType)
			}
			m.ActiveSeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveSeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Organization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Organization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Organization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.DeletedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GravatarURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GravatarURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 103:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletionStatus", wireType)
			}
			m.DeletionStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletionStatus |= DeletionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 104:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalSeason", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GlobalSeason = bool(v != 0)
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &Team{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedWhoswhoAttempts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceivedWhoswhoAttempts = append(m.ReceivedWhoswhoAttempts, &WhoswhoAttempt{})
			if err := m.ReceivedWhoswhoAttempts[len(m.ReceivedWhoswhoAttempts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &OrganizationMember{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Season) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Season: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Season: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Season_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			m.Visibility = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Visibility |= Season_Visibility(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 103:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscription", wireType)
			}
			m.Subscription = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subscription |= Season_Subscription(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 104:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGlobal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGlobal = bool(v != 0)
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 106:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTesting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTesting = bool(v != 0)
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &Team{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coupons = append(m.Coupons, &Coupon{})
			if err := m.Coupons[len(m.Coupons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Team) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Team: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Team: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.DeletedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGlobal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGlobal = bool(v != 0)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletionStatus", wireType)
			}
			m.DeletionStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletionStatus |= DeletionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cash", wireType)
			}
			m.Cash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 103:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 104:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldMedals", wireType)
			}
			m.GoldMedals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldMedals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 105:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SilverMedals", wireType)
			}
			m.SilverMedals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SilverMedals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 106:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BronzeMedals", wireType)
			}
			m.BronzeMedals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BronzeMedals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 107:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbAchievements", wireType)
			}
			m.NbAchievements = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NbAchievements |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 108:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Season == nil {
				m.Season = &Season{}
			}
			if err := m.Season.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Organization == nil {
				m.Organization = &Organization{}
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			m.OrganizationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrganizationID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 205:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSubscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeSubscriptions = append(m.ChallengeSubscriptions, &ChallengeSubscription{})
			if err := m.ChallengeSubscriptions[len(m.ChallengeSubscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 206:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &TeamMember{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 207:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Achievements = append(m.Achievements, &Achievement{})
			if err := m.Achievements[len(m.Achievements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhoswhoAttempt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhoswhoAttempt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhoswhoAttempt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &User{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorID", wireType)
			}
			m.AuthorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthorTeam == nil {
				m.AuthorTeam = &Team{}
			}
			if err := m.AuthorTeam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorTeamID", wireType)
			}
			m.AuthorTeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorTeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 204:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetUser == nil {
				m.TargetUser = &User{}
			}
			if err := m.TargetUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 205:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUserID", wireType)
			}
			m.TargetUserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetUserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 206:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetTeam == nil {
				m.TargetTeam = &Team{}
			}
			if err := m.TargetTeam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 207:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetTeamID", wireType)
			}
			m.TargetTeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetTeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeValidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeValidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeValidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ChallengeValidation_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorComment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorComment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrectorComment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrectorComment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passphrases", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passphrases = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSubscription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChallengeSubscription == nil {
				m.ChallengeSubscription = &ChallengeSubscription{}
			}
			if err := m.ChallengeSubscription.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSubscriptionID", wireType)
			}
			m.ChallengeSubscriptionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeSubscriptionID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &User{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorID", wireType)
			}
			m.AuthorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 204:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &Team{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 205:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeSubscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeSubscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeSubscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ChallengeSubscription_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClosedAt == nil {
				m.ClosedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ClosedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &Team{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeasonChallenge == nil {
				m.SeasonChallenge = &SeasonChallenge{}
			}
			if err := m.SeasonChallenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonChallengeID", wireType)
			}
			m.SeasonChallengeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonChallengeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 204:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Buyer == nil {
				m.Buyer = &User{}
			}
			if err := m.Buyer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 205:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerID", wireType)
			}
			m.BuyerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 206:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Closer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Closer == nil {
				m.Closer = &User{}
			}
			if err := m.Closer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 207:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloserID", wireType)
			}
			m.CloserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CloserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 208:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validations = append(m.Validations, &ChallengeValidation{})
			if err := m.Validations[len(m.Validations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InventoryItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InventoryItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InventoryItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			m.Item = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Item |= InventoryItem_Item(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &TeamMember{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerID", wireType)
			}
			m.OwnerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Notification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Notification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Notification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReadAt == nil {
				m.ReadAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ReadAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClickURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClickURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Coupon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Coupon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Coupon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValidationCount", wireType)
			}
			m.MaxValidationCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxValidationCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Season == nil {
				m.Season = &Season{}
			}
			if err := m.Season.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validations = append(m.Validations, &CouponValidation{})
			if err := m.Validations[len(m.Validations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CouponValidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CouponValidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CouponValidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &User{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorID", wireType)
			}
			m.AuthorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &Team{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 204:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coupon == nil {
				m.Coupon = &Coupon{}
			}
			if err := m.Coupon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 205:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponID", wireType)
			}
			m.CouponID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CouponID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Achievement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Achievement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Achievement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Achievement_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGlobal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGlobal = bool(v != 0)
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Argument", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Argument = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &User{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorID", wireType)
			}
			m.AuthorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &Team{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 204:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChallengeValidation == nil {
				m.ChallengeValidation = &ChallengeValidation{}
			}
			if err := m.ChallengeValidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 205:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeValidationID", wireType)
			}
			m.ChallengeValidationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeValidationID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Activity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Activity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Activity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= Activity_Kind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Author == nil {
				m.Author = &User{}
			}
			if err := m.Author.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorID", wireType)
			}
			m.AuthorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &Team{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 204:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 205:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 206:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Organization == nil {
				m.Organization = &Organization{}
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 207:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			m.OrganizationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrganizationID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 208:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Season == nil {
				m.Season = &Season{}
			}
			if err := m.Season.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 209:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 210:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Challenge == nil {
				m.Challenge = &Challenge{}
			}
			if err := m.Challenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 211:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeID", wireType)
			}
			m.ChallengeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 212:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeFlavor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChallengeFlavor == nil {
				m.ChallengeFlavor = &ChallengeFlavor{}
			}
			if err := m.ChallengeFlavor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 213:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeFlavorID", wireType)
			}
			m.ChallengeFlavorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeFlavorID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 214:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coupon == nil {
				m.Coupon = &Coupon{}
			}
			if err := m.Coupon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 215:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponID", wireType)
			}
			m.CouponID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CouponID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 216:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeasonChallenge == nil {
				m.SeasonChallenge = &SeasonChallenge{}
			}
			if err := m.SeasonChallenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 217:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonChallengeID", wireType)
			}
			m.SeasonChallengeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonChallengeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 218:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamMember == nil {
				m.TeamMember = &TeamMember{}
			}
			if err := m.TeamMember.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 219:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamMemberID", wireType)
			}
			m.TeamMemberID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamMemberID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 220:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSubscription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChallengeSubscription == nil {
				m.ChallengeSubscription = &ChallengeSubscription{}
			}
			if err := m.ChallengeSubscription.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 221:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSubscriptionID", wireType)
			}
			m.ChallengeSubscriptionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeSubscriptionID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 222:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeInstance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChallengeInstance == nil {
				m.ChallengeInstance = &ChallengeInstance{}
			}
			if err := m.ChallengeInstance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 223:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeInstanceID", wireType)
			}
			m.ChallengeInstanceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeInstanceID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 224:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Agent == nil {
				m.Agent = &Agent{}
			}
			if err := m.Agent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 225:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			m.AgentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgentID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 226:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamInvite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamInvite == nil {
				m.TeamInvite = &Agent{}
			}
			if err := m.TeamInvite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 227:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamInviteID", wireType)
			}
			m.TeamInviteID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamInviteID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dump) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dump: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dump: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Achievements = append(m.Achievements, &Achievement{})
			if err := m.Achievements[len(m.Achievements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenges = append(m.Challenges, &Challenge{})
			if err := m.Challenges[len(m.Challenges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeFlavors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeFlavors = append(m.ChallengeFlavors, &ChallengeFlavor{})
			if err := m.ChallengeFlavors[len(m.ChallengeFlavors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeInstances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeInstances = append(m.ChallengeInstances, &ChallengeInstance{})
			if err := m.ChallengeInstances[len(m.ChallengeInstances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSubscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeSubscriptions = append(m.ChallengeSubscriptions, &ChallengeSubscription{})
			if err := m.ChallengeSubscriptions[len(m.ChallengeSubscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeValidations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeValidations = append(m.ChallengeValidations, &ChallengeValidation{})
			if err := m.ChallengeValidations[len(m.ChallengeValidations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coupons = append(m.Coupons, &Coupon{})
			if err := m.Coupons[len(m.Coupons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponValidations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CouponValidations = append(m.CouponValidations, &CouponValidation{})
			if err := m.CouponValidations[len(m.CouponValidations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agents = append(m.Agents, &Agent{})
			if err := m.Agents[len(m.Agents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InventoryItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InventoryItems = append(m.InventoryItems, &InventoryItem{})
			if err := m.InventoryItems[len(m.InventoryItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notifications = append(m.Notifications, &Notification{})
			if err := m.Notifications[len(m.Notifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organizations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organizations = append(m.Organizations, &Organization{})
			if err := m.Organizations[len(m.Organizations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationMembers = append(m.OrganizationMembers, &OrganizationMember{})
			if err := m.OrganizationMembers[len(m.OrganizationMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seasons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seasons = append(m.Seasons, &Season{})
			if err := m.Seasons[len(m.Seasons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonChallenges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeasonChallenges = append(m.SeasonChallenges, &SeasonChallenge{})
			if err := m.SeasonChallenges[len(m.SeasonChallenges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &Team{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamMembers = append(m.TeamMembers, &TeamMember{})
			if err := m.TeamMembers[len(m.TeamMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhoswhoAttempts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhoswhoAttempts = append(m.WhoswhoAttempts, &WhoswhoAttempt{})
			if err := m.WhoswhoAttempts[len(m.WhoswhoAttempts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableRows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TableRows == nil {
				m.TableRows = make(map[string]uint32)
			}
			var mapkey string
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPwdb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPwdb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPwdb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPwdb
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPwdb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPwdb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPwdb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TableRows[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Agent{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Challenge{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonChallengeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonChallengeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &SeasonChallenge{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &User{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrganizationList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrganizationList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrganizationList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Organization{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Season{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Team{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Activity{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPwdb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPwdb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPwdb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPwdb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPwdb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPwdb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPwdb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPwdb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPwdb = fmt.Errorf("proto: unexpected end of group")
)
