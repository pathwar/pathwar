// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pwapi.proto

package pwapi

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	pwdb "pathwar.land/pathwar/v2/go/pkg/pwdb"
	pwsso "pathwar.land/pathwar/v2/go/pkg/pwsso"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AdminRedump struct {
}

func (m *AdminRedump) Reset()         { *m = AdminRedump{} }
func (m *AdminRedump) String() string { return proto.CompactTextString(m) }
func (*AdminRedump) ProtoMessage()    {}
func (*AdminRedump) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{0}
}
func (m *AdminRedump) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminRedump) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminRedump.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminRedump) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminRedump.Merge(m, src)
}
func (m *AdminRedump) XXX_Size() int {
	return m.Size()
}
func (m *AdminRedump) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminRedump.DiscardUnknown(m)
}

var xxx_messageInfo_AdminRedump proto.InternalMessageInfo

type AdminRedump_Input struct {
	Identifiers []string `protobuf:"bytes,1,rep,name=identifiers,proto3" json:"identifiers,omitempty" url:"identifiers"`
}

func (m *AdminRedump_Input) Reset()         { *m = AdminRedump_Input{} }
func (m *AdminRedump_Input) String() string { return proto.CompactTextString(m) }
func (*AdminRedump_Input) ProtoMessage()    {}
func (*AdminRedump_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{0, 0}
}
func (m *AdminRedump_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminRedump_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminRedump_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminRedump_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminRedump_Input.Merge(m, src)
}
func (m *AdminRedump_Input) XXX_Size() int {
	return m.Size()
}
func (m *AdminRedump_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminRedump_Input.DiscardUnknown(m)
}

var xxx_messageInfo_AdminRedump_Input proto.InternalMessageInfo

func (m *AdminRedump_Input) GetIdentifiers() []string {
	if m != nil {
		return m.Identifiers
	}
	return nil
}

type AdminRedump_Output struct {
}

func (m *AdminRedump_Output) Reset()         { *m = AdminRedump_Output{} }
func (m *AdminRedump_Output) String() string { return proto.CompactTextString(m) }
func (*AdminRedump_Output) ProtoMessage()    {}
func (*AdminRedump_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{0, 1}
}
func (m *AdminRedump_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminRedump_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminRedump_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminRedump_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminRedump_Output.Merge(m, src)
}
func (m *AdminRedump_Output) XXX_Size() int {
	return m.Size()
}
func (m *AdminRedump_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminRedump_Output.DiscardUnknown(m)
}

var xxx_messageInfo_AdminRedump_Output proto.InternalMessageInfo

type AdminAddCoupon struct {
}

func (m *AdminAddCoupon) Reset()         { *m = AdminAddCoupon{} }
func (m *AdminAddCoupon) String() string { return proto.CompactTextString(m) }
func (*AdminAddCoupon) ProtoMessage()    {}
func (*AdminAddCoupon) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{1}
}
func (m *AdminAddCoupon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminAddCoupon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminAddCoupon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminAddCoupon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminAddCoupon.Merge(m, src)
}
func (m *AdminAddCoupon) XXX_Size() int {
	return m.Size()
}
func (m *AdminAddCoupon) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminAddCoupon.DiscardUnknown(m)
}

var xxx_messageInfo_AdminAddCoupon proto.InternalMessageInfo

type AdminAddCoupon_Input struct {
	Hash               string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Value              int64  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	MaxValidationCount int64  `protobuf:"varint,3,opt,name=max_validation_count,json=maxValidationCount,proto3" json:"max_validation_count,omitempty"`
	SeasonID           string `protobuf:"bytes,4,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
}

func (m *AdminAddCoupon_Input) Reset()         { *m = AdminAddCoupon_Input{} }
func (m *AdminAddCoupon_Input) String() string { return proto.CompactTextString(m) }
func (*AdminAddCoupon_Input) ProtoMessage()    {}
func (*AdminAddCoupon_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{1, 0}
}
func (m *AdminAddCoupon_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminAddCoupon_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminAddCoupon_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminAddCoupon_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminAddCoupon_Input.Merge(m, src)
}
func (m *AdminAddCoupon_Input) XXX_Size() int {
	return m.Size()
}
func (m *AdminAddCoupon_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminAddCoupon_Input.DiscardUnknown(m)
}

var xxx_messageInfo_AdminAddCoupon_Input proto.InternalMessageInfo

func (m *AdminAddCoupon_Input) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *AdminAddCoupon_Input) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *AdminAddCoupon_Input) GetMaxValidationCount() int64 {
	if m != nil {
		return m.MaxValidationCount
	}
	return 0
}

func (m *AdminAddCoupon_Input) GetSeasonID() string {
	if m != nil {
		return m.SeasonID
	}
	return ""
}

type AdminAddCoupon_Output struct {
	Coupon *pwdb.Coupon `protobuf:"bytes,1,opt,name=coupon,proto3" json:"coupon,omitempty"`
}

func (m *AdminAddCoupon_Output) Reset()         { *m = AdminAddCoupon_Output{} }
func (m *AdminAddCoupon_Output) String() string { return proto.CompactTextString(m) }
func (*AdminAddCoupon_Output) ProtoMessage()    {}
func (*AdminAddCoupon_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{1, 1}
}
func (m *AdminAddCoupon_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminAddCoupon_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminAddCoupon_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminAddCoupon_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminAddCoupon_Output.Merge(m, src)
}
func (m *AdminAddCoupon_Output) XXX_Size() int {
	return m.Size()
}
func (m *AdminAddCoupon_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminAddCoupon_Output.DiscardUnknown(m)
}

var xxx_messageInfo_AdminAddCoupon_Output proto.InternalMessageInfo

func (m *AdminAddCoupon_Output) GetCoupon() *pwdb.Coupon {
	if m != nil {
		return m.Coupon
	}
	return nil
}

type AdminListChallenges struct {
}

func (m *AdminListChallenges) Reset()         { *m = AdminListChallenges{} }
func (m *AdminListChallenges) String() string { return proto.CompactTextString(m) }
func (*AdminListChallenges) ProtoMessage()    {}
func (*AdminListChallenges) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{2}
}
func (m *AdminListChallenges) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListChallenges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListChallenges.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListChallenges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListChallenges.Merge(m, src)
}
func (m *AdminListChallenges) XXX_Size() int {
	return m.Size()
}
func (m *AdminListChallenges) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListChallenges.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListChallenges proto.InternalMessageInfo

type AdminListChallenges_Input struct {
}

func (m *AdminListChallenges_Input) Reset()         { *m = AdminListChallenges_Input{} }
func (m *AdminListChallenges_Input) String() string { return proto.CompactTextString(m) }
func (*AdminListChallenges_Input) ProtoMessage()    {}
func (*AdminListChallenges_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{2, 0}
}
func (m *AdminListChallenges_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListChallenges_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListChallenges_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListChallenges_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListChallenges_Input.Merge(m, src)
}
func (m *AdminListChallenges_Input) XXX_Size() int {
	return m.Size()
}
func (m *AdminListChallenges_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListChallenges_Input.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListChallenges_Input proto.InternalMessageInfo

type AdminListChallenges_Output struct {
	Challenges []*pwdb.Challenge `protobuf:"bytes,1,rep,name=challenges,proto3" json:"challenges,omitempty"`
}

func (m *AdminListChallenges_Output) Reset()         { *m = AdminListChallenges_Output{} }
func (m *AdminListChallenges_Output) String() string { return proto.CompactTextString(m) }
func (*AdminListChallenges_Output) ProtoMessage()    {}
func (*AdminListChallenges_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{2, 1}
}
func (m *AdminListChallenges_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListChallenges_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListChallenges_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListChallenges_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListChallenges_Output.Merge(m, src)
}
func (m *AdminListChallenges_Output) XXX_Size() int {
	return m.Size()
}
func (m *AdminListChallenges_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListChallenges_Output.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListChallenges_Output proto.InternalMessageInfo

func (m *AdminListChallenges_Output) GetChallenges() []*pwdb.Challenge {
	if m != nil {
		return m.Challenges
	}
	return nil
}

type AdminListAgents struct {
}

func (m *AdminListAgents) Reset()         { *m = AdminListAgents{} }
func (m *AdminListAgents) String() string { return proto.CompactTextString(m) }
func (*AdminListAgents) ProtoMessage()    {}
func (*AdminListAgents) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{3}
}
func (m *AdminListAgents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListAgents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListAgents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListAgents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListAgents.Merge(m, src)
}
func (m *AdminListAgents) XXX_Size() int {
	return m.Size()
}
func (m *AdminListAgents) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListAgents.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListAgents proto.InternalMessageInfo

type AdminListAgents_Input struct {
}

func (m *AdminListAgents_Input) Reset()         { *m = AdminListAgents_Input{} }
func (m *AdminListAgents_Input) String() string { return proto.CompactTextString(m) }
func (*AdminListAgents_Input) ProtoMessage()    {}
func (*AdminListAgents_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{3, 0}
}
func (m *AdminListAgents_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListAgents_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListAgents_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListAgents_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListAgents_Input.Merge(m, src)
}
func (m *AdminListAgents_Input) XXX_Size() int {
	return m.Size()
}
func (m *AdminListAgents_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListAgents_Input.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListAgents_Input proto.InternalMessageInfo

type AdminListAgents_Output struct {
	Agents []*pwdb.Agent `protobuf:"bytes,1,rep,name=agents,proto3" json:"agents,omitempty"`
}

func (m *AdminListAgents_Output) Reset()         { *m = AdminListAgents_Output{} }
func (m *AdminListAgents_Output) String() string { return proto.CompactTextString(m) }
func (*AdminListAgents_Output) ProtoMessage()    {}
func (*AdminListAgents_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{3, 1}
}
func (m *AdminListAgents_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListAgents_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListAgents_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListAgents_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListAgents_Output.Merge(m, src)
}
func (m *AdminListAgents_Output) XXX_Size() int {
	return m.Size()
}
func (m *AdminListAgents_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListAgents_Output.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListAgents_Output proto.InternalMessageInfo

func (m *AdminListAgents_Output) GetAgents() []*pwdb.Agent {
	if m != nil {
		return m.Agents
	}
	return nil
}

type AdminListCoupons struct {
}

func (m *AdminListCoupons) Reset()         { *m = AdminListCoupons{} }
func (m *AdminListCoupons) String() string { return proto.CompactTextString(m) }
func (*AdminListCoupons) ProtoMessage()    {}
func (*AdminListCoupons) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{4}
}
func (m *AdminListCoupons) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListCoupons) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListCoupons.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListCoupons) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListCoupons.Merge(m, src)
}
func (m *AdminListCoupons) XXX_Size() int {
	return m.Size()
}
func (m *AdminListCoupons) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListCoupons.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListCoupons proto.InternalMessageInfo

type AdminListCoupons_Input struct {
}

func (m *AdminListCoupons_Input) Reset()         { *m = AdminListCoupons_Input{} }
func (m *AdminListCoupons_Input) String() string { return proto.CompactTextString(m) }
func (*AdminListCoupons_Input) ProtoMessage()    {}
func (*AdminListCoupons_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{4, 0}
}
func (m *AdminListCoupons_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListCoupons_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListCoupons_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListCoupons_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListCoupons_Input.Merge(m, src)
}
func (m *AdminListCoupons_Input) XXX_Size() int {
	return m.Size()
}
func (m *AdminListCoupons_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListCoupons_Input.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListCoupons_Input proto.InternalMessageInfo

type AdminListCoupons_Output struct {
	Coupons []*pwdb.Coupon `protobuf:"bytes,1,rep,name=coupons,proto3" json:"coupons,omitempty"`
}

func (m *AdminListCoupons_Output) Reset()         { *m = AdminListCoupons_Output{} }
func (m *AdminListCoupons_Output) String() string { return proto.CompactTextString(m) }
func (*AdminListCoupons_Output) ProtoMessage()    {}
func (*AdminListCoupons_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{4, 1}
}
func (m *AdminListCoupons_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListCoupons_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListCoupons_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListCoupons_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListCoupons_Output.Merge(m, src)
}
func (m *AdminListCoupons_Output) XXX_Size() int {
	return m.Size()
}
func (m *AdminListCoupons_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListCoupons_Output.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListCoupons_Output proto.InternalMessageInfo

func (m *AdminListCoupons_Output) GetCoupons() []*pwdb.Coupon {
	if m != nil {
		return m.Coupons
	}
	return nil
}

type AdminListOrganizations struct {
}

func (m *AdminListOrganizations) Reset()         { *m = AdminListOrganizations{} }
func (m *AdminListOrganizations) String() string { return proto.CompactTextString(m) }
func (*AdminListOrganizations) ProtoMessage()    {}
func (*AdminListOrganizations) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{5}
}
func (m *AdminListOrganizations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListOrganizations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListOrganizations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListOrganizations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListOrganizations.Merge(m, src)
}
func (m *AdminListOrganizations) XXX_Size() int {
	return m.Size()
}
func (m *AdminListOrganizations) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListOrganizations.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListOrganizations proto.InternalMessageInfo

type AdminListOrganizations_Input struct {
}

func (m *AdminListOrganizations_Input) Reset()         { *m = AdminListOrganizations_Input{} }
func (m *AdminListOrganizations_Input) String() string { return proto.CompactTextString(m) }
func (*AdminListOrganizations_Input) ProtoMessage()    {}
func (*AdminListOrganizations_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{5, 0}
}
func (m *AdminListOrganizations_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListOrganizations_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListOrganizations_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListOrganizations_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListOrganizations_Input.Merge(m, src)
}
func (m *AdminListOrganizations_Input) XXX_Size() int {
	return m.Size()
}
func (m *AdminListOrganizations_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListOrganizations_Input.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListOrganizations_Input proto.InternalMessageInfo

type AdminListOrganizations_Output struct {
	Organizations []*pwdb.Organization `protobuf:"bytes,1,rep,name=organizations,proto3" json:"organizations,omitempty"`
}

func (m *AdminListOrganizations_Output) Reset()         { *m = AdminListOrganizations_Output{} }
func (m *AdminListOrganizations_Output) String() string { return proto.CompactTextString(m) }
func (*AdminListOrganizations_Output) ProtoMessage()    {}
func (*AdminListOrganizations_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{5, 1}
}
func (m *AdminListOrganizations_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListOrganizations_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListOrganizations_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListOrganizations_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListOrganizations_Output.Merge(m, src)
}
func (m *AdminListOrganizations_Output) XXX_Size() int {
	return m.Size()
}
func (m *AdminListOrganizations_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListOrganizations_Output.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListOrganizations_Output proto.InternalMessageInfo

func (m *AdminListOrganizations_Output) GetOrganizations() []*pwdb.Organization {
	if m != nil {
		return m.Organizations
	}
	return nil
}

type AdminListUsers struct {
}

func (m *AdminListUsers) Reset()         { *m = AdminListUsers{} }
func (m *AdminListUsers) String() string { return proto.CompactTextString(m) }
func (*AdminListUsers) ProtoMessage()    {}
func (*AdminListUsers) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{6}
}
func (m *AdminListUsers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListUsers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListUsers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListUsers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListUsers.Merge(m, src)
}
func (m *AdminListUsers) XXX_Size() int {
	return m.Size()
}
func (m *AdminListUsers) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListUsers.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListUsers proto.InternalMessageInfo

type AdminListUsers_Input struct {
}

func (m *AdminListUsers_Input) Reset()         { *m = AdminListUsers_Input{} }
func (m *AdminListUsers_Input) String() string { return proto.CompactTextString(m) }
func (*AdminListUsers_Input) ProtoMessage()    {}
func (*AdminListUsers_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{6, 0}
}
func (m *AdminListUsers_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListUsers_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListUsers_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListUsers_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListUsers_Input.Merge(m, src)
}
func (m *AdminListUsers_Input) XXX_Size() int {
	return m.Size()
}
func (m *AdminListUsers_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListUsers_Input.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListUsers_Input proto.InternalMessageInfo

type AdminListUsers_Output struct {
	Users []*pwdb.User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (m *AdminListUsers_Output) Reset()         { *m = AdminListUsers_Output{} }
func (m *AdminListUsers_Output) String() string { return proto.CompactTextString(m) }
func (*AdminListUsers_Output) ProtoMessage()    {}
func (*AdminListUsers_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{6, 1}
}
func (m *AdminListUsers_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListUsers_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListUsers_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListUsers_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListUsers_Output.Merge(m, src)
}
func (m *AdminListUsers_Output) XXX_Size() int {
	return m.Size()
}
func (m *AdminListUsers_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListUsers_Output.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListUsers_Output proto.InternalMessageInfo

func (m *AdminListUsers_Output) GetUsers() []*pwdb.User {
	if m != nil {
		return m.Users
	}
	return nil
}

type AdminListChallengeSubscriptions struct {
}

func (m *AdminListChallengeSubscriptions) Reset()         { *m = AdminListChallengeSubscriptions{} }
func (m *AdminListChallengeSubscriptions) String() string { return proto.CompactTextString(m) }
func (*AdminListChallengeSubscriptions) ProtoMessage()    {}
func (*AdminListChallengeSubscriptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{7}
}
func (m *AdminListChallengeSubscriptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListChallengeSubscriptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListChallengeSubscriptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListChallengeSubscriptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListChallengeSubscriptions.Merge(m, src)
}
func (m *AdminListChallengeSubscriptions) XXX_Size() int {
	return m.Size()
}
func (m *AdminListChallengeSubscriptions) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListChallengeSubscriptions.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListChallengeSubscriptions proto.InternalMessageInfo

type AdminListChallengeSubscriptions_Input struct {
}

func (m *AdminListChallengeSubscriptions_Input) Reset()         { *m = AdminListChallengeSubscriptions_Input{} }
func (m *AdminListChallengeSubscriptions_Input) String() string { return proto.CompactTextString(m) }
func (*AdminListChallengeSubscriptions_Input) ProtoMessage()    {}
func (*AdminListChallengeSubscriptions_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{7, 0}
}
func (m *AdminListChallengeSubscriptions_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListChallengeSubscriptions_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListChallengeSubscriptions_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListChallengeSubscriptions_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListChallengeSubscriptions_Input.Merge(m, src)
}
func (m *AdminListChallengeSubscriptions_Input) XXX_Size() int {
	return m.Size()
}
func (m *AdminListChallengeSubscriptions_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListChallengeSubscriptions_Input.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListChallengeSubscriptions_Input proto.InternalMessageInfo

type AdminListChallengeSubscriptions_Output struct {
	Subscriptions []*pwdb.ChallengeSubscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (m *AdminListChallengeSubscriptions_Output) Reset() {
	*m = AdminListChallengeSubscriptions_Output{}
}
func (m *AdminListChallengeSubscriptions_Output) String() string { return proto.CompactTextString(m) }
func (*AdminListChallengeSubscriptions_Output) ProtoMessage()    {}
func (*AdminListChallengeSubscriptions_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{7, 1}
}
func (m *AdminListChallengeSubscriptions_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListChallengeSubscriptions_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListChallengeSubscriptions_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListChallengeSubscriptions_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListChallengeSubscriptions_Output.Merge(m, src)
}
func (m *AdminListChallengeSubscriptions_Output) XXX_Size() int {
	return m.Size()
}
func (m *AdminListChallengeSubscriptions_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListChallengeSubscriptions_Output.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListChallengeSubscriptions_Output proto.InternalMessageInfo

func (m *AdminListChallengeSubscriptions_Output) GetSubscriptions() []*pwdb.ChallengeSubscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

type AdminListAll struct {
}

func (m *AdminListAll) Reset()         { *m = AdminListAll{} }
func (m *AdminListAll) String() string { return proto.CompactTextString(m) }
func (*AdminListAll) ProtoMessage()    {}
func (*AdminListAll) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{8}
}
func (m *AdminListAll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListAll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListAll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListAll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListAll.Merge(m, src)
}
func (m *AdminListAll) XXX_Size() int {
	return m.Size()
}
func (m *AdminListAll) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListAll.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListAll proto.InternalMessageInfo

type AdminListAll_Input struct {
}

func (m *AdminListAll_Input) Reset()         { *m = AdminListAll_Input{} }
func (m *AdminListAll_Input) String() string { return proto.CompactTextString(m) }
func (*AdminListAll_Input) ProtoMessage()    {}
func (*AdminListAll_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{8, 0}
}
func (m *AdminListAll_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListAll_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListAll_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListAll_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListAll_Input.Merge(m, src)
}
func (m *AdminListAll_Input) XXX_Size() int {
	return m.Size()
}
func (m *AdminListAll_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListAll_Input.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListAll_Input proto.InternalMessageInfo

type AdminListAll_Output struct {
	Challenges             []*pwdb.Challenge             `protobuf:"bytes,1,rep,name=challenges,proto3" json:"challenges,omitempty"`
	ChallengeFlavors       []*pwdb.ChallengeFlavor       `protobuf:"bytes,2,rep,name=challenge_flavors,json=challengeFlavors,proto3" json:"challenge_flavors,omitempty"`
	SeasonChallenges       []*pwdb.SeasonChallenge       `protobuf:"bytes,3,rep,name=season_challenges,json=seasonChallenges,proto3" json:"season_challenges,omitempty"`
	ChallengeInstances     []*pwdb.ChallengeInstance     `protobuf:"bytes,4,rep,name=challenge_instances,json=challengeInstances,proto3" json:"challenge_instances,omitempty"`
	Agents                 []*pwdb.Agent                 `protobuf:"bytes,5,rep,name=agents,proto3" json:"agents,omitempty"`
	OrganizationMembers    []*pwdb.OrganizationMember    `protobuf:"bytes,6,rep,name=organization_members,json=organizationMembers,proto3" json:"organization_members,omitempty"`
	TeamMembers            []*pwdb.TeamMember            `protobuf:"bytes,7,rep,name=team_members,json=teamMembers,proto3" json:"team_members,omitempty"`
	TeamInvites            []*pwdb.TeamInvite            `protobuf:"bytes,8,rep,name=team_invites,json=teamInvites,proto3" json:"team_invites,omitempty"`
	Users                  []*pwdb.User                  `protobuf:"bytes,9,rep,name=users,proto3" json:"users,omitempty"`
	Organizations          []*pwdb.Organization          `protobuf:"bytes,10,rep,name=organizations,proto3" json:"organizations,omitempty"`
	Seasons                []*pwdb.Season                `protobuf:"bytes,11,rep,name=seasons,proto3" json:"seasons,omitempty"`
	Teams                  []*pwdb.Team                  `protobuf:"bytes,12,rep,name=teams,proto3" json:"teams,omitempty"`
	WhoswhoAttempts        []*pwdb.WhoswhoAttempt        `protobuf:"bytes,13,rep,name=whoswho_attempts,json=whoswhoAttempts,proto3" json:"whoswho_attempts,omitempty"`
	ChallengeValidations   []*pwdb.ChallengeValidation   `protobuf:"bytes,14,rep,name=challenge_validations,json=challengeValidations,proto3" json:"challenge_validations,omitempty"`
	ChallengeSubscriptions []*pwdb.ChallengeSubscription `protobuf:"bytes,15,rep,name=challenge_subscriptions,json=challengeSubscriptions,proto3" json:"challenge_subscriptions,omitempty"`
	InventoryItems         []*pwdb.InventoryItem         `protobuf:"bytes,16,rep,name=inventory_items,json=inventoryItems,proto3" json:"inventory_items,omitempty"`
	Notifications          []*pwdb.Notification          `protobuf:"bytes,17,rep,name=notifications,proto3" json:"notifications,omitempty"`
	Coupons                []*pwdb.Coupon                `protobuf:"bytes,18,rep,name=coupons,proto3" json:"coupons,omitempty"`
	CouponValidations      []*pwdb.CouponValidation      `protobuf:"bytes,19,rep,name=coupon_validations,json=couponValidations,proto3" json:"coupon_validations,omitempty"`
	Achievements           []*pwdb.Achievement           `protobuf:"bytes,20,rep,name=achievements,proto3" json:"achievements,omitempty"`
	Activities             []*pwdb.Activity              `protobuf:"bytes,21,rep,name=activities,proto3" json:"activities,omitempty"`
}

func (m *AdminListAll_Output) Reset()         { *m = AdminListAll_Output{} }
func (m *AdminListAll_Output) String() string { return proto.CompactTextString(m) }
func (*AdminListAll_Output) ProtoMessage()    {}
func (*AdminListAll_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{8, 1}
}
func (m *AdminListAll_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListAll_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListAll_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListAll_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListAll_Output.Merge(m, src)
}
func (m *AdminListAll_Output) XXX_Size() int {
	return m.Size()
}
func (m *AdminListAll_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListAll_Output.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListAll_Output proto.InternalMessageInfo

func (m *AdminListAll_Output) GetChallenges() []*pwdb.Challenge {
	if m != nil {
		return m.Challenges
	}
	return nil
}

func (m *AdminListAll_Output) GetChallengeFlavors() []*pwdb.ChallengeFlavor {
	if m != nil {
		return m.ChallengeFlavors
	}
	return nil
}

func (m *AdminListAll_Output) GetSeasonChallenges() []*pwdb.SeasonChallenge {
	if m != nil {
		return m.SeasonChallenges
	}
	return nil
}

func (m *AdminListAll_Output) GetChallengeInstances() []*pwdb.ChallengeInstance {
	if m != nil {
		return m.ChallengeInstances
	}
	return nil
}

func (m *AdminListAll_Output) GetAgents() []*pwdb.Agent {
	if m != nil {
		return m.Agents
	}
	return nil
}

func (m *AdminListAll_Output) GetOrganizationMembers() []*pwdb.OrganizationMember {
	if m != nil {
		return m.OrganizationMembers
	}
	return nil
}

func (m *AdminListAll_Output) GetTeamMembers() []*pwdb.TeamMember {
	if m != nil {
		return m.TeamMembers
	}
	return nil
}

func (m *AdminListAll_Output) GetTeamInvites() []*pwdb.TeamInvite {
	if m != nil {
		return m.TeamInvites
	}
	return nil
}

func (m *AdminListAll_Output) GetUsers() []*pwdb.User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *AdminListAll_Output) GetOrganizations() []*pwdb.Organization {
	if m != nil {
		return m.Organizations
	}
	return nil
}

func (m *AdminListAll_Output) GetSeasons() []*pwdb.Season {
	if m != nil {
		return m.Seasons
	}
	return nil
}

func (m *AdminListAll_Output) GetTeams() []*pwdb.Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *AdminListAll_Output) GetWhoswhoAttempts() []*pwdb.WhoswhoAttempt {
	if m != nil {
		return m.WhoswhoAttempts
	}
	return nil
}

func (m *AdminListAll_Output) GetChallengeValidations() []*pwdb.ChallengeValidation {
	if m != nil {
		return m.ChallengeValidations
	}
	return nil
}

func (m *AdminListAll_Output) GetChallengeSubscriptions() []*pwdb.ChallengeSubscription {
	if m != nil {
		return m.ChallengeSubscriptions
	}
	return nil
}

func (m *AdminListAll_Output) GetInventoryItems() []*pwdb.InventoryItem {
	if m != nil {
		return m.InventoryItems
	}
	return nil
}

func (m *AdminListAll_Output) GetNotifications() []*pwdb.Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func (m *AdminListAll_Output) GetCoupons() []*pwdb.Coupon {
	if m != nil {
		return m.Coupons
	}
	return nil
}

func (m *AdminListAll_Output) GetCouponValidations() []*pwdb.CouponValidation {
	if m != nil {
		return m.CouponValidations
	}
	return nil
}

func (m *AdminListAll_Output) GetAchievements() []*pwdb.Achievement {
	if m != nil {
		return m.Achievements
	}
	return nil
}

func (m *AdminListAll_Output) GetActivities() []*pwdb.Activity {
	if m != nil {
		return m.Activities
	}
	return nil
}

type AdminSearch struct {
}

func (m *AdminSearch) Reset()         { *m = AdminSearch{} }
func (m *AdminSearch) String() string { return proto.CompactTextString(m) }
func (*AdminSearch) ProtoMessage()    {}
func (*AdminSearch) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{9}
}
func (m *AdminSearch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminSearch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminSearch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminSearch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminSearch.Merge(m, src)
}
func (m *AdminSearch) XXX_Size() int {
	return m.Size()
}
func (m *AdminSearch) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminSearch.DiscardUnknown(m)
}

var xxx_messageInfo_AdminSearch proto.InternalMessageInfo

type AdminSearch_Input struct {
	Search string `protobuf:"bytes,1,opt,name=search,proto3" json:"search,omitempty"`
}

func (m *AdminSearch_Input) Reset()         { *m = AdminSearch_Input{} }
func (m *AdminSearch_Input) String() string { return proto.CompactTextString(m) }
func (*AdminSearch_Input) ProtoMessage()    {}
func (*AdminSearch_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{9, 0}
}
func (m *AdminSearch_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminSearch_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminSearch_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminSearch_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminSearch_Input.Merge(m, src)
}
func (m *AdminSearch_Input) XXX_Size() int {
	return m.Size()
}
func (m *AdminSearch_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminSearch_Input.DiscardUnknown(m)
}

var xxx_messageInfo_AdminSearch_Input proto.InternalMessageInfo

func (m *AdminSearch_Input) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

type AdminSearch_Output struct {
	Challenges             []*pwdb.Challenge             `protobuf:"bytes,1,rep,name=challenges,proto3" json:"challenges,omitempty"`
	ChallengeFlavors       []*pwdb.ChallengeFlavor       `protobuf:"bytes,2,rep,name=challenge_flavors,json=challengeFlavors,proto3" json:"challenge_flavors,omitempty"`
	SeasonChallenges       []*pwdb.SeasonChallenge       `protobuf:"bytes,3,rep,name=season_challenges,json=seasonChallenges,proto3" json:"season_challenges,omitempty"`
	ChallengeInstances     []*pwdb.ChallengeInstance     `protobuf:"bytes,4,rep,name=challenge_instances,json=challengeInstances,proto3" json:"challenge_instances,omitempty"`
	Agents                 []*pwdb.Agent                 `protobuf:"bytes,5,rep,name=agents,proto3" json:"agents,omitempty"`
	OrganizationMembers    []*pwdb.OrganizationMember    `protobuf:"bytes,6,rep,name=organization_members,json=organizationMembers,proto3" json:"organization_members,omitempty"`
	TeamMembers            []*pwdb.TeamMember            `protobuf:"bytes,7,rep,name=team_members,json=teamMembers,proto3" json:"team_members,omitempty"`
	Users                  []*pwdb.User                  `protobuf:"bytes,8,rep,name=users,proto3" json:"users,omitempty"`
	Organizations          []*pwdb.Organization          `protobuf:"bytes,9,rep,name=organizations,proto3" json:"organizations,omitempty"`
	Seasons                []*pwdb.Season                `protobuf:"bytes,10,rep,name=seasons,proto3" json:"seasons,omitempty"`
	Teams                  []*pwdb.Team                  `protobuf:"bytes,11,rep,name=teams,proto3" json:"teams,omitempty"`
	WhoswhoAttempts        []*pwdb.WhoswhoAttempt        `protobuf:"bytes,12,rep,name=whoswho_attempts,json=whoswhoAttempts,proto3" json:"whoswho_attempts,omitempty"`
	ChallengeValidations   []*pwdb.ChallengeValidation   `protobuf:"bytes,13,rep,name=challenge_validations,json=challengeValidations,proto3" json:"challenge_validations,omitempty"`
	ChallengeSubscriptions []*pwdb.ChallengeSubscription `protobuf:"bytes,14,rep,name=challenge_subscriptions,json=challengeSubscriptions,proto3" json:"challenge_subscriptions,omitempty"`
	InventoryItems         []*pwdb.InventoryItem         `protobuf:"bytes,15,rep,name=inventory_items,json=inventoryItems,proto3" json:"inventory_items,omitempty"`
	Notifications          []*pwdb.Notification          `protobuf:"bytes,16,rep,name=notifications,proto3" json:"notifications,omitempty"`
	Coupons                []*pwdb.Coupon                `protobuf:"bytes,17,rep,name=coupons,proto3" json:"coupons,omitempty"`
	CouponValidations      []*pwdb.CouponValidation      `protobuf:"bytes,18,rep,name=coupon_validations,json=couponValidations,proto3" json:"coupon_validations,omitempty"`
	Achievements           []*pwdb.Achievement           `protobuf:"bytes,19,rep,name=achievements,proto3" json:"achievements,omitempty"`
	Activities             []*pwdb.Activity              `protobuf:"bytes,20,rep,name=activities,proto3" json:"activities,omitempty"`
}

func (m *AdminSearch_Output) Reset()         { *m = AdminSearch_Output{} }
func (m *AdminSearch_Output) String() string { return proto.CompactTextString(m) }
func (*AdminSearch_Output) ProtoMessage()    {}
func (*AdminSearch_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{9, 1}
}
func (m *AdminSearch_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminSearch_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminSearch_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminSearch_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminSearch_Output.Merge(m, src)
}
func (m *AdminSearch_Output) XXX_Size() int {
	return m.Size()
}
func (m *AdminSearch_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminSearch_Output.DiscardUnknown(m)
}

var xxx_messageInfo_AdminSearch_Output proto.InternalMessageInfo

func (m *AdminSearch_Output) GetChallenges() []*pwdb.Challenge {
	if m != nil {
		return m.Challenges
	}
	return nil
}

func (m *AdminSearch_Output) GetChallengeFlavors() []*pwdb.ChallengeFlavor {
	if m != nil {
		return m.ChallengeFlavors
	}
	return nil
}

func (m *AdminSearch_Output) GetSeasonChallenges() []*pwdb.SeasonChallenge {
	if m != nil {
		return m.SeasonChallenges
	}
	return nil
}

func (m *AdminSearch_Output) GetChallengeInstances() []*pwdb.ChallengeInstance {
	if m != nil {
		return m.ChallengeInstances
	}
	return nil
}

func (m *AdminSearch_Output) GetAgents() []*pwdb.Agent {
	if m != nil {
		return m.Agents
	}
	return nil
}

func (m *AdminSearch_Output) GetOrganizationMembers() []*pwdb.OrganizationMember {
	if m != nil {
		return m.OrganizationMembers
	}
	return nil
}

func (m *AdminSearch_Output) GetTeamMembers() []*pwdb.TeamMember {
	if m != nil {
		return m.TeamMembers
	}
	return nil
}

func (m *AdminSearch_Output) GetUsers() []*pwdb.User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *AdminSearch_Output) GetOrganizations() []*pwdb.Organization {
	if m != nil {
		return m.Organizations
	}
	return nil
}

func (m *AdminSearch_Output) GetSeasons() []*pwdb.Season {
	if m != nil {
		return m.Seasons
	}
	return nil
}

func (m *AdminSearch_Output) GetTeams() []*pwdb.Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *AdminSearch_Output) GetWhoswhoAttempts() []*pwdb.WhoswhoAttempt {
	if m != nil {
		return m.WhoswhoAttempts
	}
	return nil
}

func (m *AdminSearch_Output) GetChallengeValidations() []*pwdb.ChallengeValidation {
	if m != nil {
		return m.ChallengeValidations
	}
	return nil
}

func (m *AdminSearch_Output) GetChallengeSubscriptions() []*pwdb.ChallengeSubscription {
	if m != nil {
		return m.ChallengeSubscriptions
	}
	return nil
}

func (m *AdminSearch_Output) GetInventoryItems() []*pwdb.InventoryItem {
	if m != nil {
		return m.InventoryItems
	}
	return nil
}

func (m *AdminSearch_Output) GetNotifications() []*pwdb.Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func (m *AdminSearch_Output) GetCoupons() []*pwdb.Coupon {
	if m != nil {
		return m.Coupons
	}
	return nil
}

func (m *AdminSearch_Output) GetCouponValidations() []*pwdb.CouponValidation {
	if m != nil {
		return m.CouponValidations
	}
	return nil
}

func (m *AdminSearch_Output) GetAchievements() []*pwdb.Achievement {
	if m != nil {
		return m.Achievements
	}
	return nil
}

func (m *AdminSearch_Output) GetActivities() []*pwdb.Activity {
	if m != nil {
		return m.Activities
	}
	return nil
}

type AdminListTeams struct {
}

func (m *AdminListTeams) Reset()         { *m = AdminListTeams{} }
func (m *AdminListTeams) String() string { return proto.CompactTextString(m) }
func (*AdminListTeams) ProtoMessage()    {}
func (*AdminListTeams) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{10}
}
func (m *AdminListTeams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListTeams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListTeams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListTeams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListTeams.Merge(m, src)
}
func (m *AdminListTeams) XXX_Size() int {
	return m.Size()
}
func (m *AdminListTeams) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListTeams.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListTeams proto.InternalMessageInfo

type AdminListTeams_Input struct {
}

func (m *AdminListTeams_Input) Reset()         { *m = AdminListTeams_Input{} }
func (m *AdminListTeams_Input) String() string { return proto.CompactTextString(m) }
func (*AdminListTeams_Input) ProtoMessage()    {}
func (*AdminListTeams_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{10, 0}
}
func (m *AdminListTeams_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListTeams_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListTeams_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListTeams_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListTeams_Input.Merge(m, src)
}
func (m *AdminListTeams_Input) XXX_Size() int {
	return m.Size()
}
func (m *AdminListTeams_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListTeams_Input.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListTeams_Input proto.InternalMessageInfo

type AdminListTeams_Output struct {
	Teams []*pwdb.Team `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (m *AdminListTeams_Output) Reset()         { *m = AdminListTeams_Output{} }
func (m *AdminListTeams_Output) String() string { return proto.CompactTextString(m) }
func (*AdminListTeams_Output) ProtoMessage()    {}
func (*AdminListTeams_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{10, 1}
}
func (m *AdminListTeams_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListTeams_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListTeams_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListTeams_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListTeams_Output.Merge(m, src)
}
func (m *AdminListTeams_Output) XXX_Size() int {
	return m.Size()
}
func (m *AdminListTeams_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListTeams_Output.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListTeams_Output proto.InternalMessageInfo

func (m *AdminListTeams_Output) GetTeams() []*pwdb.Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

type AdminListActivities struct {
}

func (m *AdminListActivities) Reset()         { *m = AdminListActivities{} }
func (m *AdminListActivities) String() string { return proto.CompactTextString(m) }
func (*AdminListActivities) ProtoMessage()    {}
func (*AdminListActivities) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{11}
}
func (m *AdminListActivities) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListActivities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListActivities.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListActivities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListActivities.Merge(m, src)
}
func (m *AdminListActivities) XXX_Size() int {
	return m.Size()
}
func (m *AdminListActivities) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListActivities.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListActivities proto.InternalMessageInfo

type AdminListActivities_Input struct {
	Limit           int64      `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Since           *time.Time `protobuf:"bytes,2,opt,name=since,proto3,stdtime" json:"since,omitempty"`
	FilteringPreset string     `protobuf:"bytes,3,opt,name=filtering_preset,json=filteringPreset,proto3" json:"filtering_preset,omitempty"`
}

func (m *AdminListActivities_Input) Reset()         { *m = AdminListActivities_Input{} }
func (m *AdminListActivities_Input) String() string { return proto.CompactTextString(m) }
func (*AdminListActivities_Input) ProtoMessage()    {}
func (*AdminListActivities_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{11, 0}
}
func (m *AdminListActivities_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListActivities_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListActivities_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListActivities_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListActivities_Input.Merge(m, src)
}
func (m *AdminListActivities_Input) XXX_Size() int {
	return m.Size()
}
func (m *AdminListActivities_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListActivities_Input.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListActivities_Input proto.InternalMessageInfo

func (m *AdminListActivities_Input) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *AdminListActivities_Input) GetSince() *time.Time {
	if m != nil {
		return m.Since
	}
	return nil
}

func (m *AdminListActivities_Input) GetFilteringPreset() string {
	if m != nil {
		return m.FilteringPreset
	}
	return ""
}

type AdminListActivities_Output struct {
	Activities []*pwdb.Activity `protobuf:"bytes,1,rep,name=activities,proto3" json:"activities,omitempty"`
}

func (m *AdminListActivities_Output) Reset()         { *m = AdminListActivities_Output{} }
func (m *AdminListActivities_Output) String() string { return proto.CompactTextString(m) }
func (*AdminListActivities_Output) ProtoMessage()    {}
func (*AdminListActivities_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{11, 1}
}
func (m *AdminListActivities_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListActivities_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListActivities_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListActivities_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListActivities_Output.Merge(m, src)
}
func (m *AdminListActivities_Output) XXX_Size() int {
	return m.Size()
}
func (m *AdminListActivities_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListActivities_Output.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListActivities_Output proto.InternalMessageInfo

func (m *AdminListActivities_Output) GetActivities() []*pwdb.Activity {
	if m != nil {
		return m.Activities
	}
	return nil
}

type AdminChallengeAdd struct {
}

func (m *AdminChallengeAdd) Reset()         { *m = AdminChallengeAdd{} }
func (m *AdminChallengeAdd) String() string { return proto.CompactTextString(m) }
func (*AdminChallengeAdd) ProtoMessage()    {}
func (*AdminChallengeAdd) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{12}
}
func (m *AdminChallengeAdd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminChallengeAdd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminChallengeAdd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminChallengeAdd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminChallengeAdd.Merge(m, src)
}
func (m *AdminChallengeAdd) XXX_Size() int {
	return m.Size()
}
func (m *AdminChallengeAdd) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminChallengeAdd.DiscardUnknown(m)
}

var xxx_messageInfo_AdminChallengeAdd proto.InternalMessageInfo

type AdminChallengeAdd_Input struct {
	Challenge *pwdb.Challenge `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (m *AdminChallengeAdd_Input) Reset()         { *m = AdminChallengeAdd_Input{} }
func (m *AdminChallengeAdd_Input) String() string { return proto.CompactTextString(m) }
func (*AdminChallengeAdd_Input) ProtoMessage()    {}
func (*AdminChallengeAdd_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{12, 0}
}
func (m *AdminChallengeAdd_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminChallengeAdd_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminChallengeAdd_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminChallengeAdd_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminChallengeAdd_Input.Merge(m, src)
}
func (m *AdminChallengeAdd_Input) XXX_Size() int {
	return m.Size()
}
func (m *AdminChallengeAdd_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminChallengeAdd_Input.DiscardUnknown(m)
}

var xxx_messageInfo_AdminChallengeAdd_Input proto.InternalMessageInfo

func (m *AdminChallengeAdd_Input) GetChallenge() *pwdb.Challenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

type AdminChallengeAdd_Output struct {
	Challenge *pwdb.Challenge `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (m *AdminChallengeAdd_Output) Reset()         { *m = AdminChallengeAdd_Output{} }
func (m *AdminChallengeAdd_Output) String() string { return proto.CompactTextString(m) }
func (*AdminChallengeAdd_Output) ProtoMessage()    {}
func (*AdminChallengeAdd_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{12, 1}
}
func (m *AdminChallengeAdd_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminChallengeAdd_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminChallengeAdd_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminChallengeAdd_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminChallengeAdd_Output.Merge(m, src)
}
func (m *AdminChallengeAdd_Output) XXX_Size() int {
	return m.Size()
}
func (m *AdminChallengeAdd_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminChallengeAdd_Output.DiscardUnknown(m)
}

var xxx_messageInfo_AdminChallengeAdd_Output proto.InternalMessageInfo

func (m *AdminChallengeAdd_Output) GetChallenge() *pwdb.Challenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

type AdminChallengeRedump struct {
}

func (m *AdminChallengeRedump) Reset()         { *m = AdminChallengeRedump{} }
func (m *AdminChallengeRedump) String() string { return proto.CompactTextString(m) }
func (*AdminChallengeRedump) ProtoMessage()    {}
func (*AdminChallengeRedump) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{13}
}
func (m *AdminChallengeRedump) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminChallengeRedump) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminChallengeRedump.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminChallengeRedump) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminChallengeRedump.Merge(m, src)
}
func (m *AdminChallengeRedump) XXX_Size() int {
	return m.Size()
}
func (m *AdminChallengeRedump) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminChallengeRedump.DiscardUnknown(m)
}

var xxx_messageInfo_AdminChallengeRedump proto.InternalMessageInfo

type AdminChallengeRedump_Input struct {
	ChallengeID string `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (m *AdminChallengeRedump_Input) Reset()         { *m = AdminChallengeRedump_Input{} }
func (m *AdminChallengeRedump_Input) String() string { return proto.CompactTextString(m) }
func (*AdminChallengeRedump_Input) ProtoMessage()    {}
func (*AdminChallengeRedump_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{13, 0}
}
func (m *AdminChallengeRedump_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminChallengeRedump_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminChallengeRedump_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminChallengeRedump_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminChallengeRedump_Input.Merge(m, src)
}
func (m *AdminChallengeRedump_Input) XXX_Size() int {
	return m.Size()
}
func (m *AdminChallengeRedump_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminChallengeRedump_Input.DiscardUnknown(m)
}

var xxx_messageInfo_AdminChallengeRedump_Input proto.InternalMessageInfo

func (m *AdminChallengeRedump_Input) GetChallengeID() string {
	if m != nil {
		return m.ChallengeID
	}
	return ""
}

type AdminChallengeRedump_Output struct {
	ChallengeInstances []*pwdb.ChallengeInstance `protobuf:"bytes,1,rep,name=challenge_instances,json=challengeInstances,proto3" json:"challenge_instances,omitempty"`
}

func (m *AdminChallengeRedump_Output) Reset()         { *m = AdminChallengeRedump_Output{} }
func (m *AdminChallengeRedump_Output) String() string { return proto.CompactTextString(m) }
func (*AdminChallengeRedump_Output) ProtoMessage()    {}
func (*AdminChallengeRedump_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{13, 1}
}
func (m *AdminChallengeRedump_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminChallengeRedump_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminChallengeRedump_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminChallengeRedump_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminChallengeRedump_Output.Merge(m, src)
}
func (m *AdminChallengeRedump_Output) XXX_Size() int {
	return m.Size()
}
func (m *AdminChallengeRedump_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminChallengeRedump_Output.DiscardUnknown(m)
}

var xxx_messageInfo_AdminChallengeRedump_Output proto.InternalMessageInfo

func (m *AdminChallengeRedump_Output) GetChallengeInstances() []*pwdb.ChallengeInstance {
	if m != nil {
		return m.ChallengeInstances
	}
	return nil
}

type AdminChallengeFlavorAdd struct {
}

func (m *AdminChallengeFlavorAdd) Reset()         { *m = AdminChallengeFlavorAdd{} }
func (m *AdminChallengeFlavorAdd) String() string { return proto.CompactTextString(m) }
func (*AdminChallengeFlavorAdd) ProtoMessage()    {}
func (*AdminChallengeFlavorAdd) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{14}
}
func (m *AdminChallengeFlavorAdd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminChallengeFlavorAdd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminChallengeFlavorAdd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminChallengeFlavorAdd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminChallengeFlavorAdd.Merge(m, src)
}
func (m *AdminChallengeFlavorAdd) XXX_Size() int {
	return m.Size()
}
func (m *AdminChallengeFlavorAdd) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminChallengeFlavorAdd.DiscardUnknown(m)
}

var xxx_messageInfo_AdminChallengeFlavorAdd proto.InternalMessageInfo

type AdminChallengeFlavorAdd_Input struct {
	ChallengeFlavor *pwdb.ChallengeFlavor `protobuf:"bytes,1,opt,name=challenge_flavor,json=challengeFlavor,proto3" json:"challenge_flavor,omitempty"`
	ChallengeID     string                `protobuf:"bytes,2,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (m *AdminChallengeFlavorAdd_Input) Reset()         { *m = AdminChallengeFlavorAdd_Input{} }
func (m *AdminChallengeFlavorAdd_Input) String() string { return proto.CompactTextString(m) }
func (*AdminChallengeFlavorAdd_Input) ProtoMessage()    {}
func (*AdminChallengeFlavorAdd_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{14, 0}
}
func (m *AdminChallengeFlavorAdd_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminChallengeFlavorAdd_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminChallengeFlavorAdd_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminChallengeFlavorAdd_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminChallengeFlavorAdd_Input.Merge(m, src)
}
func (m *AdminChallengeFlavorAdd_Input) XXX_Size() int {
	return m.Size()
}
func (m *AdminChallengeFlavorAdd_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminChallengeFlavorAdd_Input.DiscardUnknown(m)
}

var xxx_messageInfo_AdminChallengeFlavorAdd_Input proto.InternalMessageInfo

func (m *AdminChallengeFlavorAdd_Input) GetChallengeFlavor() *pwdb.ChallengeFlavor {
	if m != nil {
		return m.ChallengeFlavor
	}
	return nil
}

func (m *AdminChallengeFlavorAdd_Input) GetChallengeID() string {
	if m != nil {
		return m.ChallengeID
	}
	return ""
}

type AdminChallengeFlavorAdd_Output struct {
	ChallengeFlavor *pwdb.ChallengeFlavor `protobuf:"bytes,1,opt,name=challenge_flavor,json=challengeFlavor,proto3" json:"challenge_flavor,omitempty"`
}

func (m *AdminChallengeFlavorAdd_Output) Reset()         { *m = AdminChallengeFlavorAdd_Output{} }
func (m *AdminChallengeFlavorAdd_Output) String() string { return proto.CompactTextString(m) }
func (*AdminChallengeFlavorAdd_Output) ProtoMessage()    {}
func (*AdminChallengeFlavorAdd_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{14, 1}
}
func (m *AdminChallengeFlavorAdd_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminChallengeFlavorAdd_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminChallengeFlavorAdd_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminChallengeFlavorAdd_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminChallengeFlavorAdd_Output.Merge(m, src)
}
func (m *AdminChallengeFlavorAdd_Output) XXX_Size() int {
	return m.Size()
}
func (m *AdminChallengeFlavorAdd_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminChallengeFlavorAdd_Output.DiscardUnknown(m)
}

var xxx_messageInfo_AdminChallengeFlavorAdd_Output proto.InternalMessageInfo

func (m *AdminChallengeFlavorAdd_Output) GetChallengeFlavor() *pwdb.ChallengeFlavor {
	if m != nil {
		return m.ChallengeFlavor
	}
	return nil
}

type AdminSeasonChallengeAdd struct {
}

func (m *AdminSeasonChallengeAdd) Reset()         { *m = AdminSeasonChallengeAdd{} }
func (m *AdminSeasonChallengeAdd) String() string { return proto.CompactTextString(m) }
func (*AdminSeasonChallengeAdd) ProtoMessage()    {}
func (*AdminSeasonChallengeAdd) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{15}
}
func (m *AdminSeasonChallengeAdd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminSeasonChallengeAdd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminSeasonChallengeAdd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminSeasonChallengeAdd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminSeasonChallengeAdd.Merge(m, src)
}
func (m *AdminSeasonChallengeAdd) XXX_Size() int {
	return m.Size()
}
func (m *AdminSeasonChallengeAdd) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminSeasonChallengeAdd.DiscardUnknown(m)
}

var xxx_messageInfo_AdminSeasonChallengeAdd proto.InternalMessageInfo

type AdminSeasonChallengeAdd_Input struct {
	SeasonChallenge *pwdb.SeasonChallenge `protobuf:"bytes,1,opt,name=season_challenge,json=seasonChallenge,proto3" json:"season_challenge,omitempty"`
	FlavorID        string                `protobuf:"bytes,2,opt,name=flavor_id,json=flavorId,proto3" json:"flavor_id,omitempty"`
	SeasonID        string                `protobuf:"bytes,3,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
}

func (m *AdminSeasonChallengeAdd_Input) Reset()         { *m = AdminSeasonChallengeAdd_Input{} }
func (m *AdminSeasonChallengeAdd_Input) String() string { return proto.CompactTextString(m) }
func (*AdminSeasonChallengeAdd_Input) ProtoMessage()    {}
func (*AdminSeasonChallengeAdd_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{15, 0}
}
func (m *AdminSeasonChallengeAdd_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminSeasonChallengeAdd_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminSeasonChallengeAdd_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminSeasonChallengeAdd_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminSeasonChallengeAdd_Input.Merge(m, src)
}
func (m *AdminSeasonChallengeAdd_Input) XXX_Size() int {
	return m.Size()
}
func (m *AdminSeasonChallengeAdd_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminSeasonChallengeAdd_Input.DiscardUnknown(m)
}

var xxx_messageInfo_AdminSeasonChallengeAdd_Input proto.InternalMessageInfo

func (m *AdminSeasonChallengeAdd_Input) GetSeasonChallenge() *pwdb.SeasonChallenge {
	if m != nil {
		return m.SeasonChallenge
	}
	return nil
}

func (m *AdminSeasonChallengeAdd_Input) GetFlavorID() string {
	if m != nil {
		return m.FlavorID
	}
	return ""
}

func (m *AdminSeasonChallengeAdd_Input) GetSeasonID() string {
	if m != nil {
		return m.SeasonID
	}
	return ""
}

type AdminSeasonChallengeAdd_Output struct {
	SeasonChallenge *pwdb.SeasonChallenge `protobuf:"bytes,1,opt,name=season_challenge,json=seasonChallenge,proto3" json:"season_challenge,omitempty"`
}

func (m *AdminSeasonChallengeAdd_Output) Reset()         { *m = AdminSeasonChallengeAdd_Output{} }
func (m *AdminSeasonChallengeAdd_Output) String() string { return proto.CompactTextString(m) }
func (*AdminSeasonChallengeAdd_Output) ProtoMessage()    {}
func (*AdminSeasonChallengeAdd_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{15, 1}
}
func (m *AdminSeasonChallengeAdd_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminSeasonChallengeAdd_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminSeasonChallengeAdd_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminSeasonChallengeAdd_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminSeasonChallengeAdd_Output.Merge(m, src)
}
func (m *AdminSeasonChallengeAdd_Output) XXX_Size() int {
	return m.Size()
}
func (m *AdminSeasonChallengeAdd_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminSeasonChallengeAdd_Output.DiscardUnknown(m)
}

var xxx_messageInfo_AdminSeasonChallengeAdd_Output proto.InternalMessageInfo

func (m *AdminSeasonChallengeAdd_Output) GetSeasonChallenge() *pwdb.SeasonChallenge {
	if m != nil {
		return m.SeasonChallenge
	}
	return nil
}

type AdminSeasonAdd struct {
}

func (m *AdminSeasonAdd) Reset()         { *m = AdminSeasonAdd{} }
func (m *AdminSeasonAdd) String() string { return proto.CompactTextString(m) }
func (*AdminSeasonAdd) ProtoMessage()    {}
func (*AdminSeasonAdd) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{16}
}
func (m *AdminSeasonAdd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminSeasonAdd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminSeasonAdd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminSeasonAdd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminSeasonAdd.Merge(m, src)
}
func (m *AdminSeasonAdd) XXX_Size() int {
	return m.Size()
}
func (m *AdminSeasonAdd) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminSeasonAdd.DiscardUnknown(m)
}

var xxx_messageInfo_AdminSeasonAdd proto.InternalMessageInfo

type AdminSeasonAdd_Input struct {
	Season *pwdb.Season `protobuf:"bytes,1,opt,name=season,proto3" json:"season,omitempty"`
}

func (m *AdminSeasonAdd_Input) Reset()         { *m = AdminSeasonAdd_Input{} }
func (m *AdminSeasonAdd_Input) String() string { return proto.CompactTextString(m) }
func (*AdminSeasonAdd_Input) ProtoMessage()    {}
func (*AdminSeasonAdd_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{16, 0}
}
func (m *AdminSeasonAdd_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminSeasonAdd_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminSeasonAdd_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminSeasonAdd_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminSeasonAdd_Input.Merge(m, src)
}
func (m *AdminSeasonAdd_Input) XXX_Size() int {
	return m.Size()
}
func (m *AdminSeasonAdd_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminSeasonAdd_Input.DiscardUnknown(m)
}

var xxx_messageInfo_AdminSeasonAdd_Input proto.InternalMessageInfo

func (m *AdminSeasonAdd_Input) GetSeason() *pwdb.Season {
	if m != nil {
		return m.Season
	}
	return nil
}

type AdminSeasonAdd_Output struct {
	Season *pwdb.Season `protobuf:"bytes,1,opt,name=season,proto3" json:"season,omitempty"`
}

func (m *AdminSeasonAdd_Output) Reset()         { *m = AdminSeasonAdd_Output{} }
func (m *AdminSeasonAdd_Output) String() string { return proto.CompactTextString(m) }
func (*AdminSeasonAdd_Output) ProtoMessage()    {}
func (*AdminSeasonAdd_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{16, 1}
}
func (m *AdminSeasonAdd_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminSeasonAdd_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminSeasonAdd_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminSeasonAdd_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminSeasonAdd_Output.Merge(m, src)
}
func (m *AdminSeasonAdd_Output) XXX_Size() int {
	return m.Size()
}
func (m *AdminSeasonAdd_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminSeasonAdd_Output.DiscardUnknown(m)
}

var xxx_messageInfo_AdminSeasonAdd_Output proto.InternalMessageInfo

func (m *AdminSeasonAdd_Output) GetSeason() *pwdb.Season {
	if m != nil {
		return m.Season
	}
	return nil
}

type AdminSetTeams struct {
}

func (m *AdminSetTeams) Reset()         { *m = AdminSetTeams{} }
func (m *AdminSetTeams) String() string { return proto.CompactTextString(m) }
func (*AdminSetTeams) ProtoMessage()    {}
func (*AdminSetTeams) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{17}
}
func (m *AdminSetTeams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminSetTeams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminSetTeams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminSetTeams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminSetTeams.Merge(m, src)
}
func (m *AdminSetTeams) XXX_Size() int {
	return m.Size()
}
func (m *AdminSetTeams) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminSetTeams.DiscardUnknown(m)
}

var xxx_messageInfo_AdminSetTeams proto.InternalMessageInfo

type AdminSetTeams_Input struct {
	Teams []*pwdb.Team `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (m *AdminSetTeams_Input) Reset()         { *m = AdminSetTeams_Input{} }
func (m *AdminSetTeams_Input) String() string { return proto.CompactTextString(m) }
func (*AdminSetTeams_Input) ProtoMessage()    {}
func (*AdminSetTeams_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{17, 0}
}
func (m *AdminSetTeams_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminSetTeams_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminSetTeams_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminSetTeams_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminSetTeams_Input.Merge(m, src)
}
func (m *AdminSetTeams_Input) XXX_Size() int {
	return m.Size()
}
func (m *AdminSetTeams_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminSetTeams_Input.DiscardUnknown(m)
}

var xxx_messageInfo_AdminSetTeams_Input proto.InternalMessageInfo

func (m *AdminSetTeams_Input) GetTeams() []*pwdb.Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

type AdminSetTeams_Output struct {
}

func (m *AdminSetTeams_Output) Reset()         { *m = AdminSetTeams_Output{} }
func (m *AdminSetTeams_Output) String() string { return proto.CompactTextString(m) }
func (*AdminSetTeams_Output) ProtoMessage()    {}
func (*AdminSetTeams_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{17, 1}
}
func (m *AdminSetTeams_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminSetTeams_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminSetTeams_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminSetTeams_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminSetTeams_Output.Merge(m, src)
}
func (m *AdminSetTeams_Output) XXX_Size() int {
	return m.Size()
}
func (m *AdminSetTeams_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminSetTeams_Output.DiscardUnknown(m)
}

var xxx_messageInfo_AdminSetTeams_Output proto.InternalMessageInfo

type AdminTestingSeasonUserAdd struct {
}

func (m *AdminTestingSeasonUserAdd) Reset()         { *m = AdminTestingSeasonUserAdd{} }
func (m *AdminTestingSeasonUserAdd) String() string { return proto.CompactTextString(m) }
func (*AdminTestingSeasonUserAdd) ProtoMessage()    {}
func (*AdminTestingSeasonUserAdd) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{18}
}
func (m *AdminTestingSeasonUserAdd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminTestingSeasonUserAdd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminTestingSeasonUserAdd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminTestingSeasonUserAdd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminTestingSeasonUserAdd.Merge(m, src)
}
func (m *AdminTestingSeasonUserAdd) XXX_Size() int {
	return m.Size()
}
func (m *AdminTestingSeasonUserAdd) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminTestingSeasonUserAdd.DiscardUnknown(m)
}

var xxx_messageInfo_AdminTestingSeasonUserAdd proto.InternalMessageInfo

type AdminTestingSeasonUserAdd_Input struct {
	UserID string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *AdminTestingSeasonUserAdd_Input) Reset()         { *m = AdminTestingSeasonUserAdd_Input{} }
func (m *AdminTestingSeasonUserAdd_Input) String() string { return proto.CompactTextString(m) }
func (*AdminTestingSeasonUserAdd_Input) ProtoMessage()    {}
func (*AdminTestingSeasonUserAdd_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{18, 0}
}
func (m *AdminTestingSeasonUserAdd_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminTestingSeasonUserAdd_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminTestingSeasonUserAdd_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminTestingSeasonUserAdd_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminTestingSeasonUserAdd_Input.Merge(m, src)
}
func (m *AdminTestingSeasonUserAdd_Input) XXX_Size() int {
	return m.Size()
}
func (m *AdminTestingSeasonUserAdd_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminTestingSeasonUserAdd_Input.DiscardUnknown(m)
}

var xxx_messageInfo_AdminTestingSeasonUserAdd_Input proto.InternalMessageInfo

func (m *AdminTestingSeasonUserAdd_Input) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type AdminTestingSeasonUserAdd_Output struct {
	TeamMember *pwdb.TeamMember `protobuf:"bytes,1,opt,name=team_member,json=teamMember,proto3" json:"team_member,omitempty"`
}

func (m *AdminTestingSeasonUserAdd_Output) Reset()         { *m = AdminTestingSeasonUserAdd_Output{} }
func (m *AdminTestingSeasonUserAdd_Output) String() string { return proto.CompactTextString(m) }
func (*AdminTestingSeasonUserAdd_Output) ProtoMessage()    {}
func (*AdminTestingSeasonUserAdd_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{18, 1}
}
func (m *AdminTestingSeasonUserAdd_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminTestingSeasonUserAdd_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminTestingSeasonUserAdd_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminTestingSeasonUserAdd_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminTestingSeasonUserAdd_Output.Merge(m, src)
}
func (m *AdminTestingSeasonUserAdd_Output) XXX_Size() int {
	return m.Size()
}
func (m *AdminTestingSeasonUserAdd_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminTestingSeasonUserAdd_Output.DiscardUnknown(m)
}

var xxx_messageInfo_AdminTestingSeasonUserAdd_Output proto.InternalMessageInfo

func (m *AdminTestingSeasonUserAdd_Output) GetTeamMember() *pwdb.TeamMember {
	if m != nil {
		return m.TeamMember
	}
	return nil
}

type AgentList struct {
}

func (m *AgentList) Reset()         { *m = AgentList{} }
func (m *AgentList) String() string { return proto.CompactTextString(m) }
func (*AgentList) ProtoMessage()    {}
func (*AgentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{19}
}
func (m *AgentList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentList.Merge(m, src)
}
func (m *AgentList) XXX_Size() int {
	return m.Size()
}
func (m *AgentList) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentList.DiscardUnknown(m)
}

var xxx_messageInfo_AgentList proto.InternalMessageInfo

type AgentList_Input struct {
}

func (m *AgentList_Input) Reset()         { *m = AgentList_Input{} }
func (m *AgentList_Input) String() string { return proto.CompactTextString(m) }
func (*AgentList_Input) ProtoMessage()    {}
func (*AgentList_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{19, 0}
}
func (m *AgentList_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentList_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentList_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentList_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentList_Input.Merge(m, src)
}
func (m *AgentList_Input) XXX_Size() int {
	return m.Size()
}
func (m *AgentList_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentList_Input.DiscardUnknown(m)
}

var xxx_messageInfo_AgentList_Input proto.InternalMessageInfo

type AgentList_Output struct {
	Agents []*pwdb.Agent `protobuf:"bytes,1,rep,name=agents,proto3" json:"agents,omitempty"`
}

func (m *AgentList_Output) Reset()         { *m = AgentList_Output{} }
func (m *AgentList_Output) String() string { return proto.CompactTextString(m) }
func (*AgentList_Output) ProtoMessage()    {}
func (*AgentList_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{19, 1}
}
func (m *AgentList_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentList_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentList_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentList_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentList_Output.Merge(m, src)
}
func (m *AgentList_Output) XXX_Size() int {
	return m.Size()
}
func (m *AgentList_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentList_Output.DiscardUnknown(m)
}

var xxx_messageInfo_AgentList_Output proto.InternalMessageInfo

func (m *AgentList_Output) GetAgents() []*pwdb.Agent {
	if m != nil {
		return m.Agents
	}
	return nil
}

type AgentRegister struct {
}

func (m *AgentRegister) Reset()         { *m = AgentRegister{} }
func (m *AgentRegister) String() string { return proto.CompactTextString(m) }
func (*AgentRegister) ProtoMessage()    {}
func (*AgentRegister) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{20}
}
func (m *AgentRegister) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentRegister) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentRegister.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentRegister) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentRegister.Merge(m, src)
}
func (m *AgentRegister) XXX_Size() int {
	return m.Size()
}
func (m *AgentRegister) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentRegister.DiscardUnknown(m)
}

var xxx_messageInfo_AgentRegister proto.InternalMessageInfo

type AgentRegister_Input struct {
	Name         string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" url:"name"`
	Hostname     string   `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty" url:"hostname"`
	OS           string   `protobuf:"bytes,3,opt,name=os,proto3" json:"os,omitempty" url:"os"`
	Arch         string   `protobuf:"bytes,4,opt,name=arch,proto3" json:"arch,omitempty" url:"arch"`
	Version      string   `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty" url:"version"`
	Tags         []string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" url:"tags"`
	DomainSuffix string   `protobuf:"bytes,7,opt,name=domain_suffix,json=domainSuffix,proto3" json:"domain_suffix,omitempty" url:"domain_suffix"`
	Metadata     string   `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty" url:"metadata"`
	NginxPort    int32    `protobuf:"varint,9,opt,name=nginx_port,json=nginxPort,proto3" json:"nginx_port,omitempty" url:"nginx_port"`
	AuthSalt     string   `protobuf:"bytes,10,opt,name=auth_salt,json=authSalt,proto3" json:"auth_salt,omitempty" url:"auth_salt"`
	DefaultAgent bool     `protobuf:"varint,11,opt,name=default_agent,json=defaultAgent,proto3" json:"default_agent,omitempty" url:"default_agent"`
}

func (m *AgentRegister_Input) Reset()         { *m = AgentRegister_Input{} }
func (m *AgentRegister_Input) String() string { return proto.CompactTextString(m) }
func (*AgentRegister_Input) ProtoMessage()    {}
func (*AgentRegister_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{20, 0}
}
func (m *AgentRegister_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentRegister_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentRegister_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentRegister_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentRegister_Input.Merge(m, src)
}
func (m *AgentRegister_Input) XXX_Size() int {
	return m.Size()
}
func (m *AgentRegister_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentRegister_Input.DiscardUnknown(m)
}

var xxx_messageInfo_AgentRegister_Input proto.InternalMessageInfo

func (m *AgentRegister_Input) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AgentRegister_Input) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *AgentRegister_Input) GetOS() string {
	if m != nil {
		return m.OS
	}
	return ""
}

func (m *AgentRegister_Input) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *AgentRegister_Input) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *AgentRegister_Input) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *AgentRegister_Input) GetDomainSuffix() string {
	if m != nil {
		return m.DomainSuffix
	}
	return ""
}

func (m *AgentRegister_Input) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func (m *AgentRegister_Input) GetNginxPort() int32 {
	if m != nil {
		return m.NginxPort
	}
	return 0
}

func (m *AgentRegister_Input) GetAuthSalt() string {
	if m != nil {
		return m.AuthSalt
	}
	return ""
}

func (m *AgentRegister_Input) GetDefaultAgent() bool {
	if m != nil {
		return m.DefaultAgent
	}
	return false
}

type AgentRegister_Output struct {
	Agent *pwdb.Agent `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
}

func (m *AgentRegister_Output) Reset()         { *m = AgentRegister_Output{} }
func (m *AgentRegister_Output) String() string { return proto.CompactTextString(m) }
func (*AgentRegister_Output) ProtoMessage()    {}
func (*AgentRegister_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{20, 1}
}
func (m *AgentRegister_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentRegister_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentRegister_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentRegister_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentRegister_Output.Merge(m, src)
}
func (m *AgentRegister_Output) XXX_Size() int {
	return m.Size()
}
func (m *AgentRegister_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentRegister_Output.DiscardUnknown(m)
}

var xxx_messageInfo_AgentRegister_Output proto.InternalMessageInfo

func (m *AgentRegister_Output) GetAgent() *pwdb.Agent {
	if m != nil {
		return m.Agent
	}
	return nil
}

type AgentListInstances struct {
}

func (m *AgentListInstances) Reset()         { *m = AgentListInstances{} }
func (m *AgentListInstances) String() string { return proto.CompactTextString(m) }
func (*AgentListInstances) ProtoMessage()    {}
func (*AgentListInstances) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{21}
}
func (m *AgentListInstances) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentListInstances) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentListInstances.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentListInstances) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentListInstances.Merge(m, src)
}
func (m *AgentListInstances) XXX_Size() int {
	return m.Size()
}
func (m *AgentListInstances) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentListInstances.DiscardUnknown(m)
}

var xxx_messageInfo_AgentListInstances proto.InternalMessageInfo

type AgentListInstances_Input struct {
	AgentName string `protobuf:"bytes,1,opt,name=agent_name,json=agentName,proto3" json:"agent_name,omitempty" url:"agent_name"`
}

func (m *AgentListInstances_Input) Reset()         { *m = AgentListInstances_Input{} }
func (m *AgentListInstances_Input) String() string { return proto.CompactTextString(m) }
func (*AgentListInstances_Input) ProtoMessage()    {}
func (*AgentListInstances_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{21, 0}
}
func (m *AgentListInstances_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentListInstances_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentListInstances_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentListInstances_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentListInstances_Input.Merge(m, src)
}
func (m *AgentListInstances_Input) XXX_Size() int {
	return m.Size()
}
func (m *AgentListInstances_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentListInstances_Input.DiscardUnknown(m)
}

var xxx_messageInfo_AgentListInstances_Input proto.InternalMessageInfo

func (m *AgentListInstances_Input) GetAgentName() string {
	if m != nil {
		return m.AgentName
	}
	return ""
}

type AgentListInstances_Output struct {
	Instances []*pwdb.ChallengeInstance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (m *AgentListInstances_Output) Reset()         { *m = AgentListInstances_Output{} }
func (m *AgentListInstances_Output) String() string { return proto.CompactTextString(m) }
func (*AgentListInstances_Output) ProtoMessage()    {}
func (*AgentListInstances_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{21, 1}
}
func (m *AgentListInstances_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentListInstances_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentListInstances_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentListInstances_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentListInstances_Output.Merge(m, src)
}
func (m *AgentListInstances_Output) XXX_Size() int {
	return m.Size()
}
func (m *AgentListInstances_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentListInstances_Output.DiscardUnknown(m)
}

var xxx_messageInfo_AgentListInstances_Output proto.InternalMessageInfo

func (m *AgentListInstances_Output) GetInstances() []*pwdb.ChallengeInstance {
	if m != nil {
		return m.Instances
	}
	return nil
}

type AgentUpdateState struct {
}

func (m *AgentUpdateState) Reset()         { *m = AgentUpdateState{} }
func (m *AgentUpdateState) String() string { return proto.CompactTextString(m) }
func (*AgentUpdateState) ProtoMessage()    {}
func (*AgentUpdateState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{22}
}
func (m *AgentUpdateState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentUpdateState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentUpdateState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentUpdateState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentUpdateState.Merge(m, src)
}
func (m *AgentUpdateState) XXX_Size() int {
	return m.Size()
}
func (m *AgentUpdateState) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentUpdateState.DiscardUnknown(m)
}

var xxx_messageInfo_AgentUpdateState proto.InternalMessageInfo

type AgentUpdateState_Input struct {
	Instances []*pwdb.ChallengeInstance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (m *AgentUpdateState_Input) Reset()         { *m = AgentUpdateState_Input{} }
func (m *AgentUpdateState_Input) String() string { return proto.CompactTextString(m) }
func (*AgentUpdateState_Input) ProtoMessage()    {}
func (*AgentUpdateState_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{22, 0}
}
func (m *AgentUpdateState_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentUpdateState_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentUpdateState_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentUpdateState_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentUpdateState_Input.Merge(m, src)
}
func (m *AgentUpdateState_Input) XXX_Size() int {
	return m.Size()
}
func (m *AgentUpdateState_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentUpdateState_Input.DiscardUnknown(m)
}

var xxx_messageInfo_AgentUpdateState_Input proto.InternalMessageInfo

func (m *AgentUpdateState_Input) GetInstances() []*pwdb.ChallengeInstance {
	if m != nil {
		return m.Instances
	}
	return nil
}

type AgentUpdateState_Output struct {
}

func (m *AgentUpdateState_Output) Reset()         { *m = AgentUpdateState_Output{} }
func (m *AgentUpdateState_Output) String() string { return proto.CompactTextString(m) }
func (*AgentUpdateState_Output) ProtoMessage()    {}
func (*AgentUpdateState_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{22, 1}
}
func (m *AgentUpdateState_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentUpdateState_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentUpdateState_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentUpdateState_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentUpdateState_Output.Merge(m, src)
}
func (m *AgentUpdateState_Output) XXX_Size() int {
	return m.Size()
}
func (m *AgentUpdateState_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentUpdateState_Output.DiscardUnknown(m)
}

var xxx_messageInfo_AgentUpdateState_Output proto.InternalMessageInfo

type TeamGet struct {
}

func (m *TeamGet) Reset()         { *m = TeamGet{} }
func (m *TeamGet) String() string { return proto.CompactTextString(m) }
func (*TeamGet) ProtoMessage()    {}
func (*TeamGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{23}
}
func (m *TeamGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamGet.Merge(m, src)
}
func (m *TeamGet) XXX_Size() int {
	return m.Size()
}
func (m *TeamGet) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamGet.DiscardUnknown(m)
}

var xxx_messageInfo_TeamGet proto.InternalMessageInfo

type TeamGet_Input struct {
	TeamID int64 `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (m *TeamGet_Input) Reset()         { *m = TeamGet_Input{} }
func (m *TeamGet_Input) String() string { return proto.CompactTextString(m) }
func (*TeamGet_Input) ProtoMessage()    {}
func (*TeamGet_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{23, 0}
}
func (m *TeamGet_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamGet_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamGet_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamGet_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamGet_Input.Merge(m, src)
}
func (m *TeamGet_Input) XXX_Size() int {
	return m.Size()
}
func (m *TeamGet_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamGet_Input.DiscardUnknown(m)
}

var xxx_messageInfo_TeamGet_Input proto.InternalMessageInfo

func (m *TeamGet_Input) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

type TeamGet_Output struct {
	Item *pwdb.Team `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (m *TeamGet_Output) Reset()         { *m = TeamGet_Output{} }
func (m *TeamGet_Output) String() string { return proto.CompactTextString(m) }
func (*TeamGet_Output) ProtoMessage()    {}
func (*TeamGet_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{23, 1}
}
func (m *TeamGet_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamGet_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamGet_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamGet_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamGet_Output.Merge(m, src)
}
func (m *TeamGet_Output) XXX_Size() int {
	return m.Size()
}
func (m *TeamGet_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamGet_Output.DiscardUnknown(m)
}

var xxx_messageInfo_TeamGet_Output proto.InternalMessageInfo

func (m *TeamGet_Output) GetItem() *pwdb.Team {
	if m != nil {
		return m.Item
	}
	return nil
}

type SeasonChallengeList struct {
}

func (m *SeasonChallengeList) Reset()         { *m = SeasonChallengeList{} }
func (m *SeasonChallengeList) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeList) ProtoMessage()    {}
func (*SeasonChallengeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{24}
}
func (m *SeasonChallengeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeList.Merge(m, src)
}
func (m *SeasonChallengeList) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeList) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeList.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeList proto.InternalMessageInfo

type SeasonChallengeList_Input struct {
	SeasonID int64 `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
}

func (m *SeasonChallengeList_Input) Reset()         { *m = SeasonChallengeList_Input{} }
func (m *SeasonChallengeList_Input) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeList_Input) ProtoMessage()    {}
func (*SeasonChallengeList_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{24, 0}
}
func (m *SeasonChallengeList_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeList_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeList_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeList_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeList_Input.Merge(m, src)
}
func (m *SeasonChallengeList_Input) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeList_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeList_Input.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeList_Input proto.InternalMessageInfo

func (m *SeasonChallengeList_Input) GetSeasonID() int64 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

type SeasonChallengeList_Output struct {
	Items []*pwdb.SeasonChallenge `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *SeasonChallengeList_Output) Reset()         { *m = SeasonChallengeList_Output{} }
func (m *SeasonChallengeList_Output) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeList_Output) ProtoMessage()    {}
func (*SeasonChallengeList_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{24, 1}
}
func (m *SeasonChallengeList_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeList_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeList_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeList_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeList_Output.Merge(m, src)
}
func (m *SeasonChallengeList_Output) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeList_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeList_Output.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeList_Output proto.InternalMessageInfo

func (m *SeasonChallengeList_Output) GetItems() []*pwdb.SeasonChallenge {
	if m != nil {
		return m.Items
	}
	return nil
}

type SeasonChallengeGet struct {
}

func (m *SeasonChallengeGet) Reset()         { *m = SeasonChallengeGet{} }
func (m *SeasonChallengeGet) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeGet) ProtoMessage()    {}
func (*SeasonChallengeGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{25}
}
func (m *SeasonChallengeGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeGet.Merge(m, src)
}
func (m *SeasonChallengeGet) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeGet) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeGet.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeGet proto.InternalMessageInfo

type SeasonChallengeGet_Input struct {
	SeasonChallengeID int64 `protobuf:"varint,1,opt,name=season_challenge_id,json=seasonChallengeId,proto3" json:"season_challenge_id,omitempty"`
}

func (m *SeasonChallengeGet_Input) Reset()         { *m = SeasonChallengeGet_Input{} }
func (m *SeasonChallengeGet_Input) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeGet_Input) ProtoMessage()    {}
func (*SeasonChallengeGet_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{25, 0}
}
func (m *SeasonChallengeGet_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeGet_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeGet_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeGet_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeGet_Input.Merge(m, src)
}
func (m *SeasonChallengeGet_Input) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeGet_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeGet_Input.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeGet_Input proto.InternalMessageInfo

func (m *SeasonChallengeGet_Input) GetSeasonChallengeID() int64 {
	if m != nil {
		return m.SeasonChallengeID
	}
	return 0
}

type SeasonChallengeGet_Output struct {
	Item *pwdb.SeasonChallenge `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (m *SeasonChallengeGet_Output) Reset()         { *m = SeasonChallengeGet_Output{} }
func (m *SeasonChallengeGet_Output) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeGet_Output) ProtoMessage()    {}
func (*SeasonChallengeGet_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{25, 1}
}
func (m *SeasonChallengeGet_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeGet_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeGet_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeGet_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeGet_Output.Merge(m, src)
}
func (m *SeasonChallengeGet_Output) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeGet_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeGet_Output.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeGet_Output proto.InternalMessageInfo

func (m *SeasonChallengeGet_Output) GetItem() *pwdb.SeasonChallenge {
	if m != nil {
		return m.Item
	}
	return nil
}

type ChallengeGet struct {
}

func (m *ChallengeGet) Reset()         { *m = ChallengeGet{} }
func (m *ChallengeGet) String() string { return proto.CompactTextString(m) }
func (*ChallengeGet) ProtoMessage()    {}
func (*ChallengeGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{26}
}
func (m *ChallengeGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeGet.Merge(m, src)
}
func (m *ChallengeGet) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeGet) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeGet.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeGet proto.InternalMessageInfo

type ChallengeGet_Input struct {
	ChallengeID int64 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (m *ChallengeGet_Input) Reset()         { *m = ChallengeGet_Input{} }
func (m *ChallengeGet_Input) String() string { return proto.CompactTextString(m) }
func (*ChallengeGet_Input) ProtoMessage()    {}
func (*ChallengeGet_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{26, 0}
}
func (m *ChallengeGet_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeGet_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeGet_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeGet_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeGet_Input.Merge(m, src)
}
func (m *ChallengeGet_Input) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeGet_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeGet_Input.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeGet_Input proto.InternalMessageInfo

func (m *ChallengeGet_Input) GetChallengeID() int64 {
	if m != nil {
		return m.ChallengeID
	}
	return 0
}

type ChallengeGet_Output struct {
	Item *pwdb.Challenge `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (m *ChallengeGet_Output) Reset()         { *m = ChallengeGet_Output{} }
func (m *ChallengeGet_Output) String() string { return proto.CompactTextString(m) }
func (*ChallengeGet_Output) ProtoMessage()    {}
func (*ChallengeGet_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{26, 1}
}
func (m *ChallengeGet_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeGet_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeGet_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeGet_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeGet_Output.Merge(m, src)
}
func (m *ChallengeGet_Output) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeGet_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeGet_Output.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeGet_Output proto.InternalMessageInfo

func (m *ChallengeGet_Output) GetItem() *pwdb.Challenge {
	if m != nil {
		return m.Item
	}
	return nil
}

type SeasonChallengeBuy struct {
}

func (m *SeasonChallengeBuy) Reset()         { *m = SeasonChallengeBuy{} }
func (m *SeasonChallengeBuy) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeBuy) ProtoMessage()    {}
func (*SeasonChallengeBuy) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{27}
}
func (m *SeasonChallengeBuy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeBuy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeBuy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeBuy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeBuy.Merge(m, src)
}
func (m *SeasonChallengeBuy) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeBuy) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeBuy.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeBuy proto.InternalMessageInfo

type SeasonChallengeBuy_Input struct {
	FlavorID string `protobuf:"bytes,1,opt,name=flavor_id,json=flavorId,proto3" json:"flavor_id,omitempty"`
	SeasonID string `protobuf:"bytes,2,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
}

func (m *SeasonChallengeBuy_Input) Reset()         { *m = SeasonChallengeBuy_Input{} }
func (m *SeasonChallengeBuy_Input) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeBuy_Input) ProtoMessage()    {}
func (*SeasonChallengeBuy_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{27, 0}
}
func (m *SeasonChallengeBuy_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeBuy_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeBuy_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeBuy_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeBuy_Input.Merge(m, src)
}
func (m *SeasonChallengeBuy_Input) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeBuy_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeBuy_Input.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeBuy_Input proto.InternalMessageInfo

func (m *SeasonChallengeBuy_Input) GetFlavorID() string {
	if m != nil {
		return m.FlavorID
	}
	return ""
}

func (m *SeasonChallengeBuy_Input) GetSeasonID() string {
	if m != nil {
		return m.SeasonID
	}
	return ""
}

type SeasonChallengeBuy_Output struct {
	ChallengeSubscription *pwdb.ChallengeSubscription `protobuf:"bytes,1,opt,name=challenge_subscription,json=challengeSubscription,proto3" json:"challenge_subscription,omitempty"`
}

func (m *SeasonChallengeBuy_Output) Reset()         { *m = SeasonChallengeBuy_Output{} }
func (m *SeasonChallengeBuy_Output) String() string { return proto.CompactTextString(m) }
func (*SeasonChallengeBuy_Output) ProtoMessage()    {}
func (*SeasonChallengeBuy_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{27, 1}
}
func (m *SeasonChallengeBuy_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonChallengeBuy_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonChallengeBuy_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonChallengeBuy_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonChallengeBuy_Output.Merge(m, src)
}
func (m *SeasonChallengeBuy_Output) XXX_Size() int {
	return m.Size()
}
func (m *SeasonChallengeBuy_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonChallengeBuy_Output.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonChallengeBuy_Output proto.InternalMessageInfo

func (m *SeasonChallengeBuy_Output) GetChallengeSubscription() *pwdb.ChallengeSubscription {
	if m != nil {
		return m.ChallengeSubscription
	}
	return nil
}

type ChallengeSubscriptionValidate struct {
}

func (m *ChallengeSubscriptionValidate) Reset()         { *m = ChallengeSubscriptionValidate{} }
func (m *ChallengeSubscriptionValidate) String() string { return proto.CompactTextString(m) }
func (*ChallengeSubscriptionValidate) ProtoMessage()    {}
func (*ChallengeSubscriptionValidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{28}
}
func (m *ChallengeSubscriptionValidate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeSubscriptionValidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeSubscriptionValidate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeSubscriptionValidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeSubscriptionValidate.Merge(m, src)
}
func (m *ChallengeSubscriptionValidate) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeSubscriptionValidate) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeSubscriptionValidate.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeSubscriptionValidate proto.InternalMessageInfo

type ChallengeSubscriptionValidate_Input struct {
	ChallengeSubscriptionID int64    `protobuf:"varint,1,opt,name=challenge_subscription_id,json=challengeSubscriptionId,proto3" json:"challenge_subscription_id,omitempty"`
	Passphrases             []string `protobuf:"bytes,2,rep,name=passphrases,proto3" json:"passphrases,omitempty"`
	Comment                 string   `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (m *ChallengeSubscriptionValidate_Input) Reset()         { *m = ChallengeSubscriptionValidate_Input{} }
func (m *ChallengeSubscriptionValidate_Input) String() string { return proto.CompactTextString(m) }
func (*ChallengeSubscriptionValidate_Input) ProtoMessage()    {}
func (*ChallengeSubscriptionValidate_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{28, 0}
}
func (m *ChallengeSubscriptionValidate_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeSubscriptionValidate_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeSubscriptionValidate_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeSubscriptionValidate_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeSubscriptionValidate_Input.Merge(m, src)
}
func (m *ChallengeSubscriptionValidate_Input) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeSubscriptionValidate_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeSubscriptionValidate_Input.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeSubscriptionValidate_Input proto.InternalMessageInfo

func (m *ChallengeSubscriptionValidate_Input) GetChallengeSubscriptionID() int64 {
	if m != nil {
		return m.ChallengeSubscriptionID
	}
	return 0
}

func (m *ChallengeSubscriptionValidate_Input) GetPassphrases() []string {
	if m != nil {
		return m.Passphrases
	}
	return nil
}

func (m *ChallengeSubscriptionValidate_Input) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type ChallengeSubscriptionValidate_Output struct {
	ChallengeValidation *pwdb.ChallengeValidation `protobuf:"bytes,1,opt,name=challenge_validation,json=challengeValidation,proto3" json:"challenge_validation,omitempty"`
}

func (m *ChallengeSubscriptionValidate_Output) Reset()         { *m = ChallengeSubscriptionValidate_Output{} }
func (m *ChallengeSubscriptionValidate_Output) String() string { return proto.CompactTextString(m) }
func (*ChallengeSubscriptionValidate_Output) ProtoMessage()    {}
func (*ChallengeSubscriptionValidate_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{28, 1}
}
func (m *ChallengeSubscriptionValidate_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeSubscriptionValidate_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeSubscriptionValidate_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeSubscriptionValidate_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeSubscriptionValidate_Output.Merge(m, src)
}
func (m *ChallengeSubscriptionValidate_Output) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeSubscriptionValidate_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeSubscriptionValidate_Output.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeSubscriptionValidate_Output proto.InternalMessageInfo

func (m *ChallengeSubscriptionValidate_Output) GetChallengeValidation() *pwdb.ChallengeValidation {
	if m != nil {
		return m.ChallengeValidation
	}
	return nil
}

type TeamList struct {
}

func (m *TeamList) Reset()         { *m = TeamList{} }
func (m *TeamList) String() string { return proto.CompactTextString(m) }
func (*TeamList) ProtoMessage()    {}
func (*TeamList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{29}
}
func (m *TeamList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamList.Merge(m, src)
}
func (m *TeamList) XXX_Size() int {
	return m.Size()
}
func (m *TeamList) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamList.DiscardUnknown(m)
}

var xxx_messageInfo_TeamList proto.InternalMessageInfo

type TeamList_Input struct {
	SeasonID int64 `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
}

func (m *TeamList_Input) Reset()         { *m = TeamList_Input{} }
func (m *TeamList_Input) String() string { return proto.CompactTextString(m) }
func (*TeamList_Input) ProtoMessage()    {}
func (*TeamList_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{29, 0}
}
func (m *TeamList_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamList_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamList_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamList_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamList_Input.Merge(m, src)
}
func (m *TeamList_Input) XXX_Size() int {
	return m.Size()
}
func (m *TeamList_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamList_Input.DiscardUnknown(m)
}

var xxx_messageInfo_TeamList_Input proto.InternalMessageInfo

func (m *TeamList_Input) GetSeasonID() int64 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

type TeamList_Output struct {
	Items []*pwdb.Team `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *TeamList_Output) Reset()         { *m = TeamList_Output{} }
func (m *TeamList_Output) String() string { return proto.CompactTextString(m) }
func (*TeamList_Output) ProtoMessage()    {}
func (*TeamList_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{29, 1}
}
func (m *TeamList_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamList_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamList_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamList_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamList_Output.Merge(m, src)
}
func (m *TeamList_Output) XXX_Size() int {
	return m.Size()
}
func (m *TeamList_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamList_Output.DiscardUnknown(m)
}

var xxx_messageInfo_TeamList_Output proto.InternalMessageInfo

func (m *TeamList_Output) GetItems() []*pwdb.Team {
	if m != nil {
		return m.Items
	}
	return nil
}

type TeamCreate struct {
}

func (m *TeamCreate) Reset()         { *m = TeamCreate{} }
func (m *TeamCreate) String() string { return proto.CompactTextString(m) }
func (*TeamCreate) ProtoMessage()    {}
func (*TeamCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{30}
}
func (m *TeamCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamCreate.Merge(m, src)
}
func (m *TeamCreate) XXX_Size() int {
	return m.Size()
}
func (m *TeamCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamCreate.DiscardUnknown(m)
}

var xxx_messageInfo_TeamCreate proto.InternalMessageInfo

type TeamCreate_Input struct {
	OrganizationID string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SeasonID       string `protobuf:"bytes,3,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
}

func (m *TeamCreate_Input) Reset()         { *m = TeamCreate_Input{} }
func (m *TeamCreate_Input) String() string { return proto.CompactTextString(m) }
func (*TeamCreate_Input) ProtoMessage()    {}
func (*TeamCreate_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{30, 0}
}
func (m *TeamCreate_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamCreate_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamCreate_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamCreate_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamCreate_Input.Merge(m, src)
}
func (m *TeamCreate_Input) XXX_Size() int {
	return m.Size()
}
func (m *TeamCreate_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamCreate_Input.DiscardUnknown(m)
}

var xxx_messageInfo_TeamCreate_Input proto.InternalMessageInfo

func (m *TeamCreate_Input) GetOrganizationID() string {
	if m != nil {
		return m.OrganizationID
	}
	return ""
}

func (m *TeamCreate_Input) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TeamCreate_Input) GetSeasonID() string {
	if m != nil {
		return m.SeasonID
	}
	return ""
}

type TeamCreate_Output struct {
	Team *pwdb.Team `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
}

func (m *TeamCreate_Output) Reset()         { *m = TeamCreate_Output{} }
func (m *TeamCreate_Output) String() string { return proto.CompactTextString(m) }
func (*TeamCreate_Output) ProtoMessage()    {}
func (*TeamCreate_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{30, 1}
}
func (m *TeamCreate_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamCreate_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamCreate_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamCreate_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamCreate_Output.Merge(m, src)
}
func (m *TeamCreate_Output) XXX_Size() int {
	return m.Size()
}
func (m *TeamCreate_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamCreate_Output.DiscardUnknown(m)
}

var xxx_messageInfo_TeamCreate_Output proto.InternalMessageInfo

func (m *TeamCreate_Output) GetTeam() *pwdb.Team {
	if m != nil {
		return m.Team
	}
	return nil
}

type TeamSendInvite struct {
}

func (m *TeamSendInvite) Reset()         { *m = TeamSendInvite{} }
func (m *TeamSendInvite) String() string { return proto.CompactTextString(m) }
func (*TeamSendInvite) ProtoMessage()    {}
func (*TeamSendInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{31}
}
func (m *TeamSendInvite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamSendInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamSendInvite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamSendInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamSendInvite.Merge(m, src)
}
func (m *TeamSendInvite) XXX_Size() int {
	return m.Size()
}
func (m *TeamSendInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamSendInvite.DiscardUnknown(m)
}

var xxx_messageInfo_TeamSendInvite proto.InternalMessageInfo

type TeamSendInvite_Input struct {
	TeamID string `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	UserID string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *TeamSendInvite_Input) Reset()         { *m = TeamSendInvite_Input{} }
func (m *TeamSendInvite_Input) String() string { return proto.CompactTextString(m) }
func (*TeamSendInvite_Input) ProtoMessage()    {}
func (*TeamSendInvite_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{31, 0}
}
func (m *TeamSendInvite_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamSendInvite_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamSendInvite_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamSendInvite_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamSendInvite_Input.Merge(m, src)
}
func (m *TeamSendInvite_Input) XXX_Size() int {
	return m.Size()
}
func (m *TeamSendInvite_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamSendInvite_Input.DiscardUnknown(m)
}

var xxx_messageInfo_TeamSendInvite_Input proto.InternalMessageInfo

func (m *TeamSendInvite_Input) GetTeamID() string {
	if m != nil {
		return m.TeamID
	}
	return ""
}

func (m *TeamSendInvite_Input) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type TeamSendInvite_Output struct {
	TeamInvite *pwdb.TeamInvite `protobuf:"bytes,1,opt,name=team_invite,json=teamInvite,proto3" json:"team_invite,omitempty"`
}

func (m *TeamSendInvite_Output) Reset()         { *m = TeamSendInvite_Output{} }
func (m *TeamSendInvite_Output) String() string { return proto.CompactTextString(m) }
func (*TeamSendInvite_Output) ProtoMessage()    {}
func (*TeamSendInvite_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{31, 1}
}
func (m *TeamSendInvite_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamSendInvite_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamSendInvite_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamSendInvite_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamSendInvite_Output.Merge(m, src)
}
func (m *TeamSendInvite_Output) XXX_Size() int {
	return m.Size()
}
func (m *TeamSendInvite_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamSendInvite_Output.DiscardUnknown(m)
}

var xxx_messageInfo_TeamSendInvite_Output proto.InternalMessageInfo

func (m *TeamSendInvite_Output) GetTeamInvite() *pwdb.TeamInvite {
	if m != nil {
		return m.TeamInvite
	}
	return nil
}

type TeamAcceptInvite struct {
}

func (m *TeamAcceptInvite) Reset()         { *m = TeamAcceptInvite{} }
func (m *TeamAcceptInvite) String() string { return proto.CompactTextString(m) }
func (*TeamAcceptInvite) ProtoMessage()    {}
func (*TeamAcceptInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{32}
}
func (m *TeamAcceptInvite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamAcceptInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamAcceptInvite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamAcceptInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamAcceptInvite.Merge(m, src)
}
func (m *TeamAcceptInvite) XXX_Size() int {
	return m.Size()
}
func (m *TeamAcceptInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamAcceptInvite.DiscardUnknown(m)
}

var xxx_messageInfo_TeamAcceptInvite proto.InternalMessageInfo

type TeamAcceptInvite_Input struct {
	TeamInviteID string `protobuf:"bytes,1,opt,name=team_invite_id,json=teamInviteId,proto3" json:"team_invite_id,omitempty"`
}

func (m *TeamAcceptInvite_Input) Reset()         { *m = TeamAcceptInvite_Input{} }
func (m *TeamAcceptInvite_Input) String() string { return proto.CompactTextString(m) }
func (*TeamAcceptInvite_Input) ProtoMessage()    {}
func (*TeamAcceptInvite_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{32, 0}
}
func (m *TeamAcceptInvite_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamAcceptInvite_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamAcceptInvite_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamAcceptInvite_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamAcceptInvite_Input.Merge(m, src)
}
func (m *TeamAcceptInvite_Input) XXX_Size() int {
	return m.Size()
}
func (m *TeamAcceptInvite_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamAcceptInvite_Input.DiscardUnknown(m)
}

var xxx_messageInfo_TeamAcceptInvite_Input proto.InternalMessageInfo

func (m *TeamAcceptInvite_Input) GetTeamInviteID() string {
	if m != nil {
		return m.TeamInviteID
	}
	return ""
}

type TeamAcceptInvite_Output struct {
	TeamMember *pwdb.TeamMember `protobuf:"bytes,1,opt,name=team_member,json=teamMember,proto3" json:"team_member,omitempty"`
}

func (m *TeamAcceptInvite_Output) Reset()         { *m = TeamAcceptInvite_Output{} }
func (m *TeamAcceptInvite_Output) String() string { return proto.CompactTextString(m) }
func (*TeamAcceptInvite_Output) ProtoMessage()    {}
func (*TeamAcceptInvite_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{32, 1}
}
func (m *TeamAcceptInvite_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamAcceptInvite_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamAcceptInvite_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamAcceptInvite_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamAcceptInvite_Output.Merge(m, src)
}
func (m *TeamAcceptInvite_Output) XXX_Size() int {
	return m.Size()
}
func (m *TeamAcceptInvite_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamAcceptInvite_Output.DiscardUnknown(m)
}

var xxx_messageInfo_TeamAcceptInvite_Output proto.InternalMessageInfo

func (m *TeamAcceptInvite_Output) GetTeamMember() *pwdb.TeamMember {
	if m != nil {
		return m.TeamMember
	}
	return nil
}

type SeasonList struct {
}

func (m *SeasonList) Reset()         { *m = SeasonList{} }
func (m *SeasonList) String() string { return proto.CompactTextString(m) }
func (*SeasonList) ProtoMessage()    {}
func (*SeasonList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{33}
}
func (m *SeasonList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonList.Merge(m, src)
}
func (m *SeasonList) XXX_Size() int {
	return m.Size()
}
func (m *SeasonList) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonList.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonList proto.InternalMessageInfo

type SeasonList_Input struct {
}

func (m *SeasonList_Input) Reset()         { *m = SeasonList_Input{} }
func (m *SeasonList_Input) String() string { return proto.CompactTextString(m) }
func (*SeasonList_Input) ProtoMessage()    {}
func (*SeasonList_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{33, 0}
}
func (m *SeasonList_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonList_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonList_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonList_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonList_Input.Merge(m, src)
}
func (m *SeasonList_Input) XXX_Size() int {
	return m.Size()
}
func (m *SeasonList_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonList_Input.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonList_Input proto.InternalMessageInfo

type SeasonList_Output struct {
	Seasons []*SeasonList_Output_SeasonAndTeam `protobuf:"bytes,5,rep,name=seasons,proto3" json:"seasons,omitempty"`
}

func (m *SeasonList_Output) Reset()         { *m = SeasonList_Output{} }
func (m *SeasonList_Output) String() string { return proto.CompactTextString(m) }
func (*SeasonList_Output) ProtoMessage()    {}
func (*SeasonList_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{33, 1}
}
func (m *SeasonList_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonList_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonList_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonList_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonList_Output.Merge(m, src)
}
func (m *SeasonList_Output) XXX_Size() int {
	return m.Size()
}
func (m *SeasonList_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonList_Output.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonList_Output proto.InternalMessageInfo

func (m *SeasonList_Output) GetSeasons() []*SeasonList_Output_SeasonAndTeam {
	if m != nil {
		return m.Seasons
	}
	return nil
}

type SeasonList_Output_SeasonAndTeam struct {
	Season   *pwdb.Season `protobuf:"bytes,1,opt,name=season,proto3" json:"season,omitempty"`
	Team     *pwdb.Team   `protobuf:"bytes,2,opt,name=team,proto3" json:"team,omitempty"`
	IsActive bool         `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (m *SeasonList_Output_SeasonAndTeam) Reset()         { *m = SeasonList_Output_SeasonAndTeam{} }
func (m *SeasonList_Output_SeasonAndTeam) String() string { return proto.CompactTextString(m) }
func (*SeasonList_Output_SeasonAndTeam) ProtoMessage()    {}
func (*SeasonList_Output_SeasonAndTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{33, 1, 0}
}
func (m *SeasonList_Output_SeasonAndTeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonList_Output_SeasonAndTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonList_Output_SeasonAndTeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonList_Output_SeasonAndTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonList_Output_SeasonAndTeam.Merge(m, src)
}
func (m *SeasonList_Output_SeasonAndTeam) XXX_Size() int {
	return m.Size()
}
func (m *SeasonList_Output_SeasonAndTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonList_Output_SeasonAndTeam.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonList_Output_SeasonAndTeam proto.InternalMessageInfo

func (m *SeasonList_Output_SeasonAndTeam) GetSeason() *pwdb.Season {
	if m != nil {
		return m.Season
	}
	return nil
}

func (m *SeasonList_Output_SeasonAndTeam) GetTeam() *pwdb.Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *SeasonList_Output_SeasonAndTeam) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type UserSetPreferences struct {
}

func (m *UserSetPreferences) Reset()         { *m = UserSetPreferences{} }
func (m *UserSetPreferences) String() string { return proto.CompactTextString(m) }
func (*UserSetPreferences) ProtoMessage()    {}
func (*UserSetPreferences) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{34}
}
func (m *UserSetPreferences) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserSetPreferences) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserSetPreferences.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserSetPreferences) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSetPreferences.Merge(m, src)
}
func (m *UserSetPreferences) XXX_Size() int {
	return m.Size()
}
func (m *UserSetPreferences) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSetPreferences.DiscardUnknown(m)
}

var xxx_messageInfo_UserSetPreferences proto.InternalMessageInfo

type UserSetPreferences_Input struct {
	ActiveSeasonID int64 `protobuf:"varint,1,opt,name=active_season_id,json=activeSeasonId,proto3" json:"active_season_id,omitempty"`
}

func (m *UserSetPreferences_Input) Reset()         { *m = UserSetPreferences_Input{} }
func (m *UserSetPreferences_Input) String() string { return proto.CompactTextString(m) }
func (*UserSetPreferences_Input) ProtoMessage()    {}
func (*UserSetPreferences_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{34, 0}
}
func (m *UserSetPreferences_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserSetPreferences_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserSetPreferences_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserSetPreferences_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSetPreferences_Input.Merge(m, src)
}
func (m *UserSetPreferences_Input) XXX_Size() int {
	return m.Size()
}
func (m *UserSetPreferences_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSetPreferences_Input.DiscardUnknown(m)
}

var xxx_messageInfo_UserSetPreferences_Input proto.InternalMessageInfo

func (m *UserSetPreferences_Input) GetActiveSeasonID() int64 {
	if m != nil {
		return m.ActiveSeasonID
	}
	return 0
}

type UserSetPreferences_Output struct {
}

func (m *UserSetPreferences_Output) Reset()         { *m = UserSetPreferences_Output{} }
func (m *UserSetPreferences_Output) String() string { return proto.CompactTextString(m) }
func (*UserSetPreferences_Output) ProtoMessage()    {}
func (*UserSetPreferences_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{34, 1}
}
func (m *UserSetPreferences_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserSetPreferences_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserSetPreferences_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserSetPreferences_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSetPreferences_Output.Merge(m, src)
}
func (m *UserSetPreferences_Output) XXX_Size() int {
	return m.Size()
}
func (m *UserSetPreferences_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSetPreferences_Output.DiscardUnknown(m)
}

var xxx_messageInfo_UserSetPreferences_Output proto.InternalMessageInfo

type UserDeleteAccount struct {
}

func (m *UserDeleteAccount) Reset()         { *m = UserDeleteAccount{} }
func (m *UserDeleteAccount) String() string { return proto.CompactTextString(m) }
func (*UserDeleteAccount) ProtoMessage()    {}
func (*UserDeleteAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{35}
}
func (m *UserDeleteAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserDeleteAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserDeleteAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserDeleteAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDeleteAccount.Merge(m, src)
}
func (m *UserDeleteAccount) XXX_Size() int {
	return m.Size()
}
func (m *UserDeleteAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDeleteAccount.DiscardUnknown(m)
}

var xxx_messageInfo_UserDeleteAccount proto.InternalMessageInfo

type UserDeleteAccount_Input struct {
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *UserDeleteAccount_Input) Reset()         { *m = UserDeleteAccount_Input{} }
func (m *UserDeleteAccount_Input) String() string { return proto.CompactTextString(m) }
func (*UserDeleteAccount_Input) ProtoMessage()    {}
func (*UserDeleteAccount_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{35, 0}
}
func (m *UserDeleteAccount_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserDeleteAccount_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserDeleteAccount_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserDeleteAccount_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDeleteAccount_Input.Merge(m, src)
}
func (m *UserDeleteAccount_Input) XXX_Size() int {
	return m.Size()
}
func (m *UserDeleteAccount_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDeleteAccount_Input.DiscardUnknown(m)
}

var xxx_messageInfo_UserDeleteAccount_Input proto.InternalMessageInfo

func (m *UserDeleteAccount_Input) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type UserDeleteAccount_Output struct {
}

func (m *UserDeleteAccount_Output) Reset()         { *m = UserDeleteAccount_Output{} }
func (m *UserDeleteAccount_Output) String() string { return proto.CompactTextString(m) }
func (*UserDeleteAccount_Output) ProtoMessage()    {}
func (*UserDeleteAccount_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{35, 1}
}
func (m *UserDeleteAccount_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserDeleteAccount_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserDeleteAccount_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserDeleteAccount_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDeleteAccount_Output.Merge(m, src)
}
func (m *UserDeleteAccount_Output) XXX_Size() int {
	return m.Size()
}
func (m *UserDeleteAccount_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDeleteAccount_Output.DiscardUnknown(m)
}

var xxx_messageInfo_UserDeleteAccount_Output proto.InternalMessageInfo

type OrganizationList struct {
}

func (m *OrganizationList) Reset()         { *m = OrganizationList{} }
func (m *OrganizationList) String() string { return proto.CompactTextString(m) }
func (*OrganizationList) ProtoMessage()    {}
func (*OrganizationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{36}
}
func (m *OrganizationList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrganizationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrganizationList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrganizationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationList.Merge(m, src)
}
func (m *OrganizationList) XXX_Size() int {
	return m.Size()
}
func (m *OrganizationList) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationList.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationList proto.InternalMessageInfo

type OrganizationList_Input struct {
}

func (m *OrganizationList_Input) Reset()         { *m = OrganizationList_Input{} }
func (m *OrganizationList_Input) String() string { return proto.CompactTextString(m) }
func (*OrganizationList_Input) ProtoMessage()    {}
func (*OrganizationList_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{36, 0}
}
func (m *OrganizationList_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrganizationList_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrganizationList_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrganizationList_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationList_Input.Merge(m, src)
}
func (m *OrganizationList_Input) XXX_Size() int {
	return m.Size()
}
func (m *OrganizationList_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationList_Input.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationList_Input proto.InternalMessageInfo

type OrganizationList_Output struct {
	Items []*pwdb.Organization `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *OrganizationList_Output) Reset()         { *m = OrganizationList_Output{} }
func (m *OrganizationList_Output) String() string { return proto.CompactTextString(m) }
func (*OrganizationList_Output) ProtoMessage()    {}
func (*OrganizationList_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{36, 1}
}
func (m *OrganizationList_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrganizationList_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrganizationList_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrganizationList_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationList_Output.Merge(m, src)
}
func (m *OrganizationList_Output) XXX_Size() int {
	return m.Size()
}
func (m *OrganizationList_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationList_Output.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationList_Output proto.InternalMessageInfo

func (m *OrganizationList_Output) GetItems() []*pwdb.Organization {
	if m != nil {
		return m.Items
	}
	return nil
}

type ChallengeList struct {
}

func (m *ChallengeList) Reset()         { *m = ChallengeList{} }
func (m *ChallengeList) String() string { return proto.CompactTextString(m) }
func (*ChallengeList) ProtoMessage()    {}
func (*ChallengeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{37}
}
func (m *ChallengeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeList.Merge(m, src)
}
func (m *ChallengeList) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeList) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeList.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeList proto.InternalMessageInfo

type ChallengeList_Input struct {
}

func (m *ChallengeList_Input) Reset()         { *m = ChallengeList_Input{} }
func (m *ChallengeList_Input) String() string { return proto.CompactTextString(m) }
func (*ChallengeList_Input) ProtoMessage()    {}
func (*ChallengeList_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{37, 0}
}
func (m *ChallengeList_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeList_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeList_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeList_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeList_Input.Merge(m, src)
}
func (m *ChallengeList_Input) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeList_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeList_Input.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeList_Input proto.InternalMessageInfo

type ChallengeList_Output struct {
	Items []*pwdb.Challenge `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *ChallengeList_Output) Reset()         { *m = ChallengeList_Output{} }
func (m *ChallengeList_Output) String() string { return proto.CompactTextString(m) }
func (*ChallengeList_Output) ProtoMessage()    {}
func (*ChallengeList_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{37, 1}
}
func (m *ChallengeList_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeList_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeList_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeList_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeList_Output.Merge(m, src)
}
func (m *ChallengeList_Output) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeList_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeList_Output.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeList_Output proto.InternalMessageInfo

func (m *ChallengeList_Output) GetItems() []*pwdb.Challenge {
	if m != nil {
		return m.Items
	}
	return nil
}

type UserGetSession struct {
}

func (m *UserGetSession) Reset()         { *m = UserGetSession{} }
func (m *UserGetSession) String() string { return proto.CompactTextString(m) }
func (*UserGetSession) ProtoMessage()    {}
func (*UserGetSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{38}
}
func (m *UserGetSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGetSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGetSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGetSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGetSession.Merge(m, src)
}
func (m *UserGetSession) XXX_Size() int {
	return m.Size()
}
func (m *UserGetSession) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGetSession.DiscardUnknown(m)
}

var xxx_messageInfo_UserGetSession proto.InternalMessageInfo

type UserGetSession_Input struct {
}

func (m *UserGetSession_Input) Reset()         { *m = UserGetSession_Input{} }
func (m *UserGetSession_Input) String() string { return proto.CompactTextString(m) }
func (*UserGetSession_Input) ProtoMessage()    {}
func (*UserGetSession_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{38, 0}
}
func (m *UserGetSession_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGetSession_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGetSession_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGetSession_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGetSession_Input.Merge(m, src)
}
func (m *UserGetSession_Input) XXX_Size() int {
	return m.Size()
}
func (m *UserGetSession_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGetSession_Input.DiscardUnknown(m)
}

var xxx_messageInfo_UserGetSession_Input proto.InternalMessageInfo

type UserGetSession_Output struct {
	User          *pwdb.User                             `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	IsNewUser     bool                                   `protobuf:"varint,2,opt,name=is_new_user,json=isNewUser,proto3" json:"is_new_user,omitempty"`
	Claims        *pwsso.Claims                          `protobuf:"bytes,3,opt,name=claims,proto3" json:"claims,omitempty"`
	Notifications int32                                  `protobuf:"varint,4,opt,name=notifications,proto3" json:"notifications,omitempty"`
	Seasons       []*UserGetSession_Output_SeasonAndTeam `protobuf:"bytes,5,rep,name=seasons,proto3" json:"seasons,omitempty"`
}

func (m *UserGetSession_Output) Reset()         { *m = UserGetSession_Output{} }
func (m *UserGetSession_Output) String() string { return proto.CompactTextString(m) }
func (*UserGetSession_Output) ProtoMessage()    {}
func (*UserGetSession_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{38, 1}
}
func (m *UserGetSession_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGetSession_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGetSession_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGetSession_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGetSession_Output.Merge(m, src)
}
func (m *UserGetSession_Output) XXX_Size() int {
	return m.Size()
}
func (m *UserGetSession_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGetSession_Output.DiscardUnknown(m)
}

var xxx_messageInfo_UserGetSession_Output proto.InternalMessageInfo

func (m *UserGetSession_Output) GetUser() *pwdb.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserGetSession_Output) GetIsNewUser() bool {
	if m != nil {
		return m.IsNewUser
	}
	return false
}

func (m *UserGetSession_Output) GetClaims() *pwsso.Claims {
	if m != nil {
		return m.Claims
	}
	return nil
}

func (m *UserGetSession_Output) GetNotifications() int32 {
	if m != nil {
		return m.Notifications
	}
	return 0
}

func (m *UserGetSession_Output) GetSeasons() []*UserGetSession_Output_SeasonAndTeam {
	if m != nil {
		return m.Seasons
	}
	return nil
}

type UserGetSession_Output_SeasonAndTeam struct {
	Season   *pwdb.Season `protobuf:"bytes,1,opt,name=season,proto3" json:"season,omitempty"`
	Team     *pwdb.Team   `protobuf:"bytes,2,opt,name=team,proto3" json:"team,omitempty"`
	IsActive bool         `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (m *UserGetSession_Output_SeasonAndTeam) Reset()         { *m = UserGetSession_Output_SeasonAndTeam{} }
func (m *UserGetSession_Output_SeasonAndTeam) String() string { return proto.CompactTextString(m) }
func (*UserGetSession_Output_SeasonAndTeam) ProtoMessage()    {}
func (*UserGetSession_Output_SeasonAndTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{38, 1, 0}
}
func (m *UserGetSession_Output_SeasonAndTeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGetSession_Output_SeasonAndTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGetSession_Output_SeasonAndTeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGetSession_Output_SeasonAndTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGetSession_Output_SeasonAndTeam.Merge(m, src)
}
func (m *UserGetSession_Output_SeasonAndTeam) XXX_Size() int {
	return m.Size()
}
func (m *UserGetSession_Output_SeasonAndTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGetSession_Output_SeasonAndTeam.DiscardUnknown(m)
}

var xxx_messageInfo_UserGetSession_Output_SeasonAndTeam proto.InternalMessageInfo

func (m *UserGetSession_Output_SeasonAndTeam) GetSeason() *pwdb.Season {
	if m != nil {
		return m.Season
	}
	return nil
}

func (m *UserGetSession_Output_SeasonAndTeam) GetTeam() *pwdb.Team {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *UserGetSession_Output_SeasonAndTeam) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type GetStatus struct {
}

func (m *GetStatus) Reset()         { *m = GetStatus{} }
func (m *GetStatus) String() string { return proto.CompactTextString(m) }
func (*GetStatus) ProtoMessage()    {}
func (*GetStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{39}
}
func (m *GetStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatus.Merge(m, src)
}
func (m *GetStatus) XXX_Size() int {
	return m.Size()
}
func (m *GetStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatus.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatus proto.InternalMessageInfo

type GetStatus_Input struct {
}

func (m *GetStatus_Input) Reset()         { *m = GetStatus_Input{} }
func (m *GetStatus_Input) String() string { return proto.CompactTextString(m) }
func (*GetStatus_Input) ProtoMessage()    {}
func (*GetStatus_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{39, 0}
}
func (m *GetStatus_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStatus_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStatus_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStatus_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatus_Input.Merge(m, src)
}
func (m *GetStatus_Input) XXX_Size() int {
	return m.Size()
}
func (m *GetStatus_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatus_Input.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatus_Input proto.InternalMessageInfo

type GetStatus_Output struct {
	EverythingIsOK bool `protobuf:"varint,1,opt,name=everything_is_ok,json=everythingIsOk,proto3" json:"everything_is_ok,omitempty"`
}

func (m *GetStatus_Output) Reset()         { *m = GetStatus_Output{} }
func (m *GetStatus_Output) String() string { return proto.CompactTextString(m) }
func (*GetStatus_Output) ProtoMessage()    {}
func (*GetStatus_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{39, 1}
}
func (m *GetStatus_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStatus_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStatus_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStatus_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatus_Output.Merge(m, src)
}
func (m *GetStatus_Output) XXX_Size() int {
	return m.Size()
}
func (m *GetStatus_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatus_Output.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatus_Output proto.InternalMessageInfo

func (m *GetStatus_Output) GetEverythingIsOK() bool {
	if m != nil {
		return m.EverythingIsOK
	}
	return false
}

type GetInfo struct {
}

func (m *GetInfo) Reset()         { *m = GetInfo{} }
func (m *GetInfo) String() string { return proto.CompactTextString(m) }
func (*GetInfo) ProtoMessage()    {}
func (*GetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{40}
}
func (m *GetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfo.Merge(m, src)
}
func (m *GetInfo) XXX_Size() int {
	return m.Size()
}
func (m *GetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfo proto.InternalMessageInfo

type GetInfo_Input struct {
}

func (m *GetInfo_Input) Reset()         { *m = GetInfo_Input{} }
func (m *GetInfo_Input) String() string { return proto.CompactTextString(m) }
func (*GetInfo_Input) ProtoMessage()    {}
func (*GetInfo_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{40, 0}
}
func (m *GetInfo_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInfo_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInfo_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInfo_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfo_Input.Merge(m, src)
}
func (m *GetInfo_Input) XXX_Size() int {
	return m.Size()
}
func (m *GetInfo_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfo_Input.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfo_Input proto.InternalMessageInfo

type GetInfo_Output struct {
	Version      string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Uptime       int32  `protobuf:"varint,2,opt,name=uptime,proto3" json:"uptime,omitempty"`
	Commit       string `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
	BuiltAt      string `protobuf:"bytes,4,opt,name=built_at,json=builtAt,proto3" json:"built_at,omitempty"`
	BuiltBy      string `protobuf:"bytes,5,opt,name=built_by,json=builtBy,proto3" json:"built_by,omitempty"`
	WithinDocker bool   `protobuf:"varint,6,opt,name=within_docker,json=withinDocker,proto3" json:"within_docker,omitempty"`
}

func (m *GetInfo_Output) Reset()         { *m = GetInfo_Output{} }
func (m *GetInfo_Output) String() string { return proto.CompactTextString(m) }
func (*GetInfo_Output) ProtoMessage()    {}
func (*GetInfo_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{40, 1}
}
func (m *GetInfo_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInfo_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInfo_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInfo_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfo_Output.Merge(m, src)
}
func (m *GetInfo_Output) XXX_Size() int {
	return m.Size()
}
func (m *GetInfo_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfo_Output.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfo_Output proto.InternalMessageInfo

func (m *GetInfo_Output) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GetInfo_Output) GetUptime() int32 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *GetInfo_Output) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

func (m *GetInfo_Output) GetBuiltAt() string {
	if m != nil {
		return m.BuiltAt
	}
	return ""
}

func (m *GetInfo_Output) GetBuiltBy() string {
	if m != nil {
		return m.BuiltBy
	}
	return ""
}

func (m *GetInfo_Output) GetWithinDocker() bool {
	if m != nil {
		return m.WithinDocker
	}
	return false
}

type CouponValidate struct {
}

func (m *CouponValidate) Reset()         { *m = CouponValidate{} }
func (m *CouponValidate) String() string { return proto.CompactTextString(m) }
func (*CouponValidate) ProtoMessage()    {}
func (*CouponValidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{41}
}
func (m *CouponValidate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CouponValidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CouponValidate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CouponValidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CouponValidate.Merge(m, src)
}
func (m *CouponValidate) XXX_Size() int {
	return m.Size()
}
func (m *CouponValidate) XXX_DiscardUnknown() {
	xxx_messageInfo_CouponValidate.DiscardUnknown(m)
}

var xxx_messageInfo_CouponValidate proto.InternalMessageInfo

type CouponValidate_Input struct {
	Hash   string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	TeamID int64  `protobuf:"varint,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (m *CouponValidate_Input) Reset()         { *m = CouponValidate_Input{} }
func (m *CouponValidate_Input) String() string { return proto.CompactTextString(m) }
func (*CouponValidate_Input) ProtoMessage()    {}
func (*CouponValidate_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{41, 0}
}
func (m *CouponValidate_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CouponValidate_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CouponValidate_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CouponValidate_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CouponValidate_Input.Merge(m, src)
}
func (m *CouponValidate_Input) XXX_Size() int {
	return m.Size()
}
func (m *CouponValidate_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_CouponValidate_Input.DiscardUnknown(m)
}

var xxx_messageInfo_CouponValidate_Input proto.InternalMessageInfo

func (m *CouponValidate_Input) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *CouponValidate_Input) GetTeamID() int64 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

type CouponValidate_Output struct {
	CouponValidation *pwdb.CouponValidation `protobuf:"bytes,1,opt,name=coupon_validation,json=couponValidation,proto3" json:"coupon_validation,omitempty"`
}

func (m *CouponValidate_Output) Reset()         { *m = CouponValidate_Output{} }
func (m *CouponValidate_Output) String() string { return proto.CompactTextString(m) }
func (*CouponValidate_Output) ProtoMessage()    {}
func (*CouponValidate_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{41, 1}
}
func (m *CouponValidate_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CouponValidate_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CouponValidate_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CouponValidate_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CouponValidate_Output.Merge(m, src)
}
func (m *CouponValidate_Output) XXX_Size() int {
	return m.Size()
}
func (m *CouponValidate_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_CouponValidate_Output.DiscardUnknown(m)
}

var xxx_messageInfo_CouponValidate_Output proto.InternalMessageInfo

func (m *CouponValidate_Output) GetCouponValidation() *pwdb.CouponValidation {
	if m != nil {
		return m.CouponValidation
	}
	return nil
}

// Void is an empty message
type Void struct {
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_c93fd103fab7cf9c, []int{42}
}
func (m *Void) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Void.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return m.Size()
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AdminRedump)(nil), "pathwar.api.AdminRedump")
	proto.RegisterType((*AdminRedump_Input)(nil), "pathwar.api.AdminRedump.Input")
	proto.RegisterType((*AdminRedump_Output)(nil), "pathwar.api.AdminRedump.Output")
	proto.RegisterType((*AdminAddCoupon)(nil), "pathwar.api.AdminAddCoupon")
	proto.RegisterType((*AdminAddCoupon_Input)(nil), "pathwar.api.AdminAddCoupon.Input")
	proto.RegisterType((*AdminAddCoupon_Output)(nil), "pathwar.api.AdminAddCoupon.Output")
	proto.RegisterType((*AdminListChallenges)(nil), "pathwar.api.AdminListChallenges")
	proto.RegisterType((*AdminListChallenges_Input)(nil), "pathwar.api.AdminListChallenges.Input")
	proto.RegisterType((*AdminListChallenges_Output)(nil), "pathwar.api.AdminListChallenges.Output")
	proto.RegisterType((*AdminListAgents)(nil), "pathwar.api.AdminListAgents")
	proto.RegisterType((*AdminListAgents_Input)(nil), "pathwar.api.AdminListAgents.Input")
	proto.RegisterType((*AdminListAgents_Output)(nil), "pathwar.api.AdminListAgents.Output")
	proto.RegisterType((*AdminListCoupons)(nil), "pathwar.api.AdminListCoupons")
	proto.RegisterType((*AdminListCoupons_Input)(nil), "pathwar.api.AdminListCoupons.Input")
	proto.RegisterType((*AdminListCoupons_Output)(nil), "pathwar.api.AdminListCoupons.Output")
	proto.RegisterType((*AdminListOrganizations)(nil), "pathwar.api.AdminListOrganizations")
	proto.RegisterType((*AdminListOrganizations_Input)(nil), "pathwar.api.AdminListOrganizations.Input")
	proto.RegisterType((*AdminListOrganizations_Output)(nil), "pathwar.api.AdminListOrganizations.Output")
	proto.RegisterType((*AdminListUsers)(nil), "pathwar.api.AdminListUsers")
	proto.RegisterType((*AdminListUsers_Input)(nil), "pathwar.api.AdminListUsers.Input")
	proto.RegisterType((*AdminListUsers_Output)(nil), "pathwar.api.AdminListUsers.Output")
	proto.RegisterType((*AdminListChallengeSubscriptions)(nil), "pathwar.api.AdminListChallengeSubscriptions")
	proto.RegisterType((*AdminListChallengeSubscriptions_Input)(nil), "pathwar.api.AdminListChallengeSubscriptions.Input")
	proto.RegisterType((*AdminListChallengeSubscriptions_Output)(nil), "pathwar.api.AdminListChallengeSubscriptions.Output")
	proto.RegisterType((*AdminListAll)(nil), "pathwar.api.AdminListAll")
	proto.RegisterType((*AdminListAll_Input)(nil), "pathwar.api.AdminListAll.Input")
	proto.RegisterType((*AdminListAll_Output)(nil), "pathwar.api.AdminListAll.Output")
	proto.RegisterType((*AdminSearch)(nil), "pathwar.api.AdminSearch")
	proto.RegisterType((*AdminSearch_Input)(nil), "pathwar.api.AdminSearch.Input")
	proto.RegisterType((*AdminSearch_Output)(nil), "pathwar.api.AdminSearch.Output")
	proto.RegisterType((*AdminListTeams)(nil), "pathwar.api.AdminListTeams")
	proto.RegisterType((*AdminListTeams_Input)(nil), "pathwar.api.AdminListTeams.Input")
	proto.RegisterType((*AdminListTeams_Output)(nil), "pathwar.api.AdminListTeams.Output")
	proto.RegisterType((*AdminListActivities)(nil), "pathwar.api.AdminListActivities")
	proto.RegisterType((*AdminListActivities_Input)(nil), "pathwar.api.AdminListActivities.Input")
	proto.RegisterType((*AdminListActivities_Output)(nil), "pathwar.api.AdminListActivities.Output")
	proto.RegisterType((*AdminChallengeAdd)(nil), "pathwar.api.AdminChallengeAdd")
	proto.RegisterType((*AdminChallengeAdd_Input)(nil), "pathwar.api.AdminChallengeAdd.Input")
	proto.RegisterType((*AdminChallengeAdd_Output)(nil), "pathwar.api.AdminChallengeAdd.Output")
	proto.RegisterType((*AdminChallengeRedump)(nil), "pathwar.api.AdminChallengeRedump")
	proto.RegisterType((*AdminChallengeRedump_Input)(nil), "pathwar.api.AdminChallengeRedump.Input")
	proto.RegisterType((*AdminChallengeRedump_Output)(nil), "pathwar.api.AdminChallengeRedump.Output")
	proto.RegisterType((*AdminChallengeFlavorAdd)(nil), "pathwar.api.AdminChallengeFlavorAdd")
	proto.RegisterType((*AdminChallengeFlavorAdd_Input)(nil), "pathwar.api.AdminChallengeFlavorAdd.Input")
	proto.RegisterType((*AdminChallengeFlavorAdd_Output)(nil), "pathwar.api.AdminChallengeFlavorAdd.Output")
	proto.RegisterType((*AdminSeasonChallengeAdd)(nil), "pathwar.api.AdminSeasonChallengeAdd")
	proto.RegisterType((*AdminSeasonChallengeAdd_Input)(nil), "pathwar.api.AdminSeasonChallengeAdd.Input")
	proto.RegisterType((*AdminSeasonChallengeAdd_Output)(nil), "pathwar.api.AdminSeasonChallengeAdd.Output")
	proto.RegisterType((*AdminSeasonAdd)(nil), "pathwar.api.AdminSeasonAdd")
	proto.RegisterType((*AdminSeasonAdd_Input)(nil), "pathwar.api.AdminSeasonAdd.Input")
	proto.RegisterType((*AdminSeasonAdd_Output)(nil), "pathwar.api.AdminSeasonAdd.Output")
	proto.RegisterType((*AdminSetTeams)(nil), "pathwar.api.AdminSetTeams")
	proto.RegisterType((*AdminSetTeams_Input)(nil), "pathwar.api.AdminSetTeams.Input")
	proto.RegisterType((*AdminSetTeams_Output)(nil), "pathwar.api.AdminSetTeams.Output")
	proto.RegisterType((*AdminTestingSeasonUserAdd)(nil), "pathwar.api.AdminTestingSeasonUserAdd")
	proto.RegisterType((*AdminTestingSeasonUserAdd_Input)(nil), "pathwar.api.AdminTestingSeasonUserAdd.Input")
	proto.RegisterType((*AdminTestingSeasonUserAdd_Output)(nil), "pathwar.api.AdminTestingSeasonUserAdd.Output")
	proto.RegisterType((*AgentList)(nil), "pathwar.api.AgentList")
	proto.RegisterType((*AgentList_Input)(nil), "pathwar.api.AgentList.Input")
	proto.RegisterType((*AgentList_Output)(nil), "pathwar.api.AgentList.Output")
	proto.RegisterType((*AgentRegister)(nil), "pathwar.api.AgentRegister")
	proto.RegisterType((*AgentRegister_Input)(nil), "pathwar.api.AgentRegister.Input")
	proto.RegisterType((*AgentRegister_Output)(nil), "pathwar.api.AgentRegister.Output")
	proto.RegisterType((*AgentListInstances)(nil), "pathwar.api.AgentListInstances")
	proto.RegisterType((*AgentListInstances_Input)(nil), "pathwar.api.AgentListInstances.Input")
	proto.RegisterType((*AgentListInstances_Output)(nil), "pathwar.api.AgentListInstances.Output")
	proto.RegisterType((*AgentUpdateState)(nil), "pathwar.api.AgentUpdateState")
	proto.RegisterType((*AgentUpdateState_Input)(nil), "pathwar.api.AgentUpdateState.Input")
	proto.RegisterType((*AgentUpdateState_Output)(nil), "pathwar.api.AgentUpdateState.Output")
	proto.RegisterType((*TeamGet)(nil), "pathwar.api.TeamGet")
	proto.RegisterType((*TeamGet_Input)(nil), "pathwar.api.TeamGet.Input")
	proto.RegisterType((*TeamGet_Output)(nil), "pathwar.api.TeamGet.Output")
	proto.RegisterType((*SeasonChallengeList)(nil), "pathwar.api.SeasonChallengeList")
	proto.RegisterType((*SeasonChallengeList_Input)(nil), "pathwar.api.SeasonChallengeList.Input")
	proto.RegisterType((*SeasonChallengeList_Output)(nil), "pathwar.api.SeasonChallengeList.Output")
	proto.RegisterType((*SeasonChallengeGet)(nil), "pathwar.api.SeasonChallengeGet")
	proto.RegisterType((*SeasonChallengeGet_Input)(nil), "pathwar.api.SeasonChallengeGet.Input")
	proto.RegisterType((*SeasonChallengeGet_Output)(nil), "pathwar.api.SeasonChallengeGet.Output")
	proto.RegisterType((*ChallengeGet)(nil), "pathwar.api.ChallengeGet")
	proto.RegisterType((*ChallengeGet_Input)(nil), "pathwar.api.ChallengeGet.Input")
	proto.RegisterType((*ChallengeGet_Output)(nil), "pathwar.api.ChallengeGet.Output")
	proto.RegisterType((*SeasonChallengeBuy)(nil), "pathwar.api.SeasonChallengeBuy")
	proto.RegisterType((*SeasonChallengeBuy_Input)(nil), "pathwar.api.SeasonChallengeBuy.Input")
	proto.RegisterType((*SeasonChallengeBuy_Output)(nil), "pathwar.api.SeasonChallengeBuy.Output")
	proto.RegisterType((*ChallengeSubscriptionValidate)(nil), "pathwar.api.ChallengeSubscriptionValidate")
	proto.RegisterType((*ChallengeSubscriptionValidate_Input)(nil), "pathwar.api.ChallengeSubscriptionValidate.Input")
	proto.RegisterType((*ChallengeSubscriptionValidate_Output)(nil), "pathwar.api.ChallengeSubscriptionValidate.Output")
	proto.RegisterType((*TeamList)(nil), "pathwar.api.TeamList")
	proto.RegisterType((*TeamList_Input)(nil), "pathwar.api.TeamList.Input")
	proto.RegisterType((*TeamList_Output)(nil), "pathwar.api.TeamList.Output")
	proto.RegisterType((*TeamCreate)(nil), "pathwar.api.TeamCreate")
	proto.RegisterType((*TeamCreate_Input)(nil), "pathwar.api.TeamCreate.Input")
	proto.RegisterType((*TeamCreate_Output)(nil), "pathwar.api.TeamCreate.Output")
	proto.RegisterType((*TeamSendInvite)(nil), "pathwar.api.TeamSendInvite")
	proto.RegisterType((*TeamSendInvite_Input)(nil), "pathwar.api.TeamSendInvite.Input")
	proto.RegisterType((*TeamSendInvite_Output)(nil), "pathwar.api.TeamSendInvite.Output")
	proto.RegisterType((*TeamAcceptInvite)(nil), "pathwar.api.TeamAcceptInvite")
	proto.RegisterType((*TeamAcceptInvite_Input)(nil), "pathwar.api.TeamAcceptInvite.Input")
	proto.RegisterType((*TeamAcceptInvite_Output)(nil), "pathwar.api.TeamAcceptInvite.Output")
	proto.RegisterType((*SeasonList)(nil), "pathwar.api.SeasonList")
	proto.RegisterType((*SeasonList_Input)(nil), "pathwar.api.SeasonList.Input")
	proto.RegisterType((*SeasonList_Output)(nil), "pathwar.api.SeasonList.Output")
	proto.RegisterType((*SeasonList_Output_SeasonAndTeam)(nil), "pathwar.api.SeasonList.Output.SeasonAndTeam")
	proto.RegisterType((*UserSetPreferences)(nil), "pathwar.api.UserSetPreferences")
	proto.RegisterType((*UserSetPreferences_Input)(nil), "pathwar.api.UserSetPreferences.Input")
	proto.RegisterType((*UserSetPreferences_Output)(nil), "pathwar.api.UserSetPreferences.Output")
	proto.RegisterType((*UserDeleteAccount)(nil), "pathwar.api.UserDeleteAccount")
	proto.RegisterType((*UserDeleteAccount_Input)(nil), "pathwar.api.UserDeleteAccount.Input")
	proto.RegisterType((*UserDeleteAccount_Output)(nil), "pathwar.api.UserDeleteAccount.Output")
	proto.RegisterType((*OrganizationList)(nil), "pathwar.api.OrganizationList")
	proto.RegisterType((*OrganizationList_Input)(nil), "pathwar.api.OrganizationList.Input")
	proto.RegisterType((*OrganizationList_Output)(nil), "pathwar.api.OrganizationList.Output")
	proto.RegisterType((*ChallengeList)(nil), "pathwar.api.ChallengeList")
	proto.RegisterType((*ChallengeList_Input)(nil), "pathwar.api.ChallengeList.Input")
	proto.RegisterType((*ChallengeList_Output)(nil), "pathwar.api.ChallengeList.Output")
	proto.RegisterType((*UserGetSession)(nil), "pathwar.api.UserGetSession")
	proto.RegisterType((*UserGetSession_Input)(nil), "pathwar.api.UserGetSession.Input")
	proto.RegisterType((*UserGetSession_Output)(nil), "pathwar.api.UserGetSession.Output")
	proto.RegisterType((*UserGetSession_Output_SeasonAndTeam)(nil), "pathwar.api.UserGetSession.Output.SeasonAndTeam")
	proto.RegisterType((*GetStatus)(nil), "pathwar.api.GetStatus")
	proto.RegisterType((*GetStatus_Input)(nil), "pathwar.api.GetStatus.Input")
	proto.RegisterType((*GetStatus_Output)(nil), "pathwar.api.GetStatus.Output")
	proto.RegisterType((*GetInfo)(nil), "pathwar.api.GetInfo")
	proto.RegisterType((*GetInfo_Input)(nil), "pathwar.api.GetInfo.Input")
	proto.RegisterType((*GetInfo_Output)(nil), "pathwar.api.GetInfo.Output")
	proto.RegisterType((*CouponValidate)(nil), "pathwar.api.CouponValidate")
	proto.RegisterType((*CouponValidate_Input)(nil), "pathwar.api.CouponValidate.Input")
	proto.RegisterType((*CouponValidate_Output)(nil), "pathwar.api.CouponValidate.Output")
	proto.RegisterType((*Void)(nil), "pathwar.api.Void")
}

func init() { proto.RegisterFile("pwapi.proto", fileDescriptor_c93fd103fab7cf9c) }

var fileDescriptor_c93fd103fab7cf9c = []byte{
	// 4181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7b, 0xcd, 0x6f, 0x1c, 0x47,
	0x7a, 0xb7, 0x7a, 0xf8, 0x35, 0x53, 0xc3, 0x8f, 0x61, 0x91, 0x92, 0x46, 0x2d, 0x89, 0x33, 0x6a,
	0xc9, 0xb6, 0x3e, 0x3c, 0x1c, 0x9a, 0xd2, 0xee, 0xeb, 0x95, 0xfc, 0xda, 0x3b, 0x14, 0x65, 0x7a,
	0x56, 0xb1, 0x48, 0x37, 0xe5, 0x5d, 0xc7, 0x58, 0x63, 0xd0, 0x9c, 0x2e, 0xce, 0xf4, 0x6a, 0xa6,
	0xbb, 0xb7, 0xab, 0x86, 0x14, 0x77, 0xe1, 0x45, 0xe2, 0x64, 0x37, 0x59, 0x20, 0x09, 0x0c, 0x2f,
	0x10, 0x20, 0x8b, 0x05, 0x72, 0x08, 0x92, 0x5c, 0xb2, 0x87, 0x5c, 0x92, 0x63, 0x82, 0x1c, 0x82,
	0x3d, 0xe4, 0x60, 0x20, 0x87, 0x0d, 0x82, 0x80, 0x09, 0xe8, 0x1c, 0x72, 0xc9, 0x21, 0xfa, 0x0b,
	0x82, 0xfa, 0xe8, 0xee, 0xaa, 0xee, 0x9e, 0x21, 0x29, 0x6b, 0x81, 0x20, 0xc8, 0x89, 0x53, 0xf5,
	0xfc, 0xea, 0x79, 0x9e, 0xaa, 0x7a, 0xea, 0xf9, 0xa8, 0x2e, 0x82, 0xa2, 0xbf, 0x6f, 0xf9, 0xce,
	0xb2, 0x1f, 0x78, 0xc4, 0x83, 0x45, 0xdf, 0x22, 0xdd, 0x7d, 0x2b, 0x58, 0xb6, 0x7c, 0x47, 0xaf,
	0x74, 0x3c, 0xaf, 0xd3, 0x43, 0x75, 0x46, 0xda, 0x19, 0xec, 0xd6, 0x89, 0xd3, 0x47, 0x98, 0x58,
	0x7d, 0x9f, 0xa3, 0xf5, 0x4b, 0x02, 0x60, 0xf9, 0x4e, 0xdd, 0x72, 0x5d, 0x8f, 0x58, 0xc4, 0xf1,
	0x5c, 0x2c, 0xa8, 0xb5, 0x8e, 0x43, 0xba, 0x83, 0x9d, 0xe5, 0xb6, 0xd7, 0xaf, 0x77, 0xbc, 0x8e,
	0x17, 0xf3, 0xa1, 0x2d, 0xd6, 0x60, 0xbf, 0x04, 0x7c, 0x5b, 0x86, 0x07, 0x7e, 0xbb, 0x86, 0xda,
	0x1e, 0x3e, 0xc0, 0x04, 0x89, 0x66, 0xc7, 0x22, 0x68, 0xdf, 0x3a, 0xe0, 0x5c, 0xda, 0xb5, 0x0e,
	0x72, 0x6b, 0x78, 0xdf, 0xea, 0x74, 0x50, 0x50, 0xf7, 0x7c, 0x26, 0x37, 0x43, 0x87, 0xa2, 0xbf,
	0x8f, 0x71, 0x28, 0x01, 0xf8, 0xfb, 0xf6, 0x0e, 0xff, 0x6d, 0x74, 0x41, 0xb1, 0x61, 0xf7, 0x1d,
	0xd7, 0x44, 0xf6, 0xa0, 0xef, 0xeb, 0x9b, 0x60, 0xa2, 0xe9, 0xfa, 0x03, 0x02, 0xdf, 0x06, 0x45,
	0xc7, 0x46, 0x2e, 0x71, 0x76, 0x1d, 0x14, 0xe0, 0xb2, 0x56, 0x1d, 0xbb, 0x5e, 0x58, 0xbb, 0x76,
	0x74, 0x58, 0x29, 0x36, 0xe3, 0xee, 0x67, 0x87, 0x95, 0xf9, 0x41, 0xd0, 0xbb, 0x6b, 0x48, 0x50,
	0xc3, 0x94, 0x07, 0xea, 0x79, 0x30, 0xb9, 0x39, 0x20, 0xfe, 0x80, 0x18, 0xbf, 0xd4, 0xc0, 0x2c,
	0x13, 0xd5, 0xb0, 0xed, 0xfb, 0xde, 0xc0, 0xf7, 0x5c, 0xfd, 0x0f, 0xb4, 0x50, 0x1c, 0x04, 0xe3,
	0x5d, 0x0b, 0x77, 0xcb, 0x5a, 0x55, 0xbb, 0x5e, 0x30, 0xd9, 0x6f, 0xb8, 0x08, 0x26, 0xf6, 0xac,
	0xde, 0x00, 0x95, 0x73, 0x55, 0xed, 0xfa, 0x98, 0xc9, 0x1b, 0x70, 0x05, 0x2c, 0xf6, 0xad, 0xa7,
	0xad, 0x3d, 0xab, 0xe7, 0xd8, 0x6c, 0x8a, 0xad, 0xb6, 0x37, 0x70, 0x49, 0x79, 0x8c, 0x81, 0x60,
	0xdf, 0x7a, 0xfa, 0xcd, 0x88, 0x74, 0x9f, 0x52, 0xe0, 0x0d, 0x50, 0xc0, 0xc8, 0xc2, 0x9e, 0xdb,
	0x72, 0xec, 0xf2, 0x38, 0x15, 0xb0, 0x36, 0x7d, 0x74, 0x58, 0xc9, 0x6f, 0xb3, 0xce, 0xe6, 0xba,
	0x99, 0xe7, 0xe4, 0xa6, 0xad, 0xdf, 0x09, 0xb5, 0x85, 0x37, 0xc1, 0x64, 0x9b, 0x29, 0xc9, 0x54,
	0x2a, 0xae, 0xc2, 0xe5, 0xd0, 0x22, 0xec, 0x9d, 0x65, 0xae, 0xbe, 0x29, 0x10, 0x46, 0x0b, 0x2c,
	0xb0, 0x89, 0xfd, 0x9a, 0x83, 0xc9, 0xfd, 0xae, 0xd5, 0xeb, 0x21, 0xb7, 0x83, 0xb0, 0x3e, 0x25,
	0x26, 0xa7, 0xbf, 0x15, 0x71, 0xfd, 0x0a, 0x00, 0xed, 0x08, 0xc0, 0x16, 0xb5, 0xb8, 0x7a, 0x56,
	0xe1, 0x1c, 0x52, 0x4d, 0x09, 0x68, 0x6c, 0x82, 0xb9, 0x48, 0x40, 0xa3, 0x83, 0x5c, 0x22, 0x31,
	0xbf, 0x1d, 0x31, 0xbf, 0x01, 0x26, 0x2d, 0x46, 0x14, 0x8c, 0xe7, 0x65, 0xc6, 0x6c, 0x98, 0x29,
	0x00, 0xc6, 0x36, 0x28, 0xc5, 0x1a, 0xb3, 0x49, 0x48, 0x1c, 0xbf, 0x1a, 0x71, 0x7c, 0x15, 0x4c,
	0xf1, 0x29, 0x86, 0x2c, 0xb3, 0x56, 0x21, 0x84, 0x18, 0x4f, 0xc0, 0xb9, 0x88, 0xe9, 0x66, 0xd0,
	0xb1, 0x5c, 0xe7, 0x7b, 0xdc, 0x06, 0x63, 0xd6, 0xef, 0x44, 0xac, 0xdf, 0x04, 0x33, 0x9e, 0x8c,
	0x11, 0x02, 0xca, 0xb2, 0x00, 0x99, 0x89, 0xa9, 0xc2, 0x8d, 0x87, 0xc2, 0x98, 0xa8, 0xb0, 0xf7,
	0x31, 0xb5, 0xb4, 0x48, 0xc8, 0x4a, 0x24, 0xe4, 0x65, 0x30, 0x31, 0xc0, 0xa1, 0xf9, 0x16, 0x57,
	0x4b, 0x32, 0x73, 0x3a, 0xc8, 0xe4, 0x64, 0xe3, 0x63, 0x50, 0x49, 0x6f, 0xe0, 0xf6, 0x60, 0x07,
	0xb7, 0x03, 0xc7, 0x4f, 0x4c, 0xe1, 0xbd, 0x88, 0xfb, 0x06, 0x98, 0xc1, 0x32, 0x46, 0x48, 0xb9,
	0x92, 0xb9, 0x9f, 0x32, 0x37, 0x53, 0x1d, 0x67, 0xfc, 0x33, 0x00, 0xd3, 0xf1, 0xfe, 0xf6, 0x7a,
	0xb1, 0xb0, 0xbf, 0x05, 0x5f, 0xd2, 0x74, 0xe0, 0x3b, 0x60, 0x3e, 0x6a, 0xb5, 0x76, 0x7b, 0xd6,
	0x9e, 0x17, 0xe0, 0x72, 0x8e, 0x8d, 0xbe, 0x98, 0x39, 0xfa, 0x6d, 0x86, 0x31, 0x4b, 0x6d, 0xb5,
	0x83, 0x71, 0x12, 0xc7, 0x48, 0xd2, 0x63, 0x2c, 0xcd, 0x89, 0x1f, 0xab, 0x58, 0x9b, 0x12, 0x56,
	0x3b, 0x30, 0x7c, 0x04, 0x16, 0x62, 0x9d, 0x1c, 0x17, 0x13, 0xcb, 0x6d, 0x23, 0x5c, 0x1e, 0x67,
	0xbc, 0x2e, 0x67, 0x6a, 0xd5, 0x14, 0x28, 0x13, 0xb6, 0x93, 0x5d, 0x58, 0x32, 0xfc, 0x89, 0x63,
	0x0c, 0x1f, 0xbe, 0x07, 0x16, 0x65, 0x3b, 0x6a, 0xf5, 0x51, 0x7f, 0x87, 0x1a, 0xc8, 0x24, 0x1b,
	0xb8, 0x34, 0xcc, 0xfa, 0xde, 0x65, 0x30, 0x73, 0xc1, 0x4b, 0xf5, 0x61, 0xf8, 0x35, 0x30, 0x4d,
	0x90, 0xd5, 0x8f, 0x58, 0x4d, 0x31, 0x56, 0xe7, 0x64, 0x56, 0x8f, 0x91, 0xd5, 0x17, 0x2c, 0x8a,
	0x24, 0xfa, 0x1d, 0x0f, 0x75, 0xdc, 0x3d, 0x87, 0x20, 0x5c, 0xce, 0x67, 0x0f, 0x6d, 0x32, 0x32,
	0x1f, 0xca, 0x7f, 0xe3, 0xd8, 0xb4, 0x0b, 0x23, 0x4d, 0x3b, 0x7d, 0xce, 0xc0, 0xa9, 0xce, 0x19,
	0x75, 0x01, 0x7c, 0xff, 0x70, 0xb9, 0x98, 0x76, 0x01, 0x7c, 0xaf, 0xcd, 0x10, 0x42, 0xb5, 0xa2,
	0x4a, 0xe2, 0xf2, 0x74, 0x5a, 0x2b, 0x3a, 0x13, 0x93, 0x93, 0xe1, 0x03, 0x50, 0xda, 0xef, 0x7a,
	0x78, 0xbf, 0xeb, 0xb5, 0x2c, 0x42, 0x50, 0xdf, 0x27, 0xb8, 0x3c, 0xc3, 0x86, 0xe8, 0xf2, 0x90,
	0x6f, 0x71, 0x4c, 0x83, 0x43, 0xcc, 0xb9, 0x7d, 0xa5, 0x8d, 0xe1, 0x63, 0x70, 0x36, 0x36, 0xa4,
	0x38, 0x22, 0xe0, 0xf2, 0x2c, 0xe3, 0x55, 0xc9, 0x34, 0xa5, 0x38, 0x3c, 0x98, 0x8b, 0xed, 0x74,
	0x27, 0x86, 0x1f, 0x82, 0xf3, 0x31, 0x57, 0xf5, 0x84, 0xcf, 0x9d, 0xf4, 0x84, 0x9f, 0x6b, 0x67,
	0xba, 0x11, 0xb8, 0x06, 0xe6, 0x1c, 0x77, 0x0f, 0xb9, 0xc4, 0x0b, 0x0e, 0x5a, 0x0e, 0x41, 0x7d,
	0x5c, 0x2e, 0x31, 0x9e, 0x17, 0x64, 0x9e, 0xcd, 0x10, 0xd2, 0x24, 0xa8, 0x6f, 0xce, 0x3a, 0x72,
	0x93, 0x6d, 0xa9, 0xeb, 0xd1, 0xf8, 0xda, 0x16, 0xb3, 0x9d, 0x4f, 0x6f, 0xe9, 0x23, 0x09, 0x60,
	0xaa, 0x70, 0xd9, 0xab, 0xc3, 0x63, 0xbd, 0x3a, 0x7c, 0x08, 0x20, 0xff, 0xa9, 0x2c, 0xf0, 0x02,
	0x1b, 0x78, 0x29, 0x3d, 0x50, 0x5a, 0xdd, 0xf9, 0x76, 0xa2, 0x07, 0xc3, 0x7b, 0x60, 0xda, 0x6a,
	0x77, 0x1d, 0xb4, 0x87, 0xfa, 0xec, 0xbc, 0x2e, 0x32, 0x36, 0xe7, 0x95, 0xf3, 0x1a, 0xd3, 0x4d,
	0x05, 0x0c, 0xef, 0x00, 0x60, 0xb5, 0x89, 0xb3, 0xe7, 0x10, 0x07, 0xe1, 0xf2, 0x59, 0x36, 0x74,
	0x51, 0x1d, 0xca, 0xa8, 0x07, 0xa6, 0x84, 0x33, 0xfe, 0x0a, 0x88, 0x0c, 0x67, 0x1b, 0x59, 0x41,
	0xbb, 0xab, 0x57, 0xc2, 0x94, 0xe3, 0x1c, 0x98, 0xc4, 0xac, 0x4b, 0x24, 0x1d, 0xa2, 0xa5, 0xff,
	0xf0, 0xff, 0x7c, 0xee, 0xff, 0x66, 0x9f, 0x1b, 0x39, 0xce, 0xfc, 0x29, 0x1d, 0x67, 0xe1, 0xb9,
	0x1d, 0x27, 0x38, 0x85, 0xe3, 0x2c, 0x9e, 0xde, 0x71, 0x4e, 0xbf, 0x40, 0xc7, 0x39, 0xf3, 0x2b,
	0x72, 0x9c, 0xb3, 0xbf, 0x02, 0xc7, 0x39, 0xf7, 0xa5, 0x1d, 0x67, 0xe9, 0xb9, 0x1d, 0xe7, 0xfc,
	0xf3, 0x3a, 0x4e, 0xf8, 0x62, 0x1c, 0xe7, 0xc2, 0xf3, 0x3b, 0xce, 0xc5, 0x13, 0x3a, 0x4e, 0x39,
	0xc3, 0xa6, 0x26, 0x38, 0x2c, 0xc3, 0xe6, 0x76, 0xab, 0x8d, 0xb4, 0x5b, 0xe3, 0x5f, 0x34, 0xa9,
	0x46, 0x6a, 0x44, 0x42, 0xf4, 0xdf, 0x8e, 0x2a, 0xc0, 0x45, 0x30, 0xd1, 0x73, 0xfa, 0x0e, 0x61,
	0xde, 0x78, 0xcc, 0xe4, 0x0d, 0x78, 0x17, 0x4c, 0x60, 0xc7, 0x6d, 0xf3, 0x1a, 0x90, 0x1a, 0x39,
	0xaf, 0xb4, 0x97, 0xc3, 0x12, 0x7a, 0xf9, 0x71, 0x58, 0x8a, 0xaf, 0xe5, 0x7f, 0x71, 0x58, 0xd1,
	0x3e, 0xfd, 0xd7, 0x8a, 0x66, 0xf2, 0x21, 0xf0, 0x06, 0x28, 0xed, 0x3a, 0x3d, 0x82, 0x02, 0xc7,
	0xed, 0xb4, 0xfc, 0x00, 0x61, 0xc4, 0xab, 0xc4, 0x82, 0x39, 0x17, 0xf5, 0x6f, 0xb1, 0x6e, 0xfd,
	0xcd, 0x68, 0x42, 0xea, 0x5a, 0x69, 0x27, 0x5c, 0xab, 0x4f, 0x35, 0x30, 0xcf, 0xa6, 0x17, 0x19,
	0x75, 0xc3, 0xb6, 0xf5, 0x37, 0xc2, 0xb9, 0xdd, 0x06, 0x85, 0xc8, 0xac, 0x45, 0x3d, 0x39, 0x24,
	0x8c, 0xc4, 0x38, 0xfd, 0xff, 0x47, 0x3a, 0x3d, 0xcf, 0x70, 0xe3, 0xe7, 0x1a, 0x58, 0x54, 0x55,
	0x12, 0x25, 0xfe, 0xbd, 0x50, 0xab, 0x55, 0x30, 0x2d, 0x85, 0x04, 0x9b, 0x87, 0xc1, 0xb5, 0x39,
	0x5a, 0xe3, 0xc7, 0x31, 0x60, 0xdd, 0x2c, 0xc6, 0xde, 0xdf, 0xd6, 0x3f, 0x88, 0x94, 0x1a, 0x12,
	0x50, 0xb4, 0xe7, 0x0c, 0x28, 0xc6, 0x7f, 0x69, 0xe0, 0xbc, 0xaa, 0x2f, 0x0f, 0x82, 0x74, 0x21,
	0x7f, 0x4b, 0x8b, 0xaf, 0x25, 0x4a, 0xc9, 0xd0, 0x2a, 0x56, 0x64, 0x64, 0x64, 0x9d, 0x4b, 0x44,
	0xd6, 0xd4, 0xdc, 0x73, 0x27, 0x98, 0xfb, 0x56, 0x34, 0xf7, 0x17, 0xa4, 0x85, 0xf1, 0x93, 0x9c,
	0x98, 0x73, 0x22, 0x7e, 0xd3, 0x39, 0xff, 0xa9, 0x3c, 0xe7, 0x64, 0x12, 0x90, 0x25, 0x2d, 0x99,
	0x03, 0xcc, 0x25, 0x72, 0x00, 0x78, 0x03, 0x14, 0xb8, 0xae, 0xf1, 0x84, 0xd9, 0x3d, 0x08, 0x57,
	0xa6, 0xb9, 0x6e, 0xe6, 0x39, 0xb9, 0x69, 0xab, 0x57, 0x26, 0x63, 0x23, 0xaf, 0x4c, 0x94, 0x55,
	0x79, 0x11, 0x7a, 0x1a, 0xdf, 0x17, 0x8e, 0x87, 0x03, 0xe9, 0x5a, 0xdc, 0x0e, 0x97, 0xe2, 0x26,
	0xcb, 0xd9, 0x70, 0xf6, 0xad, 0x8c, 0x88, 0xa9, 0x02, 0xa1, 0xde, 0xe5, 0x9c, 0x74, 0x94, 0xf1,
	0x0d, 0x30, 0x23, 0x84, 0x0b, 0xa7, 0x57, 0x0f, 0x65, 0x9f, 0xd0, 0xd5, 0x49, 0x37, 0x5e, 0xbf,
	0xa7, 0x81, 0x0b, 0x8c, 0xd9, 0x63, 0x84, 0x89, 0xe3, 0x76, 0xb8, 0x28, 0x9a, 0x64, 0xd0, 0x49,
	0xbd, 0x1a, 0x32, 0xbe, 0x0a, 0xa6, 0x68, 0xca, 0x11, 0x1f, 0x41, 0x70, 0x74, 0x58, 0x99, 0xa4,
	0xb0, 0xe6, 0xba, 0x39, 0x49, 0x49, 0x4d, 0x5b, 0x6f, 0x44, 0xb3, 0xf9, 0x7f, 0xa0, 0x28, 0xe5,
	0x3e, 0x62, 0x4a, 0xc3, 0x52, 0x1f, 0x10, 0xa7, 0x3e, 0x46, 0x13, 0x14, 0x58, 0x62, 0x46, 0x5d,
	0xf0, 0x97, 0xbc, 0x3f, 0xfa, 0x87, 0x71, 0x30, 0xc3, 0x7b, 0x50, 0xc7, 0xc1, 0x04, 0x05, 0xfa,
	0xef, 0x8c, 0x87, 0xd3, 0x31, 0xc0, 0xb8, 0x6b, 0xf5, 0x91, 0x98, 0xcb, 0xec, 0xb3, 0xc3, 0x0a,
	0x60, 0x77, 0x84, 0xb4, 0xd3, 0x30, 0x19, 0x0d, 0x2e, 0x83, 0x7c, 0xd7, 0xc3, 0x84, 0xe1, 0xb8,
	0x25, 0xc2, 0x67, 0x87, 0x95, 0x59, 0x86, 0x0b, 0x09, 0x86, 0x19, 0x61, 0xa0, 0x01, 0x72, 0x1e,
	0x16, 0x86, 0x08, 0x8f, 0x0e, 0x2b, 0xb9, 0xcd, 0xed, 0x67, 0x87, 0x95, 0x3c, 0xc3, 0x7b, 0xd8,
	0x30, 0x73, 0x1e, 0xa6, 0x72, 0x59, 0x36, 0x3f, 0x9e, 0x90, 0x4b, 0x3b, 0x0d, 0x93, 0xd1, 0xe0,
	0x2d, 0x30, 0xb5, 0x87, 0x02, 0xec, 0x78, 0x6e, 0x79, 0x82, 0xc1, 0xe6, 0x9f, 0x1d, 0x56, 0x66,
	0x18, 0x4c, 0xf4, 0x1b, 0x66, 0x88, 0xa0, 0x0c, 0x89, 0xd5, 0xe1, 0x79, 0xaa, 0xcc, 0x90, 0x76,
	0x1a, 0x26, 0xa3, 0xc1, 0x37, 0xc0, 0x8c, 0xed, 0xf5, 0x2d, 0xc7, 0x6d, 0xe1, 0xc1, 0xee, 0xae,
	0xf3, 0xb4, 0x3c, 0xc5, 0xd8, 0x9e, 0x7f, 0x76, 0x58, 0x59, 0x60, 0x60, 0x85, 0x6a, 0x98, 0xd3,
	0xbc, 0xbd, 0xcd, 0x9a, 0x74, 0x19, 0xfa, 0x88, 0x58, 0xb6, 0x45, 0xac, 0x72, 0x3e, 0xb1, 0x0c,
	0x21, 0xc1, 0x30, 0x23, 0x0c, 0xbc, 0x0d, 0x80, 0xdb, 0x71, 0xdc, 0xa7, 0x2d, 0xdf, 0x0b, 0x48,
	0xb9, 0x50, 0xd5, 0xae, 0x4f, 0xac, 0x2d, 0x3e, 0x3b, 0xac, 0x94, 0xf8, 0x02, 0x47, 0x24, 0xc3,
	0x2c, 0xb0, 0xc6, 0x96, 0x17, 0x10, 0xb8, 0x02, 0x0a, 0xd6, 0x80, 0x74, 0x5b, 0xd8, 0xea, 0x91,
	0x32, 0x60, 0x52, 0x16, 0x9e, 0x1d, 0x56, 0xe6, 0xf8, 0xe2, 0x84, 0x14, 0xc3, 0xcc, 0xd3, 0xdf,
	0xdb, 0x56, 0x8f, 0xb0, 0x49, 0xa1, 0x5d, 0x6b, 0xd0, 0x23, 0x2d, 0xb6, 0xdf, 0xe5, 0x62, 0x55,
	0xbb, 0x9e, 0x97, 0x27, 0x25, 0x53, 0xe9, 0xa4, 0x78, 0x9b, 0x59, 0x84, 0xfe, 0x5a, 0x64, 0x50,
	0xaf, 0x80, 0x09, 0x3e, 0x9e, 0xdb, 0x68, 0x86, 0x3d, 0x71, 0xba, 0xf1, 0x47, 0x1a, 0x80, 0x91,
	0x69, 0x46, 0x21, 0x41, 0x8e, 0x9f, 0x80, 0x01, 0x5b, 0x92, 0x61, 0xc5, 0xf3, 0x8e, 0x49, 0x86,
	0x59, 0x60, 0x8d, 0x47, 0x56, 0x1f, 0xe9, 0x0f, 0x22, 0x3d, 0xee, 0x81, 0xc2, 0x29, 0x03, 0x54,
	0x8c, 0x37, 0x76, 0x40, 0x89, 0xa9, 0xf6, 0xbe, 0x6f, 0x5b, 0x04, 0x6d, 0x13, 0x8b, 0x20, 0x7d,
	0x3d, 0x54, 0xec, 0xcb, 0x70, 0x96, 0x1c, 0x45, 0x07, 0x4c, 0xd1, 0x33, 0xbb, 0x81, 0x88, 0xe2,
	0x15, 0xf8, 0xdd, 0x10, 0xf7, 0x0a, 0x63, 0xdc, 0x2b, 0xb0, 0xeb, 0xa0, 0x75, 0x73, 0x92, 0x5d,
	0x05, 0xd9, 0xfa, 0x72, 0x34, 0xc7, 0x6b, 0x60, 0x9c, 0x66, 0xc5, 0x62, 0xa9, 0xd3, 0xce, 0x89,
	0x51, 0x8d, 0x1f, 0x69, 0x60, 0x21, 0xe1, 0x7f, 0x99, 0x37, 0x58, 0x0d, 0xa5, 0x2a, 0x8e, 0x9f,
	0xcb, 0x1d, 0xe6, 0xf8, 0xef, 0x45, 0xb2, 0x5f, 0x03, 0x13, 0x3c, 0x23, 0xd7, 0x8e, 0xaf, 0x4c,
	0x39, 0xd2, 0xf8, 0x63, 0x0d, 0xc0, 0x04, 0x89, 0xce, 0xfe, 0x51, 0xa8, 0xc7, 0x03, 0xb0, 0x90,
	0x8c, 0x25, 0xb1, 0x46, 0x67, 0x8f, 0x0e, 0x2b, 0xf3, 0x89, 0xd1, 0xcd, 0x75, 0x73, 0x3e, 0x11,
	0x48, 0x9a, 0xb6, 0xfe, 0xb5, 0x48, 0xc7, 0xba, 0xb2, 0x3e, 0x23, 0x55, 0xe4, 0x4b, 0xf5, 0x1b,
	0x1a, 0x98, 0x56, 0x74, 0x1b, 0x99, 0x37, 0x8d, 0x1d, 0x93, 0x3b, 0xc8, 0x5e, 0x56, 0x56, 0x64,
	0x48, 0x1e, 0xc7, 0x55, 0xf8, 0x65, 0x7a, 0x91, 0xd6, 0x06, 0x07, 0xfa, 0x47, 0xd2, 0x66, 0xc5,
	0x01, 0x5d, 0x3b, 0x79, 0x40, 0xcf, 0x8d, 0x0c, 0xe8, 0x3b, 0x91, 0xaa, 0x1f, 0x80, 0x73, 0xd9,
	0xf5, 0x9c, 0x50, 0xfe, 0x04, 0xe5, 0xdc, 0xd9, 0xcc, 0x72, 0xce, 0xf8, 0x59, 0x0e, 0x5c, 0xce,
	0x1c, 0x20, 0x6a, 0x1e, 0xa4, 0xff, 0x2c, 0x4a, 0x7f, 0xbe, 0x05, 0x2e, 0x64, 0x6b, 0x11, 0xaf,
	0xfd, 0xc5, 0xa3, 0xc3, 0xca, 0xf9, 0x4c, 0x7e, 0xcd, 0x75, 0xf3, 0x7c, 0xa6, 0x0a, 0x4d, 0x1b,
	0x56, 0x41, 0xd1, 0xb7, 0x30, 0xf6, 0xbb, 0x81, 0x85, 0x11, 0xbf, 0xa0, 0x29, 0x98, 0x72, 0x17,
	0x2c, 0xd3, 0x82, 0xaf, 0x4f, 0x8b, 0x28, 0x51, 0x38, 0x84, 0x4d, 0xfd, 0xdb, 0xd1, 0x22, 0x99,
	0x60, 0x31, 0xab, 0x94, 0x16, 0x4b, 0x74, 0x6c, 0x25, 0xbd, 0x90, 0x51, 0x49, 0x1b, 0x3e, 0xc8,
	0xd3, 0x43, 0xfb, 0xdc, 0x47, 0x53, 0xa9, 0xcf, 0xe4, 0xa3, 0x99, 0x91, 0xb4, 0xf0, 0xf3, 0xf8,
	0x77, 0x1a, 0x00, 0xb4, 0x7d, 0x3f, 0x40, 0x74, 0xf5, 0xe3, 0x84, 0xfb, 0x1e, 0x98, 0x53, 0x2e,
	0x6f, 0x22, 0x4b, 0xa3, 0x61, 0x78, 0x56, 0xbe, 0x00, 0x69, 0xae, 0x9b, 0xb3, 0x32, 0xb4, 0x69,
	0x43, 0x28, 0x52, 0x81, 0x1c, 0xff, 0xaa, 0xc7, 0x42, 0xf9, 0x29, 0x52, 0x4b, 0xc5, 0xbb, 0x51,
	0x8f, 0x37, 0xdc, 0xbb, 0x51, 0xaa, 0xf1, 0x67, 0x1a, 0x98, 0xa5, 0xcd, 0x6d, 0xe4, 0xda, 0xfc,
	0x9e, 0x5c, 0x7f, 0x6f, 0x88, 0x3b, 0x2d, 0x64, 0xb9, 0x53, 0x39, 0x13, 0xcb, 0x9d, 0x22, 0x13,
	0xe3, 0xd7, 0xf7, 0xc3, 0x32, 0x31, 0x71, 0x7b, 0x0f, 0xe2, 0xdb, 0x7b, 0xe3, 0x0f, 0x35, 0x50,
	0xa2, 0xa4, 0x46, 0xbb, 0x8d, 0x7c, 0x22, 0x54, 0x7d, 0x2b, 0x54, 0xf5, 0xab, 0x60, 0x56, 0x62,
	0x1b, 0x6b, 0x5c, 0x3a, 0x3a, 0xac, 0x4c, 0xc7, 0x1c, 0x9b, 0xeb, 0xe6, 0x74, 0xcc, 0xf3, 0xc5,
	0xa4, 0x88, 0xff, 0xa1, 0x01, 0xc0, 0x37, 0x42, 0x4d, 0x12, 0x3f, 0xd7, 0xa4, 0x2c, 0x3f, 0xba,
	0xd7, 0xe2, 0x37, 0x7f, 0xaf, 0x2e, 0x4b, 0xdf, 0xca, 0x97, 0xe3, 0xd1, 0xcb, 0x7c, 0x80, 0xe8,
	0x69, 0xb8, 0x36, 0xdb, 0xa9, 0x70, 0xb0, 0xfe, 0x03, 0x30, 0xa3, 0x50, 0x4e, 0x93, 0xa5, 0x47,
	0xf6, 0x90, 0x1b, 0x65, 0x0f, 0xf0, 0x22, 0x28, 0x38, 0xb8, 0xc5, 0xca, 0x74, 0xc4, 0x4c, 0x2d,
	0x6f, 0xe6, 0x1d, 0xcc, 0x0a, 0x78, 0x64, 0x20, 0x00, 0xe9, 0xc6, 0x6e, 0x23, 0xb2, 0x15, 0xa0,
	0x5d, 0x14, 0x20, 0x16, 0x93, 0x1f, 0x84, 0x9b, 0xf0, 0x06, 0x28, 0xf1, 0x81, 0xad, 0xe4, 0xa1,
	0x63, 0x86, 0xcf, 0x99, 0x44, 0x36, 0x3b, 0x6b, 0xc9, 0x6d, 0x5b, 0x0a, 0xed, 0x6f, 0x82, 0x79,
	0x2a, 0x66, 0x1d, 0xf5, 0x10, 0x41, 0x8d, 0x36, 0xfb, 0x56, 0xad, 0xdc, 0x41, 0x07, 0xf1, 0x9c,
	0x0b, 0xa6, 0x68, 0x49, 0xe3, 0xdf, 0x07, 0x25, 0xf9, 0x90, 0xa9, 0xdb, 0xf2, 0x7a, 0xb4, 0x2b,
	0xcb, 0xea, 0x39, 0x1f, 0x7e, 0x4b, 0x29, 0xce, 0xfb, 0x26, 0x98, 0x51, 0x33, 0x80, 0x88, 0xe7,
	0x57, 0x22, 0x9e, 0xb7, 0x54, 0x9e, 0x43, 0x42, 0x95, 0x60, 0xf8, 0xe3, 0x31, 0x30, 0x4b, 0x27,
	0xba, 0x81, 0xc8, 0x36, 0xc2, 0x34, 0x7f, 0x8e, 0x59, 0xfe, 0x67, 0x4e, 0x3e, 0xc8, 0xf4, 0x18,
	0x65, 0x1d, 0x64, 0x76, 0xf9, 0xca, 0xa8, 0x70, 0x09, 0x14, 0x1d, 0xdc, 0x72, 0xd1, 0x7e, 0x8b,
	0x81, 0x73, 0x6c, 0xeb, 0x0a, 0x0e, 0x7e, 0x84, 0xf6, 0x29, 0x0a, 0xde, 0x02, 0x93, 0xed, 0x9e,
	0xe5, 0xf4, 0x79, 0x49, 0x50, 0x5c, 0x5d, 0x88, 0xf8, 0x60, 0xec, 0x2d, 0xdf, 0x67, 0x24, 0x53,
	0x40, 0xe0, 0xb5, 0xe4, 0xad, 0x1f, 0x2d, 0x10, 0x26, 0x92, 0x77, 0x7b, 0xdf, 0x48, 0x9a, 0xf5,
	0x8a, 0x62, 0xd6, 0xea, 0xd4, 0xfe, 0x87, 0x9b, 0xf6, 0xb7, 0x41, 0x81, 0xea, 0x4a, 0x2c, 0x32,
	0x90, 0x2e, 0xed, 0xde, 0x8e, 0x36, 0xe1, 0x0d, 0x50, 0x42, 0x7b, 0x28, 0x38, 0x20, 0x5d, 0xc7,
	0xed, 0xb4, 0x1c, 0xdc, 0xf2, 0x9e, 0x30, 0xc5, 0xf2, 0xdc, 0xb6, 0x1f, 0x44, 0xb4, 0x26, 0xde,
	0x7c, 0x68, 0xce, 0x22, 0xb9, 0xfd, 0x84, 0x86, 0x8a, 0xa9, 0x0d, 0x44, 0x9a, 0xee, 0xae, 0x17,
	0x33, 0xff, 0x79, 0xec, 0x20, 0xca, 0x71, 0x8d, 0xc5, 0x8d, 0x3a, 0x2a, 0xa8, 0xce, 0x81, 0xc9,
	0x81, 0x4f, 0x1c, 0x11, 0x10, 0x26, 0x4c, 0xd1, 0xa2, 0xfd, 0x34, 0xae, 0x3a, 0x61, 0x94, 0x15,
	0x2d, 0x78, 0x01, 0xe4, 0x77, 0x06, 0x0e, 0xad, 0x33, 0x08, 0xaf, 0xea, 0xcc, 0x29, 0xd6, 0x6e,
	0x48, 0xa4, 0x9d, 0x03, 0x5e, 0xc9, 0x09, 0xd2, 0xda, 0x01, 0xbc, 0x0a, 0x66, 0xf6, 0x1d, 0xaa,
	0x6e, 0xcb, 0xf6, 0xda, 0x4f, 0x50, 0x50, 0x9e, 0x64, 0xcb, 0x33, 0xcd, 0x3b, 0xd7, 0x59, 0x9f,
	0xf1, 0xe7, 0x1a, 0x98, 0x55, 0xee, 0x5d, 0x91, 0xfe, 0xf5, 0x51, 0x6f, 0x51, 0xa4, 0xf0, 0x91,
	0x1b, 0x9a, 0x8d, 0x6f, 0x47, 0x6b, 0xd0, 0x04, 0xf3, 0xa9, 0xbb, 0x5f, 0xb1, 0xf7, 0xa3, 0xaf,
	0x7e, 0x4b, 0xc9, 0xab, 0x5f, 0x63, 0x1e, 0x8c, 0x7f, 0xd3, 0x73, 0xec, 0xbb, 0x85, 0xcf, 0x1a,
	0x93, 0xab, 0xe3, 0x30, 0xf7, 0xfd, 0x8f, 0x57, 0xff, 0xfe, 0x06, 0x98, 0xda, 0x46, 0xc1, 0x9e,
	0xd3, 0x46, 0xd0, 0x4d, 0x1e, 0x3b, 0x78, 0x65, 0x94, 0xe1, 0xf2, 0xdd, 0x32, 0x8e, 0xb7, 0x6d,
	0xe3, 0xec, 0x27, 0xff, 0xf8, 0xef, 0x3f, 0xc9, 0xcd, 0xc1, 0x99, 0x3a, 0x3d, 0x83, 0x75, 0x2c,
	0xb8, 0xff, 0xa6, 0x96, 0xe5, 0x37, 0xe1, 0x4b, 0x29, 0x8e, 0x2a, 0x40, 0x08, 0x7e, 0xf9, 0x38,
	0x98, 0x10, 0x7e, 0x89, 0x09, 0x3f, 0x67, 0xcc, 0x73, 0xe1, 0x7e, 0x8c, 0xb8, 0xab, 0xdd, 0xa4,
	0x3a, 0xa4, 0x9d, 0x2a, 0xbc, 0x96, 0xe2, 0xad, 0xd0, 0x85, 0x06, 0x2f, 0x1d, 0x83, 0x12, 0x0a,
	0x54, 0x98, 0x02, 0x17, 0x8c, 0x45, 0xae, 0x80, 0xcd, 0x30, 0x35, 0x8b, 0x83, 0xa8, 0x0e, 0x4e,
	0xc2, 0x81, 0xc2, 0xaa, 0xc2, 0x58, 0xa1, 0x09, 0xd1, 0x57, 0x46, 0x20, 0x84, 0xd8, 0x05, 0x26,
	0x76, 0x06, 0x16, 0xeb, 0xd2, 0xe7, 0x44, 0xa4, 0x16, 0x22, 0xb0, 0x92, 0xcd, 0x67, 0x03, 0x85,
	0x82, 0xaa, 0xc3, 0x01, 0x42, 0x0e, 0x64, 0x72, 0xa6, 0x21, 0x88, 0xe5, 0xc0, 0x4f, 0xb2, 0x6b,
	0x43, 0xf8, 0x72, 0x46, 0x7c, 0xcf, 0x9a, 0xde, 0x2b, 0xc7, 0xe2, 0x84, 0x70, 0x9d, 0x09, 0x5f,
	0x84, 0xb0, 0xce, 0x5d, 0x5e, 0x4d, 0x9a, 0xeb, 0x0f, 0xb2, 0xca, 0xc2, 0x84, 0x75, 0xa5, 0x01,
	0x99, 0xd6, 0x95, 0x01, 0x13, 0x0a, 0x5c, 0x60, 0x0a, 0x2c, 0xc0, 0xf9, 0x94, 0x02, 0xf0, 0x87,
	0x99, 0x25, 0xd7, 0x68, 0x05, 0xd6, 0x06, 0x07, 0x27, 0x51, 0x80, 0xc2, 0x84, 0x02, 0x55, 0xa6,
	0x80, 0x6e, 0x9c, 0x4d, 0x29, 0x50, 0xdf, 0x19, 0x1c, 0x50, 0xf3, 0xfa, 0x4b, 0xed, 0x98, 0x02,
	0x09, 0xae, 0x64, 0x6f, 0x72, 0x16, 0x56, 0x68, 0xf7, 0xda, 0x29, 0x46, 0x08, 0x45, 0x6f, 0x31,
	0x45, 0x5f, 0x32, 0xaa, 0xb1, 0x9d, 0xd4, 0xe4, 0x12, 0xac, 0x2e, 0xdc, 0x1b, 0xa2, 0x3a, 0x0f,
	0xd2, 0xa9, 0x0a, 0xbc, 0xaa, 0xc8, 0x4c, 0x92, 0x85, 0x62, 0xd7, 0x46, 0x83, 0x84, 0x2e, 0xe7,
	0x98, 0x2e, 0x25, 0x38, 0x5b, 0x57, 0x3f, 0xb4, 0xbe, 0x1f, 0x17, 0x4b, 0xf0, 0xa2, 0xc2, 0x29,
	0xec, 0x16, 0x62, 0x2e, 0x65, 0x13, 0x05, 0xfb, 0x59, 0xc6, 0x3e, 0x0f, 0x27, 0xeb, 0xfc, 0x4b,
	0xeb, 0x7b, 0xd1, 0x9d, 0x0c, 0xd4, 0x53, 0x03, 0x63, 0x9b, 0xbb, 0x98, 0x49, 0x13, 0x3c, 0x67,
	0x18, 0xcf, 0x29, 0x38, 0xc1, 0x78, 0xc2, 0x8f, 0xe4, 0x1a, 0x0b, 0x5e, 0x4e, 0x8d, 0xe4, 0x04,
	0xc1, 0x78, 0x69, 0x18, 0x59, 0xf0, 0x2e, 0x31, 0xde, 0xc0, 0xe0, 0xbc, 0xe9, 0xfa, 0xfb, 0xc9,
	0xea, 0x27, 0x11, 0x0a, 0x54, 0x62, 0x66, 0x28, 0x48, 0x40, 0x84, 0xa8, 0xf3, 0x4c, 0xd4, 0xbc,
	0x31, 0xcd, 0x44, 0xd5, 0x79, 0x5d, 0x42, 0x25, 0x7e, 0x9c, 0x2e, 0x63, 0x12, 0x3b, 0x9e, 0x24,
	0x67, 0xee, 0x78, 0x0a, 0x24, 0xe4, 0x2e, 0x31, 0xb9, 0x65, 0x63, 0x41, 0x96, 0x5b, 0xb7, 0x18,
	0x92, 0x8a, 0xdf, 0x4b, 0xc6, 0xf0, 0xc4, 0x84, 0x55, 0x62, 0xe6, 0x84, 0x13, 0x10, 0x21, 0xf8,
	0x32, 0x13, 0x7c, 0xde, 0x80, 0x75, 0x1e, 0x8e, 0x6b, 0x71, 0x14, 0xa7, 0x72, 0x3f, 0x92, 0x8b,
	0xa4, 0xc4, 0x3e, 0x4a, 0xf5, 0x4f, 0xd6, 0x3e, 0xa6, 0xca, 0xa3, 0x70, 0x1f, 0x61, 0xbe, 0x1e,
	0xbe, 0x05, 0x78, 0x0b, 0xe4, 0x1f, 0x7b, 0x5e, 0x6f, 0xcb, 0x71, 0x3b, 0x70, 0x5e, 0x19, 0x4d,
	0x13, 0x01, 0x3d, 0xdd, 0x25, 0xd9, 0x99, 0x4f, 0x07, 0x7d, 0x08, 0x00, 0x65, 0xc0, 0x13, 0x40,
	0xa8, 0x9a, 0x7d, 0x94, 0x18, 0x0a, 0xf5, 0x2e, 0x0f, 0xa1, 0x0a, 0xed, 0xe6, 0x18, 0xe7, 0x02,
	0x9c, 0xaa, 0x63, 0xce, 0xcd, 0xe4, 0xca, 0xd1, 0xec, 0x2f, 0x71, 0x2e, 0x44, 0x4e, 0x98, 0x79,
	0x2e, 0x42, 0x5a, 0xea, 0x5c, 0x38, 0x94, 0x8f, 0x05, 0x16, 0x29, 0xcf, 0x0d, 0xe4, 0xa2, 0xc0,
	0x22, 0xe8, 0x6d, 0xeb, 0x09, 0x5a, 0xb7, 0x88, 0x75, 0xc2, 0xc9, 0x5f, 0x65, 0xcc, 0x2e, 0x1b,
	0xe5, 0x3a, 0xf1, 0xbc, 0x5e, 0xbd, 0x23, 0xb8, 0xd4, 0x76, 0xad, 0x27, 0xa8, 0x66, 0x5b, 0xc4,
	0xa2, 0x5b, 0xd6, 0xe4, 0x4b, 0xb2, 0xbe, 0xb6, 0x3e, 0xe8, 0xfb, 0x59, 0x8c, 0x95, 0x44, 0x9b,
	0x82, 0x24, 0x7f, 0xc3, 0xf8, 0xe2, 0xef, 0xf6, 0x6a, 0x36, 0x1d, 0xec, 0x27, 0x3e, 0x7d, 0x24,
	0x22, 0xbf, 0x42, 0xcb, 0x8c, 0xfc, 0x2a, 0x42, 0x0d, 0x8a, 0xc6, 0x5c, 0x9d, 0xdd, 0x60, 0xd7,
	0x03, 0x41, 0xa7, 0xca, 0x7f, 0x92, 0x79, 0x3d, 0x9e, 0x08, 0x4a, 0x69, 0x40, 0x66, 0x50, 0xca,
	0x80, 0xa9, 0x46, 0x0f, 0xcf, 0x0a, 0x0d, 0x7a, 0x0e, 0x26, 0xb5, 0xe8, 0xb6, 0x9a, 0x9e, 0xf5,
	0xe4, 0x3d, 0x78, 0xe2, 0xac, 0x27, 0xc9, 0x99, 0x67, 0x3d, 0x05, 0x4a, 0x9d, 0x75, 0x2e, 0x7d,
	0xc0, 0x20, 0x35, 0x6a, 0x75, 0xcc, 0xd5, 0xfc, 0x48, 0xcb, 0x7c, 0x64, 0x9d, 0xc8, 0x4e, 0x32,
	0x10, 0x99, 0xd9, 0x49, 0x16, 0x4e, 0x55, 0x04, 0x9e, 0xab, 0x5b, 0x14, 0xc4, 0x97, 0x41, 0xca,
	0x50, 0xf6, 0x52, 0x6f, 0xb1, 0xa1, 0x91, 0xcd, 0x9b, 0x53, 0x85, 0xfc, 0xab, 0x23, 0x31, 0xa9,
	0xcc, 0x48, 0x92, 0x2d, 0x5e, 0x51, 0x7d, 0x2f, 0xfd, 0x64, 0x1b, 0x0e, 0x61, 0x2a, 0xc8, 0xd9,
	0xeb, 0x9f, 0x04, 0x09, 0xd1, 0x17, 0x99, 0xe8, 0xb3, 0x70, 0x41, 0x99, 0xb6, 0x90, 0xf3, 0x99,
	0x36, 0xec, 0x69, 0x37, 0xbc, 0x91, 0xcd, 0x5d, 0x01, 0x09, 0x45, 0x6e, 0x9e, 0x04, 0x2a, 0xd4,
	0xb9, 0xc2, 0xd4, 0xb9, 0x08, 0x2f, 0xc8, 0xea, 0xa8, 0x71, 0x3f, 0x48, 0xbe, 0x4f, 0x49, 0x78,
	0x7f, 0x95, 0x98, 0xe9, 0xfd, 0x13, 0x90, 0x54, 0x7a, 0x28, 0xc9, 0xe6, 0x49, 0x41, 0x90, 0x7c,
	0x75, 0x3e, 0x4c, 0x26, 0x23, 0x8e, 0x96, 0xc9, 0x21, 0xa3, 0x64, 0xf2, 0x87, 0x68, 0x3f, 0xce,
	0x7e, 0x3a, 0x33, 0xcc, 0xf2, 0x63, 0xc4, 0x68, 0xcb, 0x97, 0x70, 0xea, 0x9a, 0x1b, 0x8a, 0xe5,
	0xc7, 0x8f, 0x5c, 0xe8, 0x29, 0xfc, 0x6b, 0xed, 0xd8, 0x97, 0xf2, 0x70, 0xf5, 0x98, 0x93, 0xa6,
	0xa0, 0x85, 0x8e, 0xb7, 0x4f, 0x35, 0x46, 0x4d, 0x4e, 0xe1, 0xd5, 0xcc, 0x93, 0xaa, 0xe4, 0xa9,
	0x18, 0x7e, 0x47, 0x7d, 0x62, 0x9f, 0x28, 0xa2, 0x64, 0x52, 0x66, 0x11, 0xa5, 0x00, 0xd4, 0xb4,
	0x08, 0xce, 0x29, 0xeb, 0xd5, 0xeb, 0xc1, 0xae, 0xf2, 0xe2, 0x14, 0x2e, 0xa5, 0x39, 0x71, 0x8a,
	0x90, 0x54, 0x19, 0x4a, 0x17, 0x82, 0xca, 0x4c, 0x10, 0x34, 0x66, 0x84, 0x20, 0xfe, 0x50, 0x95,
	0xa7, 0xdc, 0x89, 0x7f, 0xa9, 0xc9, 0xb2, 0xc7, 0x88, 0x38, 0xdc, 0x1e, 0x63, 0x48, 0xaa, 0x00,
	0xe7, 0x22, 0x2d, 0xdb, 0x16, 0xde, 0x80, 0x8a, 0x55, 0xff, 0x69, 0x28, 0x6b, 0x82, 0x9c, 0x32,
	0x7c, 0x82, 0x82, 0x3e, 0x64, 0x82, 0x01, 0xa3, 0x86, 0xa5, 0x7e, 0xea, 0x61, 0x15, 0xcc, 0x70,
	0x69, 0x32, 0x3d, 0xb3, 0xd4, 0x4f, 0xa3, 0x52, 0xa5, 0x3e, 0x17, 0x1e, 0x5b, 0x90, 0x65, 0xdb,
	0x54, 0x87, 0xdf, 0x1f, 0xf2, 0x92, 0x0a, 0xbe, 0x32, 0x42, 0x80, 0xb2, 0x00, 0xd7, 0x8f, 0x07,
	0x0a, 0x65, 0x0c, 0xa6, 0xcc, 0x25, 0xe3, 0x7c, 0x4a, 0x99, 0x78, 0x4d, 0x7e, 0x3a, 0xfc, 0xa5,
	0x14, 0xbc, 0x39, 0x42, 0x52, 0x84, 0x12, 0x5a, 0xdd, 0x3a, 0x11, 0x56, 0x28, 0xf6, 0x32, 0x53,
	0xac, 0x6a, 0x5c, 0x4c, 0x29, 0xc6, 0xbf, 0x31, 0x86, 0x8b, 0x15, 0x29, 0x97, 0x7e, 0xd2, 0x94,
	0xa5, 0x5c, 0x1a, 0x35, 0x5c, 0xb9, 0x0c, 0xec, 0x10, 0xe5, 0x92, 0x55, 0x75, 0xa8, 0xdc, 0x20,
	0xf9, 0xb2, 0x28, 0xeb, 0xb8, 0x44, 0xc4, 0xe1, 0xc7, 0x25, 0x86, 0x0c, 0x39, 0x2e, 0x42, 0x01,
	0x21, 0xf6, 0xbb, 0x89, 0x37, 0x45, 0xb0, 0x9a, 0xc5, 0x52, 0x89, 0x53, 0x57, 0x46, 0x20, 0xd4,
	0x88, 0x6d, 0x94, 0x22, 0x99, 0x22, 0x4a, 0x51, 0x91, 0x7f, 0x32, 0xea, 0xe9, 0x11, 0x7c, 0x35,
	0xcd, 0x3d, 0x0b, 0x27, 0x74, 0xa9, 0x9d, 0x10, 0x2d, 0xf4, 0xba, 0xc1, 0xf4, 0xba, 0x6a, 0x2c,
	0x09, 0xbd, 0x08, 0xc7, 0xd6, 0xc4, 0x9a, 0xd0, 0xa0, 0x26, 0x16, 0x66, 0xed, 0x6f, 0xc6, 0x3f,
	0x6b, 0xfc, 0xee, 0x38, 0xfc, 0x0b, 0x0d, 0x14, 0xb7, 0xb8, 0x88, 0x6a, 0x63, 0xab, 0x69, 0x6c,
	0x80, 0x99, 0xb0, 0xb9, 0x4d, 0xac, 0xdd, 0x5d, 0x68, 0x74, 0x09, 0xf1, 0xf1, 0xdd, 0x7a, 0x5d,
	0xfa, 0xd7, 0x48, 0xa1, 0x53, 0xf8, 0x57, 0x87, 0x98, 0x42, 0xbf, 0x1e, 0xaa, 0xda, 0xb3, 0x5c,
	0xfb, 0xe6, 0x26, 0x58, 0xb8, 0xde, 0xf0, 0xad, 0x76, 0x17, 0xd5, 0x56, 0x97, 0x57, 0xaa, 0x9b,
	0x66, 0xf5, 0xdd, 0xe6, 0xe3, 0x1b, 0xf0, 0xf5, 0xe3, 0xd9, 0xd5, 0x77, 0x7a, 0xde, 0x4e, 0xbd,
	0x6f, 0xd1, 0x14, 0xbc, 0x7e, 0x7f, 0x73, 0xeb, 0xd7, 0xcd, 0xe6, 0xc6, 0x3b, 0x8f, 0x57, 0xc7,
	0x5e, 0x5b, 0x5e, 0xd1, 0x4b, 0xec, 0xdf, 0x44, 0x25, 0x39, 0x86, 0x56, 0xbf, 0x99, 0xcb, 0x8d,
	0xaf, 0x96, 0x2c, 0xdf, 0xef, 0x89, 0x2f, 0x0a, 0xf5, 0xef, 0x60, 0xcf, 0xbd, 0x9b, 0xea, 0x31,
	0xb7, 0xc0, 0xd8, 0x9d, 0x95, 0xdb, 0xb0, 0x09, 0x36, 0x4c, 0x44, 0x06, 0x81, 0x8b, 0xec, 0xea,
	0x7e, 0x17, 0xb9, 0x55, 0xd2, 0x45, 0x55, 0xba, 0x34, 0x55, 0xdb, 0x43, 0xb8, 0xea, 0x7a, 0xa4,
	0xda, 0xb5, 0xf6, 0x50, 0xd5, 0x47, 0x41, 0xdf, 0x61, 0x37, 0xaf, 0x55, 0xe2, 0x55, 0x69, 0xe9,
	0x8b, 0x31, 0xc3, 0x06, 0x08, 0x7b, 0x83, 0xa0, 0x8d, 0x96, 0xcd, 0x7b, 0x94, 0xe3, 0x1d, 0x78,
	0x07, 0xdc, 0x4c, 0x73, 0x0c, 0x51, 0x31, 0x57, 0xf4, 0x94, 0xd6, 0x9e, 0x70, 0x12, 0x8c, 0xff,
	0x34, 0xa7, 0x4d, 0x7d, 0xb8, 0x02, 0xe6, 0x40, 0x61, 0xcd, 0xc2, 0x4e, 0xbb, 0x31, 0x20, 0x5d,
	0x98, 0xcb, 0x6b, 0xe0, 0x32, 0x00, 0x0d, 0xdf, 0x79, 0x88, 0x0e, 0x58, 0xcf, 0x5c, 0x3e, 0xa7,
	0x17, 0x3e, 0xa8, 0x35, 0xb6, 0x9a, 0xb5, 0x87, 0xe8, 0xa0, 0x9a, 0xdb, 0xa9, 0x80, 0x19, 0x79,
	0xc4, 0x19, 0x30, 0xab, 0xe0, 0xcf, 0x04, 0xaf, 0x03, 0xf8, 0xae, 0x17, 0xa0, 0xaa, 0xb5, 0xe3,
	0x0d, 0x48, 0x55, 0x6c, 0xe4, 0x49, 0xb6, 0xf0, 0x17, 0x47, 0x4b, 0xda, 0xe7, 0x47, 0x4b, 0xda,
	0xbf, 0x1d, 0x2d, 0x69, 0x9f, 0x7e, 0xb1, 0x74, 0xe6, 0xf3, 0x2f, 0x96, 0xce, 0xfc, 0xd3, 0x17,
	0x4b, 0x67, 0x3e, 0xbc, 0x20, 0x2f, 0x76, 0xbd, 0xe3, 0xd5, 0xfd, 0x27, 0x9d, 0x3a, 0xfb, 0x6f,
	0xdd, 0x9d, 0x49, 0xf6, 0x10, 0xf8, 0xf6, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x11, 0x22, 0x9a,
	0x3b, 0xbd, 0x3b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	UserGetSession(ctx context.Context, in *UserGetSession_Input, opts ...grpc.CallOption) (*UserGetSession_Output, error)
	UserSetPreferences(ctx context.Context, in *UserSetPreferences_Input, opts ...grpc.CallOption) (*UserSetPreferences_Output, error)
	UserDeleteAccount(ctx context.Context, in *UserDeleteAccount_Input, opts ...grpc.CallOption) (*UserDeleteAccount_Output, error)
	ChallengeList(ctx context.Context, in *ChallengeList_Input, opts ...grpc.CallOption) (*ChallengeList_Output, error)
	ChallengeGet(ctx context.Context, in *ChallengeGet_Input, opts ...grpc.CallOption) (*ChallengeGet_Output, error)
	SeasonChallengeList(ctx context.Context, in *SeasonChallengeList_Input, opts ...grpc.CallOption) (*SeasonChallengeList_Output, error)
	SeasonChallengeGet(ctx context.Context, in *SeasonChallengeGet_Input, opts ...grpc.CallOption) (*SeasonChallengeGet_Output, error)
	SeasonChallengeBuy(ctx context.Context, in *SeasonChallengeBuy_Input, opts ...grpc.CallOption) (*SeasonChallengeBuy_Output, error)
	ChallengeSubscriptionValidate(ctx context.Context, in *ChallengeSubscriptionValidate_Input, opts ...grpc.CallOption) (*ChallengeSubscriptionValidate_Output, error)
	OrganizationList(ctx context.Context, in *OrganizationList_Input, opts ...grpc.CallOption) (*OrganizationList_Output, error)
	TeamList(ctx context.Context, in *TeamList_Input, opts ...grpc.CallOption) (*TeamList_Output, error)
	TeamGet(ctx context.Context, in *TeamGet_Input, opts ...grpc.CallOption) (*TeamGet_Output, error)
	TeamCreate(ctx context.Context, in *TeamCreate_Input, opts ...grpc.CallOption) (*TeamCreate_Output, error)
	TeamSendInvite(ctx context.Context, in *TeamSendInvite_Input, opts ...grpc.CallOption) (*TeamSendInvite_Output, error)
	TeamAcceptInvite(ctx context.Context, in *TeamAcceptInvite_Input, opts ...grpc.CallOption) (*TeamAcceptInvite_Output, error)
	CouponValidate(ctx context.Context, in *CouponValidate_Input, opts ...grpc.CallOption) (*CouponValidate_Output, error)
	SeasonList(ctx context.Context, in *SeasonList_Input, opts ...grpc.CallOption) (*SeasonList_Output, error)
	ToolPing(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	ToolStatus(ctx context.Context, in *GetStatus_Input, opts ...grpc.CallOption) (*GetStatus_Output, error)
	ToolInfo(ctx context.Context, in *GetInfo_Input, opts ...grpc.CallOption) (*GetInfo_Output, error)
	ToolGenerateFakeData(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	ToolDBDump(ctx context.Context, in *Void, opts ...grpc.CallOption) (*pwdb.Dump, error)
	AgentRegister(ctx context.Context, in *AgentRegister_Input, opts ...grpc.CallOption) (*AgentRegister_Output, error)
	AgentListInstances(ctx context.Context, in *AgentListInstances_Input, opts ...grpc.CallOption) (*AgentListInstances_Output, error)
	AgentUpdateState(ctx context.Context, in *AgentUpdateState_Input, opts ...grpc.CallOption) (*AgentUpdateState_Output, error)
	AdminListChallenges(ctx context.Context, in *AdminListChallenges_Input, opts ...grpc.CallOption) (*AdminListChallenges_Output, error)
	AdminListAgents(ctx context.Context, in *AdminListAgents_Input, opts ...grpc.CallOption) (*AdminListAgents_Output, error)
	AdminListCoupons(ctx context.Context, in *AdminListCoupons_Input, opts ...grpc.CallOption) (*AdminListCoupons_Output, error)
	AdminListOrganizations(ctx context.Context, in *AdminListOrganizations_Input, opts ...grpc.CallOption) (*AdminListOrganizations_Output, error)
	AdminListTeams(ctx context.Context, in *AdminListTeams_Input, opts ...grpc.CallOption) (*AdminListTeams_Output, error)
	AdminListUsers(ctx context.Context, in *AdminListUsers_Input, opts ...grpc.CallOption) (*AdminListUsers_Output, error)
	AdminListActivities(ctx context.Context, in *AdminListActivities_Input, opts ...grpc.CallOption) (*AdminListActivities_Output, error)
	AdminListChallengeSubscriptions(ctx context.Context, in *AdminListChallengeSubscriptions_Input, opts ...grpc.CallOption) (*AdminListChallengeSubscriptions_Output, error)
	AdminListAll(ctx context.Context, in *AdminListAll_Input, opts ...grpc.CallOption) (*AdminListAll_Output, error)
	AdminSearch(ctx context.Context, in *AdminSearch_Input, opts ...grpc.CallOption) (*AdminSearch_Output, error)
	AdminAddCoupon(ctx context.Context, in *AdminAddCoupon_Input, opts ...grpc.CallOption) (*AdminAddCoupon_Output, error)
	AdminRedump(ctx context.Context, in *AdminRedump_Input, opts ...grpc.CallOption) (*AdminRedump_Output, error)
	AdminChallengeAdd(ctx context.Context, in *AdminChallengeAdd_Input, opts ...grpc.CallOption) (*AdminChallengeAdd_Output, error)
	AdminChallengeRedump(ctx context.Context, in *AdminChallengeRedump_Input, opts ...grpc.CallOption) (*AdminChallengeRedump_Output, error)
	AdminChallengeFlavorAdd(ctx context.Context, in *AdminChallengeFlavorAdd_Input, opts ...grpc.CallOption) (*AdminChallengeFlavorAdd_Output, error)
	AdminSeasonChallengeAdd(ctx context.Context, in *AdminSeasonChallengeAdd_Input, opts ...grpc.CallOption) (*AdminSeasonChallengeAdd_Output, error)
	AdminSeasonAdd(ctx context.Context, in *AdminSeasonAdd_Input, opts ...grpc.CallOption) (*AdminSeasonAdd_Output, error)
	AdminSetTeams(ctx context.Context, in *AdminSetTeams_Input, opts ...grpc.CallOption) (*AdminSetTeams_Output, error)
	AdminTestingSeasonUserAdd(ctx context.Context, in *AdminTestingSeasonUserAdd_Input, opts ...grpc.CallOption) (*AdminTestingSeasonUserAdd_Output, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) UserGetSession(ctx context.Context, in *UserGetSession_Input, opts ...grpc.CallOption) (*UserGetSession_Output, error) {
	out := new(UserGetSession_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/UserGetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UserSetPreferences(ctx context.Context, in *UserSetPreferences_Input, opts ...grpc.CallOption) (*UserSetPreferences_Output, error) {
	out := new(UserSetPreferences_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/UserSetPreferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UserDeleteAccount(ctx context.Context, in *UserDeleteAccount_Input, opts ...grpc.CallOption) (*UserDeleteAccount_Output, error) {
	out := new(UserDeleteAccount_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/UserDeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ChallengeList(ctx context.Context, in *ChallengeList_Input, opts ...grpc.CallOption) (*ChallengeList_Output, error) {
	out := new(ChallengeList_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/ChallengeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ChallengeGet(ctx context.Context, in *ChallengeGet_Input, opts ...grpc.CallOption) (*ChallengeGet_Output, error) {
	out := new(ChallengeGet_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/ChallengeGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SeasonChallengeList(ctx context.Context, in *SeasonChallengeList_Input, opts ...grpc.CallOption) (*SeasonChallengeList_Output, error) {
	out := new(SeasonChallengeList_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/SeasonChallengeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SeasonChallengeGet(ctx context.Context, in *SeasonChallengeGet_Input, opts ...grpc.CallOption) (*SeasonChallengeGet_Output, error) {
	out := new(SeasonChallengeGet_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/SeasonChallengeGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SeasonChallengeBuy(ctx context.Context, in *SeasonChallengeBuy_Input, opts ...grpc.CallOption) (*SeasonChallengeBuy_Output, error) {
	out := new(SeasonChallengeBuy_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/SeasonChallengeBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ChallengeSubscriptionValidate(ctx context.Context, in *ChallengeSubscriptionValidate_Input, opts ...grpc.CallOption) (*ChallengeSubscriptionValidate_Output, error) {
	out := new(ChallengeSubscriptionValidate_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/ChallengeSubscriptionValidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) OrganizationList(ctx context.Context, in *OrganizationList_Input, opts ...grpc.CallOption) (*OrganizationList_Output, error) {
	out := new(OrganizationList_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/OrganizationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) TeamList(ctx context.Context, in *TeamList_Input, opts ...grpc.CallOption) (*TeamList_Output, error) {
	out := new(TeamList_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/TeamList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) TeamGet(ctx context.Context, in *TeamGet_Input, opts ...grpc.CallOption) (*TeamGet_Output, error) {
	out := new(TeamGet_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/TeamGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) TeamCreate(ctx context.Context, in *TeamCreate_Input, opts ...grpc.CallOption) (*TeamCreate_Output, error) {
	out := new(TeamCreate_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/TeamCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) TeamSendInvite(ctx context.Context, in *TeamSendInvite_Input, opts ...grpc.CallOption) (*TeamSendInvite_Output, error) {
	out := new(TeamSendInvite_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/TeamSendInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) TeamAcceptInvite(ctx context.Context, in *TeamAcceptInvite_Input, opts ...grpc.CallOption) (*TeamAcceptInvite_Output, error) {
	out := new(TeamAcceptInvite_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/TeamAcceptInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CouponValidate(ctx context.Context, in *CouponValidate_Input, opts ...grpc.CallOption) (*CouponValidate_Output, error) {
	out := new(CouponValidate_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/CouponValidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SeasonList(ctx context.Context, in *SeasonList_Input, opts ...grpc.CallOption) (*SeasonList_Output, error) {
	out := new(SeasonList_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/SeasonList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ToolPing(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/ToolPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ToolStatus(ctx context.Context, in *GetStatus_Input, opts ...grpc.CallOption) (*GetStatus_Output, error) {
	out := new(GetStatus_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/ToolStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ToolInfo(ctx context.Context, in *GetInfo_Input, opts ...grpc.CallOption) (*GetInfo_Output, error) {
	out := new(GetInfo_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/ToolInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ToolGenerateFakeData(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/ToolGenerateFakeData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ToolDBDump(ctx context.Context, in *Void, opts ...grpc.CallOption) (*pwdb.Dump, error) {
	out := new(pwdb.Dump)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/ToolDBDump", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AgentRegister(ctx context.Context, in *AgentRegister_Input, opts ...grpc.CallOption) (*AgentRegister_Output, error) {
	out := new(AgentRegister_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/AgentRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AgentListInstances(ctx context.Context, in *AgentListInstances_Input, opts ...grpc.CallOption) (*AgentListInstances_Output, error) {
	out := new(AgentListInstances_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/AgentListInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AgentUpdateState(ctx context.Context, in *AgentUpdateState_Input, opts ...grpc.CallOption) (*AgentUpdateState_Output, error) {
	out := new(AgentUpdateState_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/AgentUpdateState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AdminListChallenges(ctx context.Context, in *AdminListChallenges_Input, opts ...grpc.CallOption) (*AdminListChallenges_Output, error) {
	out := new(AdminListChallenges_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/AdminListChallenges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AdminListAgents(ctx context.Context, in *AdminListAgents_Input, opts ...grpc.CallOption) (*AdminListAgents_Output, error) {
	out := new(AdminListAgents_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/AdminListAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AdminListCoupons(ctx context.Context, in *AdminListCoupons_Input, opts ...grpc.CallOption) (*AdminListCoupons_Output, error) {
	out := new(AdminListCoupons_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/AdminListCoupons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AdminListOrganizations(ctx context.Context, in *AdminListOrganizations_Input, opts ...grpc.CallOption) (*AdminListOrganizations_Output, error) {
	out := new(AdminListOrganizations_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/AdminListOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AdminListTeams(ctx context.Context, in *AdminListTeams_Input, opts ...grpc.CallOption) (*AdminListTeams_Output, error) {
	out := new(AdminListTeams_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/AdminListTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AdminListUsers(ctx context.Context, in *AdminListUsers_Input, opts ...grpc.CallOption) (*AdminListUsers_Output, error) {
	out := new(AdminListUsers_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/AdminListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AdminListActivities(ctx context.Context, in *AdminListActivities_Input, opts ...grpc.CallOption) (*AdminListActivities_Output, error) {
	out := new(AdminListActivities_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/AdminListActivities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AdminListChallengeSubscriptions(ctx context.Context, in *AdminListChallengeSubscriptions_Input, opts ...grpc.CallOption) (*AdminListChallengeSubscriptions_Output, error) {
	out := new(AdminListChallengeSubscriptions_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/AdminListChallengeSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AdminListAll(ctx context.Context, in *AdminListAll_Input, opts ...grpc.CallOption) (*AdminListAll_Output, error) {
	out := new(AdminListAll_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/AdminListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AdminSearch(ctx context.Context, in *AdminSearch_Input, opts ...grpc.CallOption) (*AdminSearch_Output, error) {
	out := new(AdminSearch_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/AdminSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AdminAddCoupon(ctx context.Context, in *AdminAddCoupon_Input, opts ...grpc.CallOption) (*AdminAddCoupon_Output, error) {
	out := new(AdminAddCoupon_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/AdminAddCoupon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AdminRedump(ctx context.Context, in *AdminRedump_Input, opts ...grpc.CallOption) (*AdminRedump_Output, error) {
	out := new(AdminRedump_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/AdminRedump", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AdminChallengeAdd(ctx context.Context, in *AdminChallengeAdd_Input, opts ...grpc.CallOption) (*AdminChallengeAdd_Output, error) {
	out := new(AdminChallengeAdd_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/AdminChallengeAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AdminChallengeRedump(ctx context.Context, in *AdminChallengeRedump_Input, opts ...grpc.CallOption) (*AdminChallengeRedump_Output, error) {
	out := new(AdminChallengeRedump_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/AdminChallengeRedump", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AdminChallengeFlavorAdd(ctx context.Context, in *AdminChallengeFlavorAdd_Input, opts ...grpc.CallOption) (*AdminChallengeFlavorAdd_Output, error) {
	out := new(AdminChallengeFlavorAdd_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/AdminChallengeFlavorAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AdminSeasonChallengeAdd(ctx context.Context, in *AdminSeasonChallengeAdd_Input, opts ...grpc.CallOption) (*AdminSeasonChallengeAdd_Output, error) {
	out := new(AdminSeasonChallengeAdd_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/AdminSeasonChallengeAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AdminSeasonAdd(ctx context.Context, in *AdminSeasonAdd_Input, opts ...grpc.CallOption) (*AdminSeasonAdd_Output, error) {
	out := new(AdminSeasonAdd_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/AdminSeasonAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AdminSetTeams(ctx context.Context, in *AdminSetTeams_Input, opts ...grpc.CallOption) (*AdminSetTeams_Output, error) {
	out := new(AdminSetTeams_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/AdminSetTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AdminTestingSeasonUserAdd(ctx context.Context, in *AdminTestingSeasonUserAdd_Input, opts ...grpc.CallOption) (*AdminTestingSeasonUserAdd_Output, error) {
	out := new(AdminTestingSeasonUserAdd_Output)
	err := c.cc.Invoke(ctx, "/pathwar.api.Service/AdminTestingSeasonUserAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	UserGetSession(context.Context, *UserGetSession_Input) (*UserGetSession_Output, error)
	UserSetPreferences(context.Context, *UserSetPreferences_Input) (*UserSetPreferences_Output, error)
	UserDeleteAccount(context.Context, *UserDeleteAccount_Input) (*UserDeleteAccount_Output, error)
	ChallengeList(context.Context, *ChallengeList_Input) (*ChallengeList_Output, error)
	ChallengeGet(context.Context, *ChallengeGet_Input) (*ChallengeGet_Output, error)
	SeasonChallengeList(context.Context, *SeasonChallengeList_Input) (*SeasonChallengeList_Output, error)
	SeasonChallengeGet(context.Context, *SeasonChallengeGet_Input) (*SeasonChallengeGet_Output, error)
	SeasonChallengeBuy(context.Context, *SeasonChallengeBuy_Input) (*SeasonChallengeBuy_Output, error)
	ChallengeSubscriptionValidate(context.Context, *ChallengeSubscriptionValidate_Input) (*ChallengeSubscriptionValidate_Output, error)
	OrganizationList(context.Context, *OrganizationList_Input) (*OrganizationList_Output, error)
	TeamList(context.Context, *TeamList_Input) (*TeamList_Output, error)
	TeamGet(context.Context, *TeamGet_Input) (*TeamGet_Output, error)
	TeamCreate(context.Context, *TeamCreate_Input) (*TeamCreate_Output, error)
	TeamSendInvite(context.Context, *TeamSendInvite_Input) (*TeamSendInvite_Output, error)
	TeamAcceptInvite(context.Context, *TeamAcceptInvite_Input) (*TeamAcceptInvite_Output, error)
	CouponValidate(context.Context, *CouponValidate_Input) (*CouponValidate_Output, error)
	SeasonList(context.Context, *SeasonList_Input) (*SeasonList_Output, error)
	ToolPing(context.Context, *Void) (*Void, error)
	ToolStatus(context.Context, *GetStatus_Input) (*GetStatus_Output, error)
	ToolInfo(context.Context, *GetInfo_Input) (*GetInfo_Output, error)
	ToolGenerateFakeData(context.Context, *Void) (*Void, error)
	ToolDBDump(context.Context, *Void) (*pwdb.Dump, error)
	AgentRegister(context.Context, *AgentRegister_Input) (*AgentRegister_Output, error)
	AgentListInstances(context.Context, *AgentListInstances_Input) (*AgentListInstances_Output, error)
	AgentUpdateState(context.Context, *AgentUpdateState_Input) (*AgentUpdateState_Output, error)
	AdminListChallenges(context.Context, *AdminListChallenges_Input) (*AdminListChallenges_Output, error)
	AdminListAgents(context.Context, *AdminListAgents_Input) (*AdminListAgents_Output, error)
	AdminListCoupons(context.Context, *AdminListCoupons_Input) (*AdminListCoupons_Output, error)
	AdminListOrganizations(context.Context, *AdminListOrganizations_Input) (*AdminListOrganizations_Output, error)
	AdminListTeams(context.Context, *AdminListTeams_Input) (*AdminListTeams_Output, error)
	AdminListUsers(context.Context, *AdminListUsers_Input) (*AdminListUsers_Output, error)
	AdminListActivities(context.Context, *AdminListActivities_Input) (*AdminListActivities_Output, error)
	AdminListChallengeSubscriptions(context.Context, *AdminListChallengeSubscriptions_Input) (*AdminListChallengeSubscriptions_Output, error)
	AdminListAll(context.Context, *AdminListAll_Input) (*AdminListAll_Output, error)
	AdminSearch(context.Context, *AdminSearch_Input) (*AdminSearch_Output, error)
	AdminAddCoupon(context.Context, *AdminAddCoupon_Input) (*AdminAddCoupon_Output, error)
	AdminRedump(context.Context, *AdminRedump_Input) (*AdminRedump_Output, error)
	AdminChallengeAdd(context.Context, *AdminChallengeAdd_Input) (*AdminChallengeAdd_Output, error)
	AdminChallengeRedump(context.Context, *AdminChallengeRedump_Input) (*AdminChallengeRedump_Output, error)
	AdminChallengeFlavorAdd(context.Context, *AdminChallengeFlavorAdd_Input) (*AdminChallengeFlavorAdd_Output, error)
	AdminSeasonChallengeAdd(context.Context, *AdminSeasonChallengeAdd_Input) (*AdminSeasonChallengeAdd_Output, error)
	AdminSeasonAdd(context.Context, *AdminSeasonAdd_Input) (*AdminSeasonAdd_Output, error)
	AdminSetTeams(context.Context, *AdminSetTeams_Input) (*AdminSetTeams_Output, error)
	AdminTestingSeasonUserAdd(context.Context, *AdminTestingSeasonUserAdd_Input) (*AdminTestingSeasonUserAdd_Output, error)
}

// UnimplementedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) UserGetSession(ctx context.Context, req *UserGetSession_Input) (*UserGetSession_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetSession not implemented")
}
func (*UnimplementedServiceServer) UserSetPreferences(ctx context.Context, req *UserSetPreferences_Input) (*UserSetPreferences_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSetPreferences not implemented")
}
func (*UnimplementedServiceServer) UserDeleteAccount(ctx context.Context, req *UserDeleteAccount_Input) (*UserDeleteAccount_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeleteAccount not implemented")
}
func (*UnimplementedServiceServer) ChallengeList(ctx context.Context, req *ChallengeList_Input) (*ChallengeList_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengeList not implemented")
}
func (*UnimplementedServiceServer) ChallengeGet(ctx context.Context, req *ChallengeGet_Input) (*ChallengeGet_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengeGet not implemented")
}
func (*UnimplementedServiceServer) SeasonChallengeList(ctx context.Context, req *SeasonChallengeList_Input) (*SeasonChallengeList_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeasonChallengeList not implemented")
}
func (*UnimplementedServiceServer) SeasonChallengeGet(ctx context.Context, req *SeasonChallengeGet_Input) (*SeasonChallengeGet_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeasonChallengeGet not implemented")
}
func (*UnimplementedServiceServer) SeasonChallengeBuy(ctx context.Context, req *SeasonChallengeBuy_Input) (*SeasonChallengeBuy_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeasonChallengeBuy not implemented")
}
func (*UnimplementedServiceServer) ChallengeSubscriptionValidate(ctx context.Context, req *ChallengeSubscriptionValidate_Input) (*ChallengeSubscriptionValidate_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengeSubscriptionValidate not implemented")
}
func (*UnimplementedServiceServer) OrganizationList(ctx context.Context, req *OrganizationList_Input) (*OrganizationList_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrganizationList not implemented")
}
func (*UnimplementedServiceServer) TeamList(ctx context.Context, req *TeamList_Input) (*TeamList_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeamList not implemented")
}
func (*UnimplementedServiceServer) TeamGet(ctx context.Context, req *TeamGet_Input) (*TeamGet_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeamGet not implemented")
}
func (*UnimplementedServiceServer) TeamCreate(ctx context.Context, req *TeamCreate_Input) (*TeamCreate_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeamCreate not implemented")
}
func (*UnimplementedServiceServer) TeamSendInvite(ctx context.Context, req *TeamSendInvite_Input) (*TeamSendInvite_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeamSendInvite not implemented")
}
func (*UnimplementedServiceServer) TeamAcceptInvite(ctx context.Context, req *TeamAcceptInvite_Input) (*TeamAcceptInvite_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeamAcceptInvite not implemented")
}
func (*UnimplementedServiceServer) CouponValidate(ctx context.Context, req *CouponValidate_Input) (*CouponValidate_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CouponValidate not implemented")
}
func (*UnimplementedServiceServer) SeasonList(ctx context.Context, req *SeasonList_Input) (*SeasonList_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeasonList not implemented")
}
func (*UnimplementedServiceServer) ToolPing(ctx context.Context, req *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToolPing not implemented")
}
func (*UnimplementedServiceServer) ToolStatus(ctx context.Context, req *GetStatus_Input) (*GetStatus_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToolStatus not implemented")
}
func (*UnimplementedServiceServer) ToolInfo(ctx context.Context, req *GetInfo_Input) (*GetInfo_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToolInfo not implemented")
}
func (*UnimplementedServiceServer) ToolGenerateFakeData(ctx context.Context, req *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToolGenerateFakeData not implemented")
}
func (*UnimplementedServiceServer) ToolDBDump(ctx context.Context, req *Void) (*pwdb.Dump, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToolDBDump not implemented")
}
func (*UnimplementedServiceServer) AgentRegister(ctx context.Context, req *AgentRegister_Input) (*AgentRegister_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentRegister not implemented")
}
func (*UnimplementedServiceServer) AgentListInstances(ctx context.Context, req *AgentListInstances_Input) (*AgentListInstances_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentListInstances not implemented")
}
func (*UnimplementedServiceServer) AgentUpdateState(ctx context.Context, req *AgentUpdateState_Input) (*AgentUpdateState_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentUpdateState not implemented")
}
func (*UnimplementedServiceServer) AdminListChallenges(ctx context.Context, req *AdminListChallenges_Input) (*AdminListChallenges_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminListChallenges not implemented")
}
func (*UnimplementedServiceServer) AdminListAgents(ctx context.Context, req *AdminListAgents_Input) (*AdminListAgents_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminListAgents not implemented")
}
func (*UnimplementedServiceServer) AdminListCoupons(ctx context.Context, req *AdminListCoupons_Input) (*AdminListCoupons_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminListCoupons not implemented")
}
func (*UnimplementedServiceServer) AdminListOrganizations(ctx context.Context, req *AdminListOrganizations_Input) (*AdminListOrganizations_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminListOrganizations not implemented")
}
func (*UnimplementedServiceServer) AdminListTeams(ctx context.Context, req *AdminListTeams_Input) (*AdminListTeams_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminListTeams not implemented")
}
func (*UnimplementedServiceServer) AdminListUsers(ctx context.Context, req *AdminListUsers_Input) (*AdminListUsers_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminListUsers not implemented")
}
func (*UnimplementedServiceServer) AdminListActivities(ctx context.Context, req *AdminListActivities_Input) (*AdminListActivities_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminListActivities not implemented")
}
func (*UnimplementedServiceServer) AdminListChallengeSubscriptions(ctx context.Context, req *AdminListChallengeSubscriptions_Input) (*AdminListChallengeSubscriptions_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminListChallengeSubscriptions not implemented")
}
func (*UnimplementedServiceServer) AdminListAll(ctx context.Context, req *AdminListAll_Input) (*AdminListAll_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminListAll not implemented")
}
func (*UnimplementedServiceServer) AdminSearch(ctx context.Context, req *AdminSearch_Input) (*AdminSearch_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSearch not implemented")
}
func (*UnimplementedServiceServer) AdminAddCoupon(ctx context.Context, req *AdminAddCoupon_Input) (*AdminAddCoupon_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAddCoupon not implemented")
}
func (*UnimplementedServiceServer) AdminRedump(ctx context.Context, req *AdminRedump_Input) (*AdminRedump_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminRedump not implemented")
}
func (*UnimplementedServiceServer) AdminChallengeAdd(ctx context.Context, req *AdminChallengeAdd_Input) (*AdminChallengeAdd_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminChallengeAdd not implemented")
}
func (*UnimplementedServiceServer) AdminChallengeRedump(ctx context.Context, req *AdminChallengeRedump_Input) (*AdminChallengeRedump_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminChallengeRedump not implemented")
}
func (*UnimplementedServiceServer) AdminChallengeFlavorAdd(ctx context.Context, req *AdminChallengeFlavorAdd_Input) (*AdminChallengeFlavorAdd_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminChallengeFlavorAdd not implemented")
}
func (*UnimplementedServiceServer) AdminSeasonChallengeAdd(ctx context.Context, req *AdminSeasonChallengeAdd_Input) (*AdminSeasonChallengeAdd_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSeasonChallengeAdd not implemented")
}
func (*UnimplementedServiceServer) AdminSeasonAdd(ctx context.Context, req *AdminSeasonAdd_Input) (*AdminSeasonAdd_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSeasonAdd not implemented")
}
func (*UnimplementedServiceServer) AdminSetTeams(ctx context.Context, req *AdminSetTeams_Input) (*AdminSetTeams_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSetTeams not implemented")
}
func (*UnimplementedServiceServer) AdminTestingSeasonUserAdd(ctx context.Context, req *AdminTestingSeasonUserAdd_Input) (*AdminTestingSeasonUserAdd_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminTestingSeasonUserAdd not implemented")
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_UserGetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGetSession_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UserGetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/UserGetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UserGetSession(ctx, req.(*UserGetSession_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UserSetPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSetPreferences_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UserSetPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/UserSetPreferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UserSetPreferences(ctx, req.(*UserSetPreferences_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UserDeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeleteAccount_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UserDeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/UserDeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UserDeleteAccount(ctx, req.(*UserDeleteAccount_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ChallengeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeList_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ChallengeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/ChallengeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ChallengeList(ctx, req.(*ChallengeList_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ChallengeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeGet_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ChallengeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/ChallengeGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ChallengeGet(ctx, req.(*ChallengeGet_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SeasonChallengeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeasonChallengeList_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SeasonChallengeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/SeasonChallengeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SeasonChallengeList(ctx, req.(*SeasonChallengeList_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SeasonChallengeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeasonChallengeGet_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SeasonChallengeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/SeasonChallengeGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SeasonChallengeGet(ctx, req.(*SeasonChallengeGet_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SeasonChallengeBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeasonChallengeBuy_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SeasonChallengeBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/SeasonChallengeBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SeasonChallengeBuy(ctx, req.(*SeasonChallengeBuy_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ChallengeSubscriptionValidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeSubscriptionValidate_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ChallengeSubscriptionValidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/ChallengeSubscriptionValidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ChallengeSubscriptionValidate(ctx, req.(*ChallengeSubscriptionValidate_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_OrganizationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationList_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).OrganizationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/OrganizationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).OrganizationList(ctx, req.(*OrganizationList_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_TeamList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamList_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).TeamList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/TeamList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).TeamList(ctx, req.(*TeamList_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_TeamGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamGet_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).TeamGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/TeamGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).TeamGet(ctx, req.(*TeamGet_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_TeamCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamCreate_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).TeamCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/TeamCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).TeamCreate(ctx, req.(*TeamCreate_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_TeamSendInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamSendInvite_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).TeamSendInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/TeamSendInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).TeamSendInvite(ctx, req.(*TeamSendInvite_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_TeamAcceptInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamAcceptInvite_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).TeamAcceptInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/TeamAcceptInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).TeamAcceptInvite(ctx, req.(*TeamAcceptInvite_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CouponValidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CouponValidate_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CouponValidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/CouponValidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CouponValidate(ctx, req.(*CouponValidate_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SeasonList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeasonList_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SeasonList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/SeasonList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SeasonList(ctx, req.(*SeasonList_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ToolPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ToolPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/ToolPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ToolPing(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ToolStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatus_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ToolStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/ToolStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ToolStatus(ctx, req.(*GetStatus_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ToolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfo_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ToolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/ToolInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ToolInfo(ctx, req.(*GetInfo_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ToolGenerateFakeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ToolGenerateFakeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/ToolGenerateFakeData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ToolGenerateFakeData(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ToolDBDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ToolDBDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/ToolDBDump",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ToolDBDump(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AgentRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRegister_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AgentRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/AgentRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AgentRegister(ctx, req.(*AgentRegister_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AgentListInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentListInstances_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AgentListInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/AgentListInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AgentListInstances(ctx, req.(*AgentListInstances_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AgentUpdateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentUpdateState_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AgentUpdateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/AgentUpdateState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AgentUpdateState(ctx, req.(*AgentUpdateState_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AdminListChallenges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListChallenges_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AdminListChallenges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/AdminListChallenges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AdminListChallenges(ctx, req.(*AdminListChallenges_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AdminListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListAgents_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AdminListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/AdminListAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AdminListAgents(ctx, req.(*AdminListAgents_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AdminListCoupons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListCoupons_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AdminListCoupons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/AdminListCoupons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AdminListCoupons(ctx, req.(*AdminListCoupons_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AdminListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListOrganizations_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AdminListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/AdminListOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AdminListOrganizations(ctx, req.(*AdminListOrganizations_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AdminListTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListTeams_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AdminListTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/AdminListTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AdminListTeams(ctx, req.(*AdminListTeams_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AdminListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListUsers_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AdminListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/AdminListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AdminListUsers(ctx, req.(*AdminListUsers_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AdminListActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListActivities_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AdminListActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/AdminListActivities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AdminListActivities(ctx, req.(*AdminListActivities_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AdminListChallengeSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListChallengeSubscriptions_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AdminListChallengeSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/AdminListChallengeSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AdminListChallengeSubscriptions(ctx, req.(*AdminListChallengeSubscriptions_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AdminListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListAll_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AdminListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/AdminListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AdminListAll(ctx, req.(*AdminListAll_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AdminSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSearch_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AdminSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/AdminSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AdminSearch(ctx, req.(*AdminSearch_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AdminAddCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAddCoupon_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AdminAddCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/AdminAddCoupon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AdminAddCoupon(ctx, req.(*AdminAddCoupon_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AdminRedump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRedump_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AdminRedump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/AdminRedump",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AdminRedump(ctx, req.(*AdminRedump_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AdminChallengeAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminChallengeAdd_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AdminChallengeAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/AdminChallengeAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AdminChallengeAdd(ctx, req.(*AdminChallengeAdd_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AdminChallengeRedump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminChallengeRedump_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AdminChallengeRedump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/AdminChallengeRedump",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AdminChallengeRedump(ctx, req.(*AdminChallengeRedump_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AdminChallengeFlavorAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminChallengeFlavorAdd_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AdminChallengeFlavorAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/AdminChallengeFlavorAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AdminChallengeFlavorAdd(ctx, req.(*AdminChallengeFlavorAdd_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AdminSeasonChallengeAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSeasonChallengeAdd_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AdminSeasonChallengeAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/AdminSeasonChallengeAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AdminSeasonChallengeAdd(ctx, req.(*AdminSeasonChallengeAdd_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AdminSeasonAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSeasonAdd_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AdminSeasonAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/AdminSeasonAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AdminSeasonAdd(ctx, req.(*AdminSeasonAdd_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AdminSetTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSetTeams_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AdminSetTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/AdminSetTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AdminSetTeams(ctx, req.(*AdminSetTeams_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AdminTestingSeasonUserAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminTestingSeasonUserAdd_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AdminTestingSeasonUserAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.api.Service/AdminTestingSeasonUserAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AdminTestingSeasonUserAdd(ctx, req.(*AdminTestingSeasonUserAdd_Input))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pathwar.api.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserGetSession",
			Handler:    _Service_UserGetSession_Handler,
		},
		{
			MethodName: "UserSetPreferences",
			Handler:    _Service_UserSetPreferences_Handler,
		},
		{
			MethodName: "UserDeleteAccount",
			Handler:    _Service_UserDeleteAccount_Handler,
		},
		{
			MethodName: "ChallengeList",
			Handler:    _Service_ChallengeList_Handler,
		},
		{
			MethodName: "ChallengeGet",
			Handler:    _Service_ChallengeGet_Handler,
		},
		{
			MethodName: "SeasonChallengeList",
			Handler:    _Service_SeasonChallengeList_Handler,
		},
		{
			MethodName: "SeasonChallengeGet",
			Handler:    _Service_SeasonChallengeGet_Handler,
		},
		{
			MethodName: "SeasonChallengeBuy",
			Handler:    _Service_SeasonChallengeBuy_Handler,
		},
		{
			MethodName: "ChallengeSubscriptionValidate",
			Handler:    _Service_ChallengeSubscriptionValidate_Handler,
		},
		{
			MethodName: "OrganizationList",
			Handler:    _Service_OrganizationList_Handler,
		},
		{
			MethodName: "TeamList",
			Handler:    _Service_TeamList_Handler,
		},
		{
			MethodName: "TeamGet",
			Handler:    _Service_TeamGet_Handler,
		},
		{
			MethodName: "TeamCreate",
			Handler:    _Service_TeamCreate_Handler,
		},
		{
			MethodName: "TeamSendInvite",
			Handler:    _Service_TeamSendInvite_Handler,
		},
		{
			MethodName: "TeamAcceptInvite",
			Handler:    _Service_TeamAcceptInvite_Handler,
		},
		{
			MethodName: "CouponValidate",
			Handler:    _Service_CouponValidate_Handler,
		},
		{
			MethodName: "SeasonList",
			Handler:    _Service_SeasonList_Handler,
		},
		{
			MethodName: "ToolPing",
			Handler:    _Service_ToolPing_Handler,
		},
		{
			MethodName: "ToolStatus",
			Handler:    _Service_ToolStatus_Handler,
		},
		{
			MethodName: "ToolInfo",
			Handler:    _Service_ToolInfo_Handler,
		},
		{
			MethodName: "ToolGenerateFakeData",
			Handler:    _Service_ToolGenerateFakeData_Handler,
		},
		{
			MethodName: "ToolDBDump",
			Handler:    _Service_ToolDBDump_Handler,
		},
		{
			MethodName: "AgentRegister",
			Handler:    _Service_AgentRegister_Handler,
		},
		{
			MethodName: "AgentListInstances",
			Handler:    _Service_AgentListInstances_Handler,
		},
		{
			MethodName: "AgentUpdateState",
			Handler:    _Service_AgentUpdateState_Handler,
		},
		{
			MethodName: "AdminListChallenges",
			Handler:    _Service_AdminListChallenges_Handler,
		},
		{
			MethodName: "AdminListAgents",
			Handler:    _Service_AdminListAgents_Handler,
		},
		{
			MethodName: "AdminListCoupons",
			Handler:    _Service_AdminListCoupons_Handler,
		},
		{
			MethodName: "AdminListOrganizations",
			Handler:    _Service_AdminListOrganizations_Handler,
		},
		{
			MethodName: "AdminListTeams",
			Handler:    _Service_AdminListTeams_Handler,
		},
		{
			MethodName: "AdminListUsers",
			Handler:    _Service_AdminListUsers_Handler,
		},
		{
			MethodName: "AdminListActivities",
			Handler:    _Service_AdminListActivities_Handler,
		},
		{
			MethodName: "AdminListChallengeSubscriptions",
			Handler:    _Service_AdminListChallengeSubscriptions_Handler,
		},
		{
			MethodName: "AdminListAll",
			Handler:    _Service_AdminListAll_Handler,
		},
		{
			MethodName: "AdminSearch",
			Handler:    _Service_AdminSearch_Handler,
		},
		{
			MethodName: "AdminAddCoupon",
			Handler:    _Service_AdminAddCoupon_Handler,
		},
		{
			MethodName: "AdminRedump",
			Handler:    _Service_AdminRedump_Handler,
		},
		{
			MethodName: "AdminChallengeAdd",
			Handler:    _Service_AdminChallengeAdd_Handler,
		},
		{
			MethodName: "AdminChallengeRedump",
			Handler:    _Service_AdminChallengeRedump_Handler,
		},
		{
			MethodName: "AdminChallengeFlavorAdd",
			Handler:    _Service_AdminChallengeFlavorAdd_Handler,
		},
		{
			MethodName: "AdminSeasonChallengeAdd",
			Handler:    _Service_AdminSeasonChallengeAdd_Handler,
		},
		{
			MethodName: "AdminSeasonAdd",
			Handler:    _Service_AdminSeasonAdd_Handler,
		},
		{
			MethodName: "AdminSetTeams",
			Handler:    _Service_AdminSetTeams_Handler,
		},
		{
			MethodName: "AdminTestingSeasonUserAdd",
			Handler:    _Service_AdminTestingSeasonUserAdd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pwapi.proto",
}

func (m *AdminRedump) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminRedump) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminRedump) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminRedump_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminRedump_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminRedump_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identifiers) > 0 {
		for iNdEx := len(m.Identifiers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Identifiers[iNdEx])
			copy(dAtA[i:], m.Identifiers[iNdEx])
			i = encodeVarintPwapi(dAtA, i, uint64(len(m.Identifiers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdminRedump_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminRedump_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminRedump_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminAddCoupon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminAddCoupon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminAddCoupon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminAddCoupon_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminAddCoupon_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminAddCoupon_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SeasonID) > 0 {
		i -= len(m.SeasonID)
		copy(dAtA[i:], m.SeasonID)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.SeasonID)))
		i--
		dAtA[i] = 0x22
	}
	if m.MaxValidationCount != 0 {
		i = encodeVarintPwapi(dAtA, i, uint64(m.MaxValidationCount))
		i--
		dAtA[i] = 0x18
	}
	if m.Value != 0 {
		i = encodeVarintPwapi(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminAddCoupon_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminAddCoupon_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminAddCoupon_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Coupon != nil {
		{
			size, err := m.Coupon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminListChallenges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListChallenges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListChallenges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminListChallenges_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListChallenges_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListChallenges_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminListChallenges_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListChallenges_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListChallenges_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Challenges) > 0 {
		for iNdEx := len(m.Challenges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Challenges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdminListAgents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListAgents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListAgents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminListAgents_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListAgents_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListAgents_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminListAgents_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListAgents_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListAgents_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Agents) > 0 {
		for iNdEx := len(m.Agents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Agents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdminListCoupons) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListCoupons) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListCoupons) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminListCoupons_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListCoupons_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListCoupons_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminListCoupons_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListCoupons_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListCoupons_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coupons) > 0 {
		for iNdEx := len(m.Coupons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coupons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdminListOrganizations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListOrganizations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListOrganizations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminListOrganizations_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListOrganizations_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListOrganizations_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminListOrganizations_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListOrganizations_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListOrganizations_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for iNdEx := len(m.Organizations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Organizations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdminListUsers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListUsers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListUsers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminListUsers_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListUsers_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListUsers_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminListUsers_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListUsers_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListUsers_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdminListChallengeSubscriptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListChallengeSubscriptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListChallengeSubscriptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminListChallengeSubscriptions_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListChallengeSubscriptions_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListChallengeSubscriptions_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminListChallengeSubscriptions_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListChallengeSubscriptions_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListChallengeSubscriptions_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subscriptions) > 0 {
		for iNdEx := len(m.Subscriptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subscriptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdminListAll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminListAll_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListAll_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListAll_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminListAll_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListAll_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListAll_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Activities) > 0 {
		for iNdEx := len(m.Activities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Activities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.Achievements) > 0 {
		for iNdEx := len(m.Achievements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Achievements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.CouponValidations) > 0 {
		for iNdEx := len(m.CouponValidations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CouponValidations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.Coupons) > 0 {
		for iNdEx := len(m.Coupons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coupons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.Notifications) > 0 {
		for iNdEx := len(m.Notifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.InventoryItems) > 0 {
		for iNdEx := len(m.InventoryItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InventoryItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.ChallengeSubscriptions) > 0 {
		for iNdEx := len(m.ChallengeSubscriptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengeSubscriptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.ChallengeValidations) > 0 {
		for iNdEx := len(m.ChallengeValidations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengeValidations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.WhoswhoAttempts) > 0 {
		for iNdEx := len(m.WhoswhoAttempts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WhoswhoAttempts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.Teams) > 0 {
		for iNdEx := len(m.Teams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Teams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Seasons) > 0 {
		for iNdEx := len(m.Seasons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Seasons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Organizations) > 0 {
		for iNdEx := len(m.Organizations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Organizations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.TeamInvites) > 0 {
		for iNdEx := len(m.TeamInvites) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TeamInvites[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.TeamMembers) > 0 {
		for iNdEx := len(m.TeamMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TeamMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.OrganizationMembers) > 0 {
		for iNdEx := len(m.OrganizationMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrganizationMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Agents) > 0 {
		for iNdEx := len(m.Agents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Agents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ChallengeInstances) > 0 {
		for iNdEx := len(m.ChallengeInstances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengeInstances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SeasonChallenges) > 0 {
		for iNdEx := len(m.SeasonChallenges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SeasonChallenges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ChallengeFlavors) > 0 {
		for iNdEx := len(m.ChallengeFlavors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengeFlavors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Challenges) > 0 {
		for iNdEx := len(m.Challenges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Challenges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdminSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminSearch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminSearch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminSearch_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminSearch_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminSearch_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Search) > 0 {
		i -= len(m.Search)
		copy(dAtA[i:], m.Search)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.Search)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminSearch_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminSearch_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminSearch_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Activities) > 0 {
		for iNdEx := len(m.Activities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Activities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.Achievements) > 0 {
		for iNdEx := len(m.Achievements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Achievements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.CouponValidations) > 0 {
		for iNdEx := len(m.CouponValidations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CouponValidations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.Coupons) > 0 {
		for iNdEx := len(m.Coupons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coupons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.Notifications) > 0 {
		for iNdEx := len(m.Notifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.InventoryItems) > 0 {
		for iNdEx := len(m.InventoryItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InventoryItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.ChallengeSubscriptions) > 0 {
		for iNdEx := len(m.ChallengeSubscriptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengeSubscriptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.ChallengeValidations) > 0 {
		for iNdEx := len(m.ChallengeValidations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengeValidations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.WhoswhoAttempts) > 0 {
		for iNdEx := len(m.WhoswhoAttempts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WhoswhoAttempts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Teams) > 0 {
		for iNdEx := len(m.Teams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Teams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Seasons) > 0 {
		for iNdEx := len(m.Seasons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Seasons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Organizations) > 0 {
		for iNdEx := len(m.Organizations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Organizations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.TeamMembers) > 0 {
		for iNdEx := len(m.TeamMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TeamMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.OrganizationMembers) > 0 {
		for iNdEx := len(m.OrganizationMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrganizationMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Agents) > 0 {
		for iNdEx := len(m.Agents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Agents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ChallengeInstances) > 0 {
		for iNdEx := len(m.ChallengeInstances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengeInstances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SeasonChallenges) > 0 {
		for iNdEx := len(m.SeasonChallenges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SeasonChallenges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ChallengeFlavors) > 0 {
		for iNdEx := len(m.ChallengeFlavors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengeFlavors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Challenges) > 0 {
		for iNdEx := len(m.Challenges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Challenges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdminListTeams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListTeams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListTeams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminListTeams_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListTeams_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListTeams_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminListTeams_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListTeams_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListTeams_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Teams) > 0 {
		for iNdEx := len(m.Teams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Teams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdminListActivities) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListActivities) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListActivities) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminListActivities_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListActivities_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListActivities_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FilteringPreset) > 0 {
		i -= len(m.FilteringPreset)
		copy(dAtA[i:], m.FilteringPreset)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.FilteringPreset)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Since != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Since, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Since):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintPwapi(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x12
	}
	if m.Limit != 0 {
		i = encodeVarintPwapi(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AdminListActivities_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListActivities_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListActivities_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Activities) > 0 {
		for iNdEx := len(m.Activities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Activities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdminChallengeAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminChallengeAdd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminChallengeAdd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminChallengeAdd_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminChallengeAdd_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminChallengeAdd_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Challenge != nil {
		{
			size, err := m.Challenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminChallengeAdd_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminChallengeAdd_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminChallengeAdd_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Challenge != nil {
		{
			size, err := m.Challenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminChallengeRedump) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminChallengeRedump) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminChallengeRedump) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminChallengeRedump_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminChallengeRedump_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminChallengeRedump_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChallengeID) > 0 {
		i -= len(m.ChallengeID)
		copy(dAtA[i:], m.ChallengeID)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.ChallengeID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminChallengeRedump_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminChallengeRedump_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminChallengeRedump_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChallengeInstances) > 0 {
		for iNdEx := len(m.ChallengeInstances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengeInstances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdminChallengeFlavorAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminChallengeFlavorAdd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminChallengeFlavorAdd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminChallengeFlavorAdd_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminChallengeFlavorAdd_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminChallengeFlavorAdd_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChallengeID) > 0 {
		i -= len(m.ChallengeID)
		copy(dAtA[i:], m.ChallengeID)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.ChallengeID)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChallengeFlavor != nil {
		{
			size, err := m.ChallengeFlavor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminChallengeFlavorAdd_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminChallengeFlavorAdd_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminChallengeFlavorAdd_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeFlavor != nil {
		{
			size, err := m.ChallengeFlavor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminSeasonChallengeAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminSeasonChallengeAdd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminSeasonChallengeAdd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminSeasonChallengeAdd_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminSeasonChallengeAdd_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminSeasonChallengeAdd_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SeasonID) > 0 {
		i -= len(m.SeasonID)
		copy(dAtA[i:], m.SeasonID)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.SeasonID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FlavorID) > 0 {
		i -= len(m.FlavorID)
		copy(dAtA[i:], m.FlavorID)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.FlavorID)))
		i--
		dAtA[i] = 0x12
	}
	if m.SeasonChallenge != nil {
		{
			size, err := m.SeasonChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminSeasonChallengeAdd_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminSeasonChallengeAdd_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminSeasonChallengeAdd_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeasonChallenge != nil {
		{
			size, err := m.SeasonChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminSeasonAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminSeasonAdd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminSeasonAdd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminSeasonAdd_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminSeasonAdd_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminSeasonAdd_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Season != nil {
		{
			size, err := m.Season.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminSeasonAdd_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminSeasonAdd_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminSeasonAdd_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Season != nil {
		{
			size, err := m.Season.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminSetTeams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminSetTeams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminSetTeams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminSetTeams_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminSetTeams_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminSetTeams_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Teams) > 0 {
		for iNdEx := len(m.Teams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Teams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdminSetTeams_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminSetTeams_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminSetTeams_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminTestingSeasonUserAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminTestingSeasonUserAdd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminTestingSeasonUserAdd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AdminTestingSeasonUserAdd_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminTestingSeasonUserAdd_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminTestingSeasonUserAdd_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminTestingSeasonUserAdd_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminTestingSeasonUserAdd_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminTestingSeasonUserAdd_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamMember != nil {
		{
			size, err := m.TeamMember.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AgentList_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentList_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentList_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AgentList_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentList_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentList_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Agents) > 0 {
		for iNdEx := len(m.Agents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Agents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AgentRegister) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentRegister) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentRegister) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AgentRegister_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentRegister_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentRegister_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultAgent {
		i--
		if m.DefaultAgent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.AuthSalt) > 0 {
		i -= len(m.AuthSalt)
		copy(dAtA[i:], m.AuthSalt)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.AuthSalt)))
		i--
		dAtA[i] = 0x52
	}
	if m.NginxPort != 0 {
		i = encodeVarintPwapi(dAtA, i, uint64(m.NginxPort))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DomainSuffix) > 0 {
		i -= len(m.DomainSuffix)
		copy(dAtA[i:], m.DomainSuffix)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.DomainSuffix)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintPwapi(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Arch) > 0 {
		i -= len(m.Arch)
		copy(dAtA[i:], m.Arch)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.Arch)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OS) > 0 {
		i -= len(m.OS)
		copy(dAtA[i:], m.OS)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.OS)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentRegister_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentRegister_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentRegister_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Agent != nil {
		{
			size, err := m.Agent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentListInstances) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentListInstances) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentListInstances) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AgentListInstances_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentListInstances_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentListInstances_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AgentName) > 0 {
		i -= len(m.AgentName)
		copy(dAtA[i:], m.AgentName)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.AgentName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentListInstances_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentListInstances_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentListInstances_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Instances) > 0 {
		for iNdEx := len(m.Instances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Instances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AgentUpdateState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentUpdateState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentUpdateState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AgentUpdateState_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentUpdateState_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentUpdateState_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Instances) > 0 {
		for iNdEx := len(m.Instances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Instances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AgentUpdateState_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentUpdateState_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentUpdateState_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TeamGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TeamGet_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamGet_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamGet_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamID != 0 {
		i = encodeVarintPwapi(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamGet_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamGet_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamGet_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeList_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeList_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeList_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeasonID != 0 {
		i = encodeVarintPwapi(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeList_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeList_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeList_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeGet_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeGet_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeGet_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeasonChallengeID != 0 {
		i = encodeVarintPwapi(dAtA, i, uint64(m.SeasonChallengeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeGet_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeGet_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeGet_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ChallengeGet_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeGet_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeGet_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeID != 0 {
		i = encodeVarintPwapi(dAtA, i, uint64(m.ChallengeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeGet_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeGet_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeGet_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeBuy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeBuy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeBuy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeBuy_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeBuy_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeBuy_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SeasonID) > 0 {
		i -= len(m.SeasonID)
		copy(dAtA[i:], m.SeasonID)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.SeasonID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FlavorID) > 0 {
		i -= len(m.FlavorID)
		copy(dAtA[i:], m.FlavorID)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.FlavorID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SeasonChallengeBuy_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonChallengeBuy_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonChallengeBuy_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeSubscription != nil {
		{
			size, err := m.ChallengeSubscription.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeSubscriptionValidate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeSubscriptionValidate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeSubscriptionValidate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ChallengeSubscriptionValidate_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeSubscriptionValidate_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeSubscriptionValidate_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Passphrases) > 0 {
		for iNdEx := len(m.Passphrases) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Passphrases[iNdEx])
			copy(dAtA[i:], m.Passphrases[iNdEx])
			i = encodeVarintPwapi(dAtA, i, uint64(len(m.Passphrases[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ChallengeSubscriptionID != 0 {
		i = encodeVarintPwapi(dAtA, i, uint64(m.ChallengeSubscriptionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeSubscriptionValidate_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeSubscriptionValidate_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeSubscriptionValidate_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeValidation != nil {
		{
			size, err := m.ChallengeValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeamList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TeamList_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamList_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamList_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeasonID != 0 {
		i = encodeVarintPwapi(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamList_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamList_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamList_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TeamCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TeamCreate_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamCreate_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamCreate_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SeasonID) > 0 {
		i -= len(m.SeasonID)
		copy(dAtA[i:], m.SeasonID)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.SeasonID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrganizationID) > 0 {
		i -= len(m.OrganizationID)
		copy(dAtA[i:], m.OrganizationID)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.OrganizationID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeamCreate_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamCreate_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamCreate_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeamSendInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamSendInvite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamSendInvite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TeamSendInvite_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamSendInvite_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamSendInvite_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TeamID) > 0 {
		i -= len(m.TeamID)
		copy(dAtA[i:], m.TeamID)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.TeamID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeamSendInvite_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamSendInvite_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamSendInvite_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamInvite != nil {
		{
			size, err := m.TeamInvite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeamAcceptInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamAcceptInvite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamAcceptInvite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TeamAcceptInvite_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamAcceptInvite_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamAcceptInvite_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TeamInviteID) > 0 {
		i -= len(m.TeamInviteID)
		copy(dAtA[i:], m.TeamInviteID)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.TeamInviteID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeamAcceptInvite_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamAcceptInvite_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamAcceptInvite_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamMember != nil {
		{
			size, err := m.TeamMember.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SeasonList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SeasonList_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonList_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonList_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SeasonList_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonList_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonList_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Seasons) > 0 {
		for iNdEx := len(m.Seasons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Seasons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	return len(dAtA) - i, nil
}

func (m *SeasonList_Output_SeasonAndTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonList_Output_SeasonAndTeam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonList_Output_SeasonAndTeam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Season != nil {
		{
			size, err := m.Season.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserSetPreferences) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSetPreferences) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserSetPreferences) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UserSetPreferences_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSetPreferences_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserSetPreferences_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActiveSeasonID != 0 {
		i = encodeVarintPwapi(dAtA, i, uint64(m.ActiveSeasonID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserSetPreferences_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSetPreferences_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserSetPreferences_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UserDeleteAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDeleteAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserDeleteAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UserDeleteAccount_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDeleteAccount_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserDeleteAccount_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserDeleteAccount_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDeleteAccount_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserDeleteAccount_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OrganizationList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrganizationList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrganizationList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OrganizationList_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrganizationList_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrganizationList_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OrganizationList_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrganizationList_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrganizationList_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ChallengeList_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeList_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeList_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ChallengeList_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeList_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeList_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserGetSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGetSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserGetSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UserGetSession_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGetSession_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserGetSession_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UserGetSession_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGetSession_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserGetSession_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Seasons) > 0 {
		for iNdEx := len(m.Seasons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Seasons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPwapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Notifications != 0 {
		i = encodeVarintPwapi(dAtA, i, uint64(m.Notifications))
		i--
		dAtA[i] = 0x20
	}
	if m.Claims != nil {
		{
			size, err := m.Claims.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.IsNewUser {
		i--
		if m.IsNewUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserGetSession_Output_SeasonAndTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGetSession_Output_SeasonAndTeam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserGetSession_Output_SeasonAndTeam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Team != nil {
		{
			size, err := m.Team.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Season != nil {
		{
			size, err := m.Season.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetStatus_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStatus_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStatus_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetStatus_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStatus_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStatus_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EverythingIsOK {
		i--
		if m.EverythingIsOK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetInfo_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfo_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInfo_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetInfo_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfo_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInfo_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithinDocker {
		i--
		if m.WithinDocker {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.BuiltBy) > 0 {
		i -= len(m.BuiltBy)
		copy(dAtA[i:], m.BuiltBy)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.BuiltBy)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BuiltAt) > 0 {
		i -= len(m.BuiltAt)
		copy(dAtA[i:], m.BuiltAt)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.BuiltAt)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Commit) > 0 {
		i -= len(m.Commit)
		copy(dAtA[i:], m.Commit)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.Commit)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Uptime != 0 {
		i = encodeVarintPwapi(dAtA, i, uint64(m.Uptime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CouponValidate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CouponValidate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CouponValidate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CouponValidate_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CouponValidate_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CouponValidate_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamID != 0 {
		i = encodeVarintPwapi(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintPwapi(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CouponValidate_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CouponValidate_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CouponValidate_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CouponValidation != nil {
		{
			size, err := m.CouponValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPwapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Void) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Void) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Void) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPwapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPwapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AdminRedump) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminRedump_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Identifiers) > 0 {
		for _, s := range m.Identifiers {
			l = len(s)
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	return n
}

func (m *AdminRedump_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminAddCoupon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminAddCoupon_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovPwapi(uint64(m.Value))
	}
	if m.MaxValidationCount != 0 {
		n += 1 + sovPwapi(uint64(m.MaxValidationCount))
	}
	l = len(m.SeasonID)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *AdminAddCoupon_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Coupon != nil {
		l = m.Coupon.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *AdminListChallenges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminListChallenges_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminListChallenges_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Challenges) > 0 {
		for _, e := range m.Challenges {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	return n
}

func (m *AdminListAgents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminListAgents_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminListAgents_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Agents) > 0 {
		for _, e := range m.Agents {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	return n
}

func (m *AdminListCoupons) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminListCoupons_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminListCoupons_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coupons) > 0 {
		for _, e := range m.Coupons {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	return n
}

func (m *AdminListOrganizations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminListOrganizations_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminListOrganizations_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for _, e := range m.Organizations {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	return n
}

func (m *AdminListUsers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminListUsers_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminListUsers_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	return n
}

func (m *AdminListChallengeSubscriptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminListChallengeSubscriptions_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminListChallengeSubscriptions_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Subscriptions) > 0 {
		for _, e := range m.Subscriptions {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	return n
}

func (m *AdminListAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminListAll_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminListAll_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Challenges) > 0 {
		for _, e := range m.Challenges {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.ChallengeFlavors) > 0 {
		for _, e := range m.ChallengeFlavors {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.SeasonChallenges) > 0 {
		for _, e := range m.SeasonChallenges {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.ChallengeInstances) > 0 {
		for _, e := range m.ChallengeInstances {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.Agents) > 0 {
		for _, e := range m.Agents {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.OrganizationMembers) > 0 {
		for _, e := range m.OrganizationMembers {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.TeamMembers) > 0 {
		for _, e := range m.TeamMembers {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.TeamInvites) > 0 {
		for _, e := range m.TeamInvites {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.Organizations) > 0 {
		for _, e := range m.Organizations {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.Seasons) > 0 {
		for _, e := range m.Seasons {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.WhoswhoAttempts) > 0 {
		for _, e := range m.WhoswhoAttempts {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.ChallengeValidations) > 0 {
		for _, e := range m.ChallengeValidations {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.ChallengeSubscriptions) > 0 {
		for _, e := range m.ChallengeSubscriptions {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.InventoryItems) > 0 {
		for _, e := range m.InventoryItems {
			l = e.Size()
			n += 2 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.Notifications) > 0 {
		for _, e := range m.Notifications {
			l = e.Size()
			n += 2 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.Coupons) > 0 {
		for _, e := range m.Coupons {
			l = e.Size()
			n += 2 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.CouponValidations) > 0 {
		for _, e := range m.CouponValidations {
			l = e.Size()
			n += 2 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.Achievements) > 0 {
		for _, e := range m.Achievements {
			l = e.Size()
			n += 2 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.Activities) > 0 {
		for _, e := range m.Activities {
			l = e.Size()
			n += 2 + l + sovPwapi(uint64(l))
		}
	}
	return n
}

func (m *AdminSearch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminSearch_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Search)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *AdminSearch_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Challenges) > 0 {
		for _, e := range m.Challenges {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.ChallengeFlavors) > 0 {
		for _, e := range m.ChallengeFlavors {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.SeasonChallenges) > 0 {
		for _, e := range m.SeasonChallenges {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.ChallengeInstances) > 0 {
		for _, e := range m.ChallengeInstances {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.Agents) > 0 {
		for _, e := range m.Agents {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.OrganizationMembers) > 0 {
		for _, e := range m.OrganizationMembers {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.TeamMembers) > 0 {
		for _, e := range m.TeamMembers {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.Organizations) > 0 {
		for _, e := range m.Organizations {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.Seasons) > 0 {
		for _, e := range m.Seasons {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.WhoswhoAttempts) > 0 {
		for _, e := range m.WhoswhoAttempts {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.ChallengeValidations) > 0 {
		for _, e := range m.ChallengeValidations {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.ChallengeSubscriptions) > 0 {
		for _, e := range m.ChallengeSubscriptions {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.InventoryItems) > 0 {
		for _, e := range m.InventoryItems {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.Notifications) > 0 {
		for _, e := range m.Notifications {
			l = e.Size()
			n += 2 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.Coupons) > 0 {
		for _, e := range m.Coupons {
			l = e.Size()
			n += 2 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.CouponValidations) > 0 {
		for _, e := range m.CouponValidations {
			l = e.Size()
			n += 2 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.Achievements) > 0 {
		for _, e := range m.Achievements {
			l = e.Size()
			n += 2 + l + sovPwapi(uint64(l))
		}
	}
	if len(m.Activities) > 0 {
		for _, e := range m.Activities {
			l = e.Size()
			n += 2 + l + sovPwapi(uint64(l))
		}
	}
	return n
}

func (m *AdminListTeams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminListTeams_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminListTeams_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	return n
}

func (m *AdminListActivities) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminListActivities_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovPwapi(uint64(m.Limit))
	}
	if m.Since != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Since)
		n += 1 + l + sovPwapi(uint64(l))
	}
	l = len(m.FilteringPreset)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *AdminListActivities_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Activities) > 0 {
		for _, e := range m.Activities {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	return n
}

func (m *AdminChallengeAdd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminChallengeAdd_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Challenge != nil {
		l = m.Challenge.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *AdminChallengeAdd_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Challenge != nil {
		l = m.Challenge.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *AdminChallengeRedump) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminChallengeRedump_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChallengeID)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *AdminChallengeRedump_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChallengeInstances) > 0 {
		for _, e := range m.ChallengeInstances {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	return n
}

func (m *AdminChallengeFlavorAdd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminChallengeFlavorAdd_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeFlavor != nil {
		l = m.ChallengeFlavor.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	l = len(m.ChallengeID)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *AdminChallengeFlavorAdd_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeFlavor != nil {
		l = m.ChallengeFlavor.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *AdminSeasonChallengeAdd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminSeasonChallengeAdd_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonChallenge != nil {
		l = m.SeasonChallenge.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	l = len(m.FlavorID)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	l = len(m.SeasonID)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *AdminSeasonChallengeAdd_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonChallenge != nil {
		l = m.SeasonChallenge.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *AdminSeasonAdd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminSeasonAdd_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Season != nil {
		l = m.Season.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *AdminSeasonAdd_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Season != nil {
		l = m.Season.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *AdminSetTeams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminSetTeams_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	return n
}

func (m *AdminSetTeams_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminTestingSeasonUserAdd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AdminTestingSeasonUserAdd_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *AdminTestingSeasonUserAdd_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamMember != nil {
		l = m.TeamMember.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *AgentList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AgentList_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AgentList_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Agents) > 0 {
		for _, e := range m.Agents {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	return n
}

func (m *AgentRegister) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AgentRegister_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	l = len(m.OS)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	l = len(m.Arch)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	l = len(m.DomainSuffix)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	if m.NginxPort != 0 {
		n += 1 + sovPwapi(uint64(m.NginxPort))
	}
	l = len(m.AuthSalt)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	if m.DefaultAgent {
		n += 2
	}
	return n
}

func (m *AgentRegister_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Agent != nil {
		l = m.Agent.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *AgentListInstances) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AgentListInstances_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AgentName)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *AgentListInstances_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Instances) > 0 {
		for _, e := range m.Instances {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	return n
}

func (m *AgentUpdateState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AgentUpdateState_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Instances) > 0 {
		for _, e := range m.Instances {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	return n
}

func (m *AgentUpdateState_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TeamGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TeamGet_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamID != 0 {
		n += 1 + sovPwapi(uint64(m.TeamID))
	}
	return n
}

func (m *TeamGet_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *SeasonChallengeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SeasonChallengeList_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonID != 0 {
		n += 1 + sovPwapi(uint64(m.SeasonID))
	}
	return n
}

func (m *SeasonChallengeList_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	return n
}

func (m *SeasonChallengeGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SeasonChallengeGet_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonChallengeID != 0 {
		n += 1 + sovPwapi(uint64(m.SeasonChallengeID))
	}
	return n
}

func (m *SeasonChallengeGet_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *ChallengeGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChallengeGet_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeID != 0 {
		n += 1 + sovPwapi(uint64(m.ChallengeID))
	}
	return n
}

func (m *ChallengeGet_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *SeasonChallengeBuy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SeasonChallengeBuy_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FlavorID)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	l = len(m.SeasonID)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *SeasonChallengeBuy_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeSubscription != nil {
		l = m.ChallengeSubscription.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *ChallengeSubscriptionValidate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChallengeSubscriptionValidate_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeSubscriptionID != 0 {
		n += 1 + sovPwapi(uint64(m.ChallengeSubscriptionID))
	}
	if len(m.Passphrases) > 0 {
		for _, s := range m.Passphrases {
			l = len(s)
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *ChallengeSubscriptionValidate_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeValidation != nil {
		l = m.ChallengeValidation.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *TeamList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TeamList_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonID != 0 {
		n += 1 + sovPwapi(uint64(m.SeasonID))
	}
	return n
}

func (m *TeamList_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	return n
}

func (m *TeamCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TeamCreate_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	l = len(m.SeasonID)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *TeamCreate_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *TeamSendInvite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TeamSendInvite_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TeamID)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *TeamSendInvite_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamInvite != nil {
		l = m.TeamInvite.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *TeamAcceptInvite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TeamAcceptInvite_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TeamInviteID)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *TeamAcceptInvite_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamMember != nil {
		l = m.TeamMember.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *SeasonList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SeasonList_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SeasonList_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Seasons) > 0 {
		for _, e := range m.Seasons {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	return n
}

func (m *SeasonList_Output_SeasonAndTeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Season != nil {
		l = m.Season.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	return n
}

func (m *UserSetPreferences) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UserSetPreferences_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveSeasonID != 0 {
		n += 1 + sovPwapi(uint64(m.ActiveSeasonID))
	}
	return n
}

func (m *UserSetPreferences_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UserDeleteAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UserDeleteAccount_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *UserDeleteAccount_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OrganizationList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OrganizationList_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OrganizationList_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	return n
}

func (m *ChallengeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChallengeList_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ChallengeList_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	return n
}

func (m *UserGetSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UserGetSession_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UserGetSession_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	if m.IsNewUser {
		n += 2
	}
	if m.Claims != nil {
		l = m.Claims.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	if m.Notifications != 0 {
		n += 1 + sovPwapi(uint64(m.Notifications))
	}
	if len(m.Seasons) > 0 {
		for _, e := range m.Seasons {
			l = e.Size()
			n += 1 + l + sovPwapi(uint64(l))
		}
	}
	return n
}

func (m *UserGetSession_Output_SeasonAndTeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Season != nil {
		l = m.Season.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	return n
}

func (m *GetStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetStatus_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetStatus_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EverythingIsOK {
		n += 2
	}
	return n
}

func (m *GetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetInfo_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetInfo_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	if m.Uptime != 0 {
		n += 1 + sovPwapi(uint64(m.Uptime))
	}
	l = len(m.Commit)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	l = len(m.BuiltAt)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	l = len(m.BuiltBy)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	if m.WithinDocker {
		n += 2
	}
	return n
}

func (m *CouponValidate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CouponValidate_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovPwapi(uint64(l))
	}
	if m.TeamID != 0 {
		n += 1 + sovPwapi(uint64(m.TeamID))
	}
	return n
}

func (m *CouponValidate_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CouponValidation != nil {
		l = m.CouponValidation.Size()
		n += 1 + l + sovPwapi(uint64(l))
	}
	return n
}

func (m *Void) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPwapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPwapi(x uint64) (n int) {
	return sovPwapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AdminRedump) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminRedump: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminRedump: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminRedump_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifiers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifiers = append(m.Identifiers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminRedump_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminAddCoupon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminAddCoupon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminAddCoupon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminAddCoupon_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValidationCount", wireType)
			}
			m.MaxValidationCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxValidationCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeasonID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminAddCoupon_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coupon == nil {
				m.Coupon = &pwdb.Coupon{}
			}
			if err := m.Coupon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListChallenges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminListChallenges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminListChallenges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListChallenges_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListChallenges_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenges = append(m.Challenges, &pwdb.Challenge{})
			if err := m.Challenges[len(m.Challenges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListAgents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminListAgents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminListAgents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListAgents_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListAgents_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agents = append(m.Agents, &pwdb.Agent{})
			if err := m.Agents[len(m.Agents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListCoupons) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminListCoupons: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminListCoupons: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListCoupons_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListCoupons_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coupons = append(m.Coupons, &pwdb.Coupon{})
			if err := m.Coupons[len(m.Coupons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListOrganizations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminListOrganizations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminListOrganizations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListOrganizations_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListOrganizations_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organizations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organizations = append(m.Organizations, &pwdb.Organization{})
			if err := m.Organizations[len(m.Organizations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListUsers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminListUsers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminListUsers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListUsers_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListUsers_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &pwdb.User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListChallengeSubscriptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminListChallengeSubscriptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminListChallengeSubscriptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListChallengeSubscriptions_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListChallengeSubscriptions_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, &pwdb.ChallengeSubscription{})
			if err := m.Subscriptions[len(m.Subscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListAll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminListAll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminListAll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListAll_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListAll_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenges = append(m.Challenges, &pwdb.Challenge{})
			if err := m.Challenges[len(m.Challenges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeFlavors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeFlavors = append(m.ChallengeFlavors, &pwdb.ChallengeFlavor{})
			if err := m.ChallengeFlavors[len(m.ChallengeFlavors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonChallenges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeasonChallenges = append(m.SeasonChallenges, &pwdb.SeasonChallenge{})
			if err := m.SeasonChallenges[len(m.SeasonChallenges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeInstances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeInstances = append(m.ChallengeInstances, &pwdb.ChallengeInstance{})
			if err := m.ChallengeInstances[len(m.ChallengeInstances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agents = append(m.Agents, &pwdb.Agent{})
			if err := m.Agents[len(m.Agents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationMembers = append(m.OrganizationMembers, &pwdb.OrganizationMember{})
			if err := m.OrganizationMembers[len(m.OrganizationMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamMembers = append(m.TeamMembers, &pwdb.TeamMember{})
			if err := m.TeamMembers[len(m.TeamMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamInvites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamInvites = append(m.TeamInvites, &pwdb.TeamInvite{})
			if err := m.TeamInvites[len(m.TeamInvites)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &pwdb.User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organizations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organizations = append(m.Organizations, &pwdb.Organization{})
			if err := m.Organizations[len(m.Organizations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seasons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seasons = append(m.Seasons, &pwdb.Season{})
			if err := m.Seasons[len(m.Seasons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &pwdb.Team{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhoswhoAttempts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhoswhoAttempts = append(m.WhoswhoAttempts, &pwdb.WhoswhoAttempt{})
			if err := m.WhoswhoAttempts[len(m.WhoswhoAttempts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeValidations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeValidations = append(m.ChallengeValidations, &pwdb.ChallengeValidation{})
			if err := m.ChallengeValidations[len(m.ChallengeValidations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSubscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeSubscriptions = append(m.ChallengeSubscriptions, &pwdb.ChallengeSubscription{})
			if err := m.ChallengeSubscriptions[len(m.ChallengeSubscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InventoryItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InventoryItems = append(m.InventoryItems, &pwdb.InventoryItem{})
			if err := m.InventoryItems[len(m.InventoryItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notifications = append(m.Notifications, &pwdb.Notification{})
			if err := m.Notifications[len(m.Notifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coupons = append(m.Coupons, &pwdb.Coupon{})
			if err := m.Coupons[len(m.Coupons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponValidations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CouponValidations = append(m.CouponValidations, &pwdb.CouponValidation{})
			if err := m.CouponValidations[len(m.CouponValidations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Achievements = append(m.Achievements, &pwdb.Achievement{})
			if err := m.Achievements[len(m.Achievements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Activities = append(m.Activities, &pwdb.Activity{})
			if err := m.Activities[len(m.Activities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminSearch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminSearch_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Search", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Search = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminSearch_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenges = append(m.Challenges, &pwdb.Challenge{})
			if err := m.Challenges[len(m.Challenges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeFlavors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeFlavors = append(m.ChallengeFlavors, &pwdb.ChallengeFlavor{})
			if err := m.ChallengeFlavors[len(m.ChallengeFlavors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonChallenges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeasonChallenges = append(m.SeasonChallenges, &pwdb.SeasonChallenge{})
			if err := m.SeasonChallenges[len(m.SeasonChallenges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeInstances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeInstances = append(m.ChallengeInstances, &pwdb.ChallengeInstance{})
			if err := m.ChallengeInstances[len(m.ChallengeInstances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agents = append(m.Agents, &pwdb.Agent{})
			if err := m.Agents[len(m.Agents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationMembers = append(m.OrganizationMembers, &pwdb.OrganizationMember{})
			if err := m.OrganizationMembers[len(m.OrganizationMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamMembers = append(m.TeamMembers, &pwdb.TeamMember{})
			if err := m.TeamMembers[len(m.TeamMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &pwdb.User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organizations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organizations = append(m.Organizations, &pwdb.Organization{})
			if err := m.Organizations[len(m.Organizations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seasons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seasons = append(m.Seasons, &pwdb.Season{})
			if err := m.Seasons[len(m.Seasons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &pwdb.Team{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhoswhoAttempts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhoswhoAttempts = append(m.WhoswhoAttempts, &pwdb.WhoswhoAttempt{})
			if err := m.WhoswhoAttempts[len(m.WhoswhoAttempts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeValidations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeValidations = append(m.ChallengeValidations, &pwdb.ChallengeValidation{})
			if err := m.ChallengeValidations[len(m.ChallengeValidations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSubscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeSubscriptions = append(m.ChallengeSubscriptions, &pwdb.ChallengeSubscription{})
			if err := m.ChallengeSubscriptions[len(m.ChallengeSubscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InventoryItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InventoryItems = append(m.InventoryItems, &pwdb.InventoryItem{})
			if err := m.InventoryItems[len(m.InventoryItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notifications = append(m.Notifications, &pwdb.Notification{})
			if err := m.Notifications[len(m.Notifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coupons = append(m.Coupons, &pwdb.Coupon{})
			if err := m.Coupons[len(m.Coupons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponValidations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CouponValidations = append(m.CouponValidations, &pwdb.CouponValidation{})
			if err := m.CouponValidations[len(m.CouponValidations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Achievements = append(m.Achievements, &pwdb.Achievement{})
			if err := m.Achievements[len(m.Achievements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Activities = append(m.Activities, &pwdb.Activity{})
			if err := m.Activities[len(m.Activities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListTeams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminListTeams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminListTeams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListTeams_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListTeams_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &pwdb.Team{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListActivities) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminListActivities: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminListActivities: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListActivities_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Since", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Since == nil {
				m.Since = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Since, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilteringPreset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilteringPreset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListActivities_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Activities = append(m.Activities, &pwdb.Activity{})
			if err := m.Activities[len(m.Activities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminChallengeAdd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminChallengeAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminChallengeAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminChallengeAdd_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Challenge == nil {
				m.Challenge = &pwdb.Challenge{}
			}
			if err := m.Challenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminChallengeAdd_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Challenge == nil {
				m.Challenge = &pwdb.Challenge{}
			}
			if err := m.Challenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminChallengeRedump) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminChallengeRedump: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminChallengeRedump: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminChallengeRedump_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminChallengeRedump_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeInstances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeInstances = append(m.ChallengeInstances, &pwdb.ChallengeInstance{})
			if err := m.ChallengeInstances[len(m.ChallengeInstances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminChallengeFlavorAdd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminChallengeFlavorAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminChallengeFlavorAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminChallengeFlavorAdd_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeFlavor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChallengeFlavor == nil {
				m.ChallengeFlavor = &pwdb.ChallengeFlavor{}
			}
			if err := m.ChallengeFlavor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminChallengeFlavorAdd_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeFlavor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChallengeFlavor == nil {
				m.ChallengeFlavor = &pwdb.ChallengeFlavor{}
			}
			if err := m.ChallengeFlavor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminSeasonChallengeAdd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminSeasonChallengeAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminSeasonChallengeAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminSeasonChallengeAdd_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeasonChallenge == nil {
				m.SeasonChallenge = &pwdb.SeasonChallenge{}
			}
			if err := m.SeasonChallenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlavorID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlavorID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeasonID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminSeasonChallengeAdd_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeasonChallenge == nil {
				m.SeasonChallenge = &pwdb.SeasonChallenge{}
			}
			if err := m.SeasonChallenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminSeasonAdd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminSeasonAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminSeasonAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminSeasonAdd_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Season == nil {
				m.Season = &pwdb.Season{}
			}
			if err := m.Season.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminSeasonAdd_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Season == nil {
				m.Season = &pwdb.Season{}
			}
			if err := m.Season.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminSetTeams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminSetTeams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminSetTeams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminSetTeams_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &pwdb.Team{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminSetTeams_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminTestingSeasonUserAdd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminTestingSeasonUserAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminTestingSeasonUserAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminTestingSeasonUserAdd_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminTestingSeasonUserAdd_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamMember == nil {
				m.TeamMember = &pwdb.TeamMember{}
			}
			if err := m.TeamMember.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentList_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentList_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agents = append(m.Agents, &pwdb.Agent{})
			if err := m.Agents[len(m.Agents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentRegister) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentRegister: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentRegister: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentRegister_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OS = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainSuffix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainSuffix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NginxPort", wireType)
			}
			m.NginxPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NginxPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthSalt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthSalt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultAgent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefaultAgent = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentRegister_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Agent == nil {
				m.Agent = &pwdb.Agent{}
			}
			if err := m.Agent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentListInstances) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentListInstances: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentListInstances: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentListInstances_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentListInstances_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instances = append(m.Instances, &pwdb.ChallengeInstance{})
			if err := m.Instances[len(m.Instances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentUpdateState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentUpdateState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentUpdateState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentUpdateState_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instances = append(m.Instances, &pwdb.ChallengeInstance{})
			if err := m.Instances[len(m.Instances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentUpdateState_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamGet_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamGet_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &pwdb.Team{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonChallengeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonChallengeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeList_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeList_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &pwdb.SeasonChallenge{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonChallengeGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonChallengeGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeGet_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonChallengeID", wireType)
			}
			m.SeasonChallengeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonChallengeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeGet_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &pwdb.SeasonChallenge{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeGet_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeID", wireType)
			}
			m.ChallengeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeGet_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &pwdb.Challenge{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeBuy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonChallengeBuy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonChallengeBuy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeBuy_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlavorID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlavorID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeasonID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonChallengeBuy_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSubscription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChallengeSubscription == nil {
				m.ChallengeSubscription = &pwdb.ChallengeSubscription{}
			}
			if err := m.ChallengeSubscription.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeSubscriptionValidate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeSubscriptionValidate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeSubscriptionValidate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeSubscriptionValidate_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSubscriptionID", wireType)
			}
			m.ChallengeSubscriptionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeSubscriptionID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passphrases", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passphrases = append(m.Passphrases, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeSubscriptionValidate_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChallengeValidation == nil {
				m.ChallengeValidation = &pwdb.ChallengeValidation{}
			}
			if err := m.ChallengeValidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamList_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamList_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &pwdb.Team{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamCreate_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeasonID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamCreate_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &pwdb.Team{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamSendInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamSendInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamSendInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamSendInvite_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamSendInvite_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamInvite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamInvite == nil {
				m.TeamInvite = &pwdb.TeamInvite{}
			}
			if err := m.TeamInvite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamAcceptInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamAcceptInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamAcceptInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamAcceptInvite_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamInviteID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamInviteID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamAcceptInvite_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamMember == nil {
				m.TeamMember = &pwdb.TeamMember{}
			}
			if err := m.TeamMember.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonList_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonList_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seasons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seasons = append(m.Seasons, &SeasonList_Output_SeasonAndTeam{})
			if err := m.Seasons[len(m.Seasons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonList_Output_SeasonAndTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonAndTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonAndTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Season == nil {
				m.Season = &pwdb.Season{}
			}
			if err := m.Season.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &pwdb.Team{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSetPreferences) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserSetPreferences: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserSetPreferences: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSetPreferences_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveSeasonID", wireType)
			}
			m.ActiveSeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveSeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSetPreferences_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDeleteAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserDeleteAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserDeleteAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDeleteAccount_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDeleteAccount_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrganizationList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrganizationList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrganizationList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrganizationList_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrganizationList_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &pwdb.Organization{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeList_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeList_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &pwdb.Challenge{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGetSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserGetSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserGetSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGetSession_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGetSession_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &pwdb.User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNewUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNewUser = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Claims == nil {
				m.Claims = &pwsso.Claims{}
			}
			if err := m.Claims.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifications", wireType)
			}
			m.Notifications = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Notifications |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seasons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seasons = append(m.Seasons, &UserGetSession_Output_SeasonAndTeam{})
			if err := m.Seasons[len(m.Seasons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGetSession_Output_SeasonAndTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonAndTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonAndTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Season == nil {
				m.Season = &pwdb.Season{}
			}
			if err := m.Season.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &pwdb.Team{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStatus_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStatus_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EverythingIsOK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EverythingIsOK = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfo_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfo_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uptime", wireType)
			}
			m.Uptime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uptime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuiltAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuiltAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuiltBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuiltBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithinDocker", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithinDocker = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CouponValidate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CouponValidate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CouponValidate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CouponValidate_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CouponValidate_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPwapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPwapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CouponValidation == nil {
				m.CouponValidation = &pwdb.CouponValidation{}
			}
			if err := m.CouponValidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Void) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Void: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Void: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPwapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPwapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPwapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPwapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPwapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPwapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPwapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPwapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPwapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPwapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPwapi = fmt.Errorf("proto: unexpected end of group")
)
